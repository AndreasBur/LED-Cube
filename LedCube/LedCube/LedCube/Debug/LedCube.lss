
LedCube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000640  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800100  00800100  000006b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bbf  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e3  00000000  00000000  00002473  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cdc  00000000  00000000  00002d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00003a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a9  00000000  00000000  00003d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe5  00000000  00000000  0000462d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005612  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__dtors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_16>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	b8 00       	.word	0x00b8	; ????

000000ba <__ctors_end>:
  ba:	bc 00       	.word	0x00bc	; ????

000000bc <__dtors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d8 e0       	ldi	r29, 0x08	; 8
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	af 38       	cpi	r26, 0x8F	; 143
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>

000000d8 <__do_global_ctors>:
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	cd e5       	ldi	r28, 0x5D	; 93
  dc:	d0 e0       	ldi	r29, 0x00	; 0
  de:	04 c0       	rjmp	.+8      	; 0xe8 <__do_global_ctors+0x10>
  e0:	21 97       	sbiw	r28, 0x01	; 1
  e2:	fe 01       	movw	r30, r28
  e4:	0e 94 0d 03 	call	0x61a	; 0x61a <__tablejump2__>
  e8:	cc 35       	cpi	r28, 0x5C	; 92
  ea:	d1 07       	cpc	r29, r17
  ec:	c9 f7       	brne	.-14     	; 0xe0 <__do_global_ctors+0x8>
  ee:	0e 94 96 01 	call	0x32c	; 0x32c <main>
  f2:	0c 94 13 03 	jmp	0x626	; 0x626 <__do_global_dtors>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <setup>:
#define SCK_74 11  // clock input

LedCube Cube;


void setup() {
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	Cube.init();
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_ZN7LedCube4initEv>
	pinMode(7, OUTPUT);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	87 e0       	ldi	r24, 0x07	; 7
 10c:	0e 94 a0 02 	call	0x540	; 0x540 <pinMode>
	for(byte x = 0; x<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; x++) {
 110:	d0 e0       	ldi	r29, 0x00	; 0
#define SCK_74 11  // clock input

LedCube Cube;


void setup() {
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	10 e0       	ldi	r17, 0x00	; 0
	Cube.init();
	pinMode(7, OUTPUT);
	for(byte x = 0; x<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; x++) {
		for(byte y = 0; y<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; y++) {
			for(byte z = 0; z<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; z++) {
				Cube.setVoxel(x, y, z);
 116:	21 2f       	mov	r18, r17
 118:	4c 2f       	mov	r20, r28
 11a:	6d 2f       	mov	r22, r29
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN7LedCube8setVoxelEhhh>
void setup() {
	Cube.init();
	pinMode(7, OUTPUT);
	for(byte x = 0; x<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; x++) {
		for(byte y = 0; y<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; y++) {
			for(byte z = 0; z<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; z++) {
 124:	1f 5f       	subi	r17, 0xFF	; 255
 126:	18 30       	cpi	r17, 0x08	; 8
 128:	b1 f7       	brne	.-20     	; 0x116 <setup+0x1c>

void setup() {
	Cube.init();
	pinMode(7, OUTPUT);
	for(byte x = 0; x<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; x++) {
		for(byte y = 0; y<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; y++) {
 12a:	cf 5f       	subi	r28, 0xFF	; 255
 12c:	c8 30       	cpi	r28, 0x08	; 8
 12e:	91 f7       	brne	.-28     	; 0x114 <setup+0x1a>


void setup() {
	Cube.init();
	pinMode(7, OUTPUT);
	for(byte x = 0; x<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; x++) {
 130:	df 5f       	subi	r29, 0xFF	; 255
 132:	d8 30       	cpi	r29, 0x08	; 8
 134:	71 f7       	brne	.-36     	; 0x112 <setup+0x18>
			for(byte z = 0; z<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; z++) {
				Cube.setVoxel(x, y, z);
			}
		}
	}
	Cube.setNextFrameReady();
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 19 01 	call	0x232	; 0x232 <_ZN7LedCube17setNextFrameReadyEv>
	Cube.showNextFrame();
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	91 e0       	ldi	r25, 0x01	; 1
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
				Cube.setVoxel(x, y, z);
			}
		}
	}
	Cube.setNextFrameReady();
	Cube.showNextFrame();
 148:	0c 94 23 01 	jmp	0x246	; 0x246 <_ZN7LedCube13showNextFrameEv>

0000014c <loop>:
}

void loop()
{
	delay(500);
 14c:	64 ef       	ldi	r22, 0xF4	; 244
 14e:	71 e0       	ldi	r23, 0x01	; 1
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 14 02 	call	0x428	; 0x428 <delay>
	digitalWrite(7, STD_ON);
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	87 e0       	ldi	r24, 0x07	; 7
 15c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <digitalWrite>
	Cube.task();
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZN7LedCube4taskEv>
	digitalWrite(7, STD_OFF);
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	87 e0       	ldi	r24, 0x07	; 7
 16c:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <digitalWrite>

00000170 <_GLOBAL__sub_I_Cube>:

#define SER_74 13  // serial input
#define RCK_74 12  // storage input
#define SCK_74 11  // clock input

LedCube Cube;
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0c 94 c0 00 	jmp	0x180	; 0x180 <_ZN7LedCubeC1Ev>

00000178 <_GLOBAL__sub_D_Cube>:
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_ZN7LedCubeD1Ev>

00000180 <_ZN7LedCubeC1Ev>:
		*Value = LEDCUBE_GET_VOXEL(X, Y, Z);
		return E_OK;
	} else {
		return E_NOT_OK;
	}
} /* getVoxel */
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	fc 01       	movw	r30, r24
 186:	10 82       	st	Z, r1
 188:	11 82       	std	Z+1, r1	; 0x01
 18a:	ec 01       	movw	r28, r24
 18c:	26 96       	adiw	r28, 0x06	; 6
 18e:	d3 83       	std	Z+3, r29	; 0x03
 190:	c2 83       	std	Z+2, r28	; 0x02
 192:	dc 01       	movw	r26, r24
 194:	aa 5b       	subi	r26, 0xBA	; 186
 196:	bf 4f       	sbci	r27, 0xFF	; 255
 198:	b5 83       	std	Z+5, r27	; 0x05
 19a:	a4 83       	std	Z+4, r26	; 0x04
 19c:	80 e4       	ldi	r24, 0x40	; 64
 19e:	fe 01       	movw	r30, r28
 1a0:	98 2f       	mov	r25, r24
 1a2:	11 92       	st	Z+, r1
 1a4:	9a 95       	dec	r25
 1a6:	e9 f7       	brne	.-6      	; 0x1a2 <_ZN7LedCubeC1Ev+0x22>
 1a8:	fd 01       	movw	r30, r26
 1aa:	11 92       	st	Z+, r1
 1ac:	8a 95       	dec	r24
 1ae:	e9 f7       	brne	.-6      	; 0x1aa <_ZN7LedCubeC1Ev+0x2a>
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <_ZN7LedCubeD1Ev>:
 1b6:	08 95       	ret

000001b8 <_ZN7LedCube9clearCubeEv>:
 1b8:	2d 98       	cbi	0x05, 5	; 5
 1ba:	88 e4       	ldi	r24, 0x48	; 72
 1bc:	2b 9a       	sbi	0x05, 3	; 5
 1be:	2b 98       	cbi	0x05, 3	; 5
 1c0:	81 50       	subi	r24, 0x01	; 1
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <_ZN7LedCube9clearCubeEv+0x4>
 1c4:	2c 9a       	sbi	0x05, 4	; 5
 1c6:	2c 98       	cbi	0x05, 4	; 5
 1c8:	08 95       	ret

000001ca <_ZN7LedCube4initEv>:
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	ec 01       	movw	r28, r24
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	89 83       	std	Y+1, r24	; 0x01
 1d4:	ce 01       	movw	r24, r28
 1d6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN7LedCube9clearCubeEv>
 1da:	25 9a       	sbi	0x04, 5	; 4
 1dc:	23 9a       	sbi	0x04, 3	; 4
 1de:	24 9a       	sbi	0x04, 4	; 4
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	89 83       	std	Y+1, r24	; 0x01
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <_ZN7LedCube8setVoxelEhhh>:
 1ea:	68 30       	cpi	r22, 0x08	; 8
 1ec:	00 f5       	brcc	.+64     	; 0x22e <_ZN7LedCube8setVoxelEhhh+0x44>
 1ee:	48 30       	cpi	r20, 0x08	; 8
 1f0:	f0 f4       	brcc	.+60     	; 0x22e <_ZN7LedCube8setVoxelEhhh+0x44>
 1f2:	28 30       	cpi	r18, 0x08	; 8
 1f4:	e0 f4       	brcc	.+56     	; 0x22e <_ZN7LedCube8setVoxelEhhh+0x44>
 1f6:	dc 01       	movw	r26, r24
 1f8:	14 96       	adiw	r26, 0x04	; 4
 1fa:	ed 91       	ld	r30, X+
 1fc:	fc 91       	ld	r31, X
 1fe:	15 97       	sbiw	r26, 0x05	; 5
 200:	b8 e0       	ldi	r27, 0x08	; 8
 202:	4b 9f       	mul	r20, r27
 204:	e0 0d       	add	r30, r0
 206:	f1 1d       	adc	r31, r1
 208:	11 24       	eor	r1, r1
 20a:	e2 0f       	add	r30, r18
 20c:	f1 1d       	adc	r31, r1
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	a0 e0       	ldi	r26, 0x00	; 0
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	04 c0       	rjmp	.+8      	; 0x220 <_ZN7LedCube8setVoxelEhhh+0x36>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	aa 1f       	adc	r26, r26
 21e:	bb 1f       	adc	r27, r27
 220:	6a 95       	dec	r22
 222:	d2 f7       	brpl	.-12     	; 0x218 <_ZN7LedCube8setVoxelEhhh+0x2e>
 224:	20 81       	ld	r18, Z
 226:	82 2b       	or	r24, r18
 228:	80 83       	st	Z, r24
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	08 95       	ret

00000232 <_ZN7LedCube17setNextFrameReadyEv>:
 *                  E_NOT_OK
 *
 *****************************************************************************************************************************************************/
stdReturnType LedCube::setNextFrameReady()
{
	if(State == LEDCUBE_STATE_SHOW_FRAME) {
 232:	fc 01       	movw	r30, r24
 234:	21 81       	ldd	r18, Z+1	; 0x01
 236:	22 30       	cpi	r18, 0x02	; 2
 238:	21 f4       	brne	.+8      	; 0x242 <_ZN7LedCube17setNextFrameReadyEv+0x10>
		State = LEDCUBE_STATE_NEXT_FRAME_READY;
 23a:	23 e0       	ldi	r18, 0x03	; 3
 23c:	21 83       	std	Z+1, r18	; 0x01
		return E_OK;
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	08 95       	ret
	} else {
		return E_NOT_OK;
 242:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 244:	08 95       	ret

00000246 <_ZN7LedCube13showNextFrameEv>:
 *  \return         E_OK
 *                  E_NOT_OK
 *  \pre			setNextFrameReady() has to be called first
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showNextFrame()
{
 246:	fc 01       	movw	r30, r24
	if(State == LEDCUBE_STATE_NEXT_FRAME_READY) {
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	83 30       	cpi	r24, 0x03	; 3
 24c:	61 f4       	brne	.+24     	; 0x266 <_ZN7LedCube13showNextFrameEv+0x20>
 *****************************************************************************************************************************************************/
void LedCube::switchBufferPointer()
{
		byte (*pTmp)[LEDCUBE_NUMBER_OF_LEDS_PER_SIDE];

		pTmp = CurrentFrame;
 24e:	82 81       	ldd	r24, Z+2	; 0x02
 250:	93 81       	ldd	r25, Z+3	; 0x03
		CurrentFrame = NextFrame;
 252:	24 81       	ldd	r18, Z+4	; 0x04
 254:	35 81       	ldd	r19, Z+5	; 0x05
 256:	33 83       	std	Z+3, r19	; 0x03
 258:	22 83       	std	Z+2, r18	; 0x02
		NextFrame = pTmp;
 25a:	95 83       	std	Z+5, r25	; 0x05
 25c:	84 83       	std	Z+4, r24	; 0x04
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showNextFrame()
{
	if(State == LEDCUBE_STATE_NEXT_FRAME_READY) {
		switchBufferPointer();
		State = LEDCUBE_STATE_SHOW_FRAME;
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	81 83       	std	Z+1, r24	; 0x01
		return E_OK;
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	08 95       	ret
	} else {
		return E_NOT_OK;
 266:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 268:	08 95       	ret

0000026a <_ZN7LedCube8sendDataEh>:
 *
 *  \param[in]      Data	data (Byte) to send
 *  \return         -
 *****************************************************************************************************************************************************/
void LedCube::sendData(byte Data)
{
 26a:	87 e0       	ldi	r24, 0x07	; 7
 26c:	90 e0       	ldi	r25, 0x00	; 0
	for (byte i = 0; i < 8; i++) {
		// LSB First
		//digitalWrite(DataInPin, !!(Data & (1 << i)));
		// MSB First
		digitalWriteFast(LEDCUBE_DATA_IN_PIN, !!(Data & (1 << (7 - i))));
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	9b 01       	movw	r18, r22
 272:	08 2e       	mov	r0, r24
 274:	02 c0       	rjmp	.+4      	; 0x27a <_ZN7LedCube8sendDataEh+0x10>
 276:	35 95       	asr	r19
 278:	27 95       	ror	r18
 27a:	0a 94       	dec	r0
 27c:	e2 f7       	brpl	.-8      	; 0x276 <_ZN7LedCube8sendDataEh+0xc>
 27e:	20 ff       	sbrs	r18, 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <_ZN7LedCube8sendDataEh+0x1c>
 282:	2d 9a       	sbi	0x05, 5	; 5
 284:	01 c0       	rjmp	.+2      	; 0x288 <_ZN7LedCube8sendDataEh+0x1e>
 286:	2d 98       	cbi	0x05, 5	; 5
		// toggle clock pin
		digitalWriteFast(LEDCUBE_CLOCK_PIN, HIGH);
 288:	2b 9a       	sbi	0x05, 3	; 5
		digitalWriteFast(LEDCUBE_CLOCK_PIN, LOW);
 28a:	2b 98       	cbi	0x05, 3	; 5
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	80 f7       	brcc	.-32     	; 0x270 <_ZN7LedCube8sendDataEh+0x6>
	}
} /* sendData */
 290:	08 95       	ret

00000292 <_ZN7LedCube9showLayerEh>:
 *  \param[in]      Layer		layer which should be shown on the cube
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showLayer(byte Layer)
{
 292:	ef 92       	push	r14
 294:	ff 92       	push	r15
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
	stdReturnType ReturnValue = E_NOT_OK;
	
	if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
 29e:	68 30       	cpi	r22, 0x08	; 8
 2a0:	30 f5       	brcc	.+76     	; 0x2ee <_ZN7LedCube9showLayerEh+0x5c>
 2a2:	ec 01       	movw	r28, r24
		/* put on given layer */
		sendData(1 << Layer);
 2a4:	06 2f       	mov	r16, r22
 2a6:	10 e0       	ldi	r17, 0x00	; 0
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	9c 01       	movw	r18, r24
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <_ZN7LedCube9showLayerEh+0x22>
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <_ZN7LedCube9showLayerEh+0x1e>
 2b8:	b9 01       	movw	r22, r18
 2ba:	ce 01       	movw	r24, r28
 2bc:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN7LedCube8sendDataEh>
 2c0:	e1 2c       	mov	r14, r1
 2c2:	f1 2c       	mov	r15, r1
		//sendData(1 << Layer);
		/* send the layer data to the shift registers */
		for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
			sendData(CurrentFrame[Y][Layer]);
 2c4:	ea 81       	ldd	r30, Y+2	; 0x02
 2c6:	fb 81       	ldd	r31, Y+3	; 0x03
 2c8:	ee 0d       	add	r30, r14
 2ca:	ff 1d       	adc	r31, r15
 2cc:	e0 0f       	add	r30, r16
 2ce:	f1 1f       	adc	r31, r17
 2d0:	60 81       	ld	r22, Z
 2d2:	ce 01       	movw	r24, r28
 2d4:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN7LedCube8sendDataEh>
 2d8:	38 e0       	ldi	r19, 0x08	; 8
 2da:	e3 0e       	add	r14, r19
 2dc:	f1 1c       	adc	r15, r1
	if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
		/* put on given layer */
		sendData(1 << Layer);
		//sendData(1 << Layer);
		/* send the layer data to the shift registers */
		for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
 2de:	80 e4       	ldi	r24, 0x40	; 64
 2e0:	e8 16       	cp	r14, r24
 2e2:	f1 04       	cpc	r15, r1
 2e4:	79 f7       	brne	.-34     	; 0x2c4 <_ZN7LedCube9showLayerEh+0x32>
			sendData(CurrentFrame[Y][Layer]);
		}
		// toggle storage pin
		digitalWriteFast(LEDCUBE_STORAGE_PIN, HIGH);
 2e6:	2c 9a       	sbi	0x05, 4	; 5
		digitalWriteFast(LEDCUBE_STORAGE_PIN, LOW);
 2e8:	2c 98       	cbi	0x05, 4	; 5
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <_ZN7LedCube9showLayerEh+0x5e>
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showLayer(byte Layer)
{
	stdReturnType ReturnValue = E_NOT_OK;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
		digitalWriteFast(LEDCUBE_STORAGE_PIN, LOW);

		ReturnValue = E_OK;
	}
	return ReturnValue;
} /* showLayer */
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	ff 90       	pop	r15
 2fa:	ef 90       	pop	r14
 2fc:	08 95       	ret

000002fe <_ZN7LedCube4taskEv>:
 *					has to be called periodically
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
void LedCube::task()
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	fc 01       	movw	r30, r24
	if(State == LEDCUBE_STATE_SHOW_FRAME || State == LEDCUBE_STATE_NEXT_FRAME_READY) {
 304:	81 81       	ldd	r24, Z+1	; 0x01
 306:	82 50       	subi	r24, 0x02	; 2
 308:	82 30       	cpi	r24, 0x02	; 2
 30a:	60 f4       	brcc	.+24     	; 0x324 <_ZN7LedCube4taskEv+0x26>
		if(CurrentLayer >= LEDCUBE_NUMBER_OF_LAYERS) {
 30c:	60 81       	ld	r22, Z
 30e:	68 30       	cpi	r22, 0x08	; 8
 310:	10 f0       	brcs	.+4      	; 0x316 <_ZN7LedCube4taskEv+0x18>
			CurrentLayer = 0;
 312:	10 82       	st	Z, r1
 314:	07 c0       	rjmp	.+14     	; 0x324 <_ZN7LedCube4taskEv+0x26>
 316:	ef 01       	movw	r28, r30
		} else {
			showLayer(CurrentLayer);
 318:	cf 01       	movw	r24, r30
 31a:	0e 94 49 01 	call	0x292	; 0x292 <_ZN7LedCube9showLayerEh>
			CurrentLayer++;
 31e:	88 81       	ld	r24, Y
 320:	8f 5f       	subi	r24, 0xFF	; 255
 322:	88 83       	st	Y, r24
		}
	}
} /* task */
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 32a:	08 95       	ret

0000032c <main>:

int main(void)
{
	init();
 32c:	0e 94 3c 02 	call	0x478	; 0x478 <init>

	initVariant();
 330:	0e 94 95 01 	call	0x32a	; 0x32a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 334:	0e 94 7d 00 	call	0xfa	; 0xfa <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 338:	c0 e0       	ldi	r28, 0x00	; 0
 33a:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 33c:	0e 94 a6 00 	call	0x14c	; 0x14c <loop>
		if (serialEventRun) serialEventRun();
 340:	20 97       	sbiw	r28, 0x00	; 0
 342:	e1 f3       	breq	.-8      	; 0x33c <main+0x10>
 344:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 348:	f9 cf       	rjmp	.-14     	; 0x33c <main+0x10>

0000034a <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 34a:	1f 92       	push	r1
 34c:	0f 92       	push	r0
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	0f 92       	push	r0
 352:	11 24       	eor	r1, r1
 354:	2f 93       	push	r18
 356:	3f 93       	push	r19
 358:	8f 93       	push	r24
 35a:	9f 93       	push	r25
 35c:	af 93       	push	r26
 35e:	bf 93       	push	r27
 360:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <timer0_millis>
 364:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <timer0_millis+0x1>
 368:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <timer0_millis+0x2>
 36c:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <timer0_millis+0x3>
 370:	30 91 86 01 	lds	r19, 0x0186	; 0x800186 <timer0_fract>
 374:	23 e0       	ldi	r18, 0x03	; 3
 376:	23 0f       	add	r18, r19
 378:	2d 37       	cpi	r18, 0x7D	; 125
 37a:	20 f4       	brcc	.+8      	; 0x384 <__vector_16+0x3a>
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	a1 1d       	adc	r26, r1
 380:	b1 1d       	adc	r27, r1
 382:	05 c0       	rjmp	.+10     	; 0x38e <__vector_16+0x44>
 384:	26 e8       	ldi	r18, 0x86	; 134
 386:	23 0f       	add	r18, r19
 388:	02 96       	adiw	r24, 0x02	; 2
 38a:	a1 1d       	adc	r26, r1
 38c:	b1 1d       	adc	r27, r1
 38e:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <timer0_fract>
 392:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <timer0_millis>
 396:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <timer0_millis+0x1>
 39a:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <timer0_millis+0x2>
 39e:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <timer0_millis+0x3>
 3a2:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <timer0_overflow_count>
 3a6:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <timer0_overflow_count+0x1>
 3aa:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <timer0_overflow_count+0x2>
 3ae:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <timer0_overflow_count+0x3>
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	a1 1d       	adc	r26, r1
 3b6:	b1 1d       	adc	r27, r1
 3b8:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <timer0_overflow_count>
 3bc:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <timer0_overflow_count+0x1>
 3c0:	a0 93 8d 01 	sts	0x018D, r26	; 0x80018d <timer0_overflow_count+0x2>
 3c4:	b0 93 8e 01 	sts	0x018E, r27	; 0x80018e <timer0_overflow_count+0x3>
 3c8:	bf 91       	pop	r27
 3ca:	af 91       	pop	r26
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <micros>:
 3de:	3f b7       	in	r19, 0x3f	; 63
 3e0:	f8 94       	cli
 3e2:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <timer0_overflow_count>
 3e6:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <timer0_overflow_count+0x1>
 3ea:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <timer0_overflow_count+0x2>
 3ee:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <timer0_overflow_count+0x3>
 3f2:	26 b5       	in	r18, 0x26	; 38
 3f4:	a8 9b       	sbis	0x15, 0	; 21
 3f6:	05 c0       	rjmp	.+10     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 3f8:	2f 3f       	cpi	r18, 0xFF	; 255
 3fa:	19 f0       	breq	.+6      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	a1 1d       	adc	r26, r1
 400:	b1 1d       	adc	r27, r1
 402:	3f bf       	out	0x3f, r19	; 63
 404:	ba 2f       	mov	r27, r26
 406:	a9 2f       	mov	r26, r25
 408:	98 2f       	mov	r25, r24
 40a:	88 27       	eor	r24, r24
 40c:	82 0f       	add	r24, r18
 40e:	91 1d       	adc	r25, r1
 410:	a1 1d       	adc	r26, r1
 412:	b1 1d       	adc	r27, r1
 414:	bc 01       	movw	r22, r24
 416:	cd 01       	movw	r24, r26
 418:	42 e0       	ldi	r20, 0x02	; 2
 41a:	66 0f       	add	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	88 1f       	adc	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	4a 95       	dec	r20
 424:	d1 f7       	brne	.-12     	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
 426:	08 95       	ret

00000428 <delay>:
 428:	cf 92       	push	r12
 42a:	df 92       	push	r13
 42c:	ef 92       	push	r14
 42e:	ff 92       	push	r15
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	6b 01       	movw	r12, r22
 436:	7c 01       	movw	r14, r24
 438:	0e 94 ef 01 	call	0x3de	; 0x3de <micros>
 43c:	eb 01       	movw	r28, r22
 43e:	c1 14       	cp	r12, r1
 440:	d1 04       	cpc	r13, r1
 442:	e1 04       	cpc	r14, r1
 444:	f1 04       	cpc	r15, r1
 446:	89 f0       	breq	.+34     	; 0x46a <delay+0x42>
 448:	0e 94 0c 03 	call	0x618	; 0x618 <yield>
 44c:	0e 94 ef 01 	call	0x3de	; 0x3de <micros>
 450:	6c 1b       	sub	r22, r28
 452:	7d 0b       	sbc	r23, r29
 454:	68 3e       	cpi	r22, 0xE8	; 232
 456:	73 40       	sbci	r23, 0x03	; 3
 458:	90 f3       	brcs	.-28     	; 0x43e <delay+0x16>
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	c8 1a       	sub	r12, r24
 45e:	d1 08       	sbc	r13, r1
 460:	e1 08       	sbc	r14, r1
 462:	f1 08       	sbc	r15, r1
 464:	c8 51       	subi	r28, 0x18	; 24
 466:	dc 4f       	sbci	r29, 0xFC	; 252
 468:	ea cf       	rjmp	.-44     	; 0x43e <delay+0x16>
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	ff 90       	pop	r15
 470:	ef 90       	pop	r14
 472:	df 90       	pop	r13
 474:	cf 90       	pop	r12
 476:	08 95       	ret

00000478 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 478:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 47a:	84 b5       	in	r24, 0x24	; 36
 47c:	82 60       	ori	r24, 0x02	; 2
 47e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 480:	84 b5       	in	r24, 0x24	; 36
 482:	81 60       	ori	r24, 0x01	; 1
 484:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 486:	85 b5       	in	r24, 0x25	; 37
 488:	82 60       	ori	r24, 0x02	; 2
 48a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 48c:	85 b5       	in	r24, 0x25	; 37
 48e:	81 60       	ori	r24, 0x01	; 1
 490:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 492:	ee e6       	ldi	r30, 0x6E	; 110
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	81 60       	ori	r24, 0x01	; 1
 49a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 49c:	e1 e8       	ldi	r30, 0x81	; 129
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 4a2:	80 81       	ld	r24, Z
 4a4:	82 60       	ori	r24, 0x02	; 2
 4a6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 4a8:	80 81       	ld	r24, Z
 4aa:	81 60       	ori	r24, 0x01	; 1
 4ac:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 4ae:	e0 e8       	ldi	r30, 0x80	; 128
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	81 60       	ori	r24, 0x01	; 1
 4b6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 4b8:	e1 eb       	ldi	r30, 0xB1	; 177
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	84 60       	ori	r24, 0x04	; 4
 4c0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 4c2:	e0 eb       	ldi	r30, 0xB0	; 176
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	81 60       	ori	r24, 0x01	; 1
 4ca:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 4cc:	ea e7       	ldi	r30, 0x7A	; 122
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	84 60       	ori	r24, 0x04	; 4
 4d4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 4d6:	80 81       	ld	r24, Z
 4d8:	82 60       	ori	r24, 0x02	; 2
 4da:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 4dc:	80 81       	ld	r24, Z
 4de:	81 60       	ori	r24, 0x01	; 1
 4e0:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 4e2:	80 81       	ld	r24, Z
 4e4:	80 68       	ori	r24, 0x80	; 128
 4e6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 4e8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4ec:	08 95       	ret

000004ee <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 4ee:	83 30       	cpi	r24, 0x03	; 3
 4f0:	81 f0       	breq	.+32     	; 0x512 <turnOffPWM+0x24>
 4f2:	28 f4       	brcc	.+10     	; 0x4fe <turnOffPWM+0x10>
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	99 f0       	breq	.+38     	; 0x51e <turnOffPWM+0x30>
 4f8:	82 30       	cpi	r24, 0x02	; 2
 4fa:	a1 f0       	breq	.+40     	; 0x524 <turnOffPWM+0x36>
 4fc:	08 95       	ret
 4fe:	87 30       	cpi	r24, 0x07	; 7
 500:	a9 f0       	breq	.+42     	; 0x52c <turnOffPWM+0x3e>
 502:	88 30       	cpi	r24, 0x08	; 8
 504:	b9 f0       	breq	.+46     	; 0x534 <turnOffPWM+0x46>
 506:	84 30       	cpi	r24, 0x04	; 4
 508:	d1 f4       	brne	.+52     	; 0x53e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 50a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 50e:	8f 7d       	andi	r24, 0xDF	; 223
 510:	03 c0       	rjmp	.+6      	; 0x518 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 512:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 516:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 518:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 51c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 51e:	84 b5       	in	r24, 0x24	; 36
 520:	8f 77       	andi	r24, 0x7F	; 127
 522:	02 c0       	rjmp	.+4      	; 0x528 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 524:	84 b5       	in	r24, 0x24	; 36
 526:	8f 7d       	andi	r24, 0xDF	; 223
 528:	84 bd       	out	0x24, r24	; 36
 52a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 52c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 530:	8f 77       	andi	r24, 0x7F	; 127
 532:	03 c0       	rjmp	.+6      	; 0x53a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 534:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 538:	8f 7d       	andi	r24, 0xDF	; 223
 53a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 53e:	08 95       	ret

00000540 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	fc 01       	movw	r30, r24
 548:	e4 58       	subi	r30, 0x84	; 132
 54a:	ff 4f       	sbci	r31, 0xFF	; 255
 54c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 54e:	fc 01       	movw	r30, r24
 550:	e0 57       	subi	r30, 0x70	; 112
 552:	ff 4f       	sbci	r31, 0xFF	; 255
 554:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 556:	88 23       	and	r24, r24
 558:	61 f1       	breq	.+88     	; 0x5b2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	fc 01       	movw	r30, r24
 562:	e2 55       	subi	r30, 0x52	; 82
 564:	ff 4f       	sbci	r31, 0xFF	; 255
 566:	c5 91       	lpm	r28, Z+
 568:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 56a:	fc 01       	movw	r30, r24
 56c:	ec 55       	subi	r30, 0x5C	; 92
 56e:	ff 4f       	sbci	r31, 0xFF	; 255
 570:	a5 91       	lpm	r26, Z+
 572:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 574:	61 11       	cpse	r22, r1
 576:	09 c0       	rjmp	.+18     	; 0x58a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 578:	9f b7       	in	r25, 0x3f	; 63
                cli();
 57a:	f8 94       	cli
		*reg &= ~bit;
 57c:	88 81       	ld	r24, Y
 57e:	20 95       	com	r18
 580:	82 23       	and	r24, r18
 582:	88 83       	st	Y, r24
		*out &= ~bit;
 584:	ec 91       	ld	r30, X
 586:	2e 23       	and	r18, r30
 588:	0b c0       	rjmp	.+22     	; 0x5a0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 58a:	62 30       	cpi	r22, 0x02	; 2
 58c:	61 f4       	brne	.+24     	; 0x5a6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 58e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 590:	f8 94       	cli
		*reg &= ~bit;
 592:	38 81       	ld	r19, Y
 594:	82 2f       	mov	r24, r18
 596:	80 95       	com	r24
 598:	83 23       	and	r24, r19
 59a:	88 83       	st	Y, r24
		*out |= bit;
 59c:	ec 91       	ld	r30, X
 59e:	2e 2b       	or	r18, r30
 5a0:	2c 93       	st	X, r18
		SREG = oldSREG;
 5a2:	9f bf       	out	0x3f, r25	; 63
 5a4:	06 c0       	rjmp	.+12     	; 0x5b2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 5a6:	8f b7       	in	r24, 0x3f	; 63
                cli();
 5a8:	f8 94       	cli
		*reg |= bit;
 5aa:	e8 81       	ld	r30, Y
 5ac:	2e 2b       	or	r18, r30
 5ae:	28 83       	st	Y, r18
		SREG = oldSREG;
 5b0:	8f bf       	out	0x3f, r24	; 63
	}
}
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 5be:	28 2f       	mov	r18, r24
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	f9 01       	movw	r30, r18
 5c4:	e8 59       	subi	r30, 0x98	; 152
 5c6:	ff 4f       	sbci	r31, 0xFF	; 255
 5c8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 5ca:	f9 01       	movw	r30, r18
 5cc:	e4 58       	subi	r30, 0x84	; 132
 5ce:	ff 4f       	sbci	r31, 0xFF	; 255
 5d0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 5d2:	f9 01       	movw	r30, r18
 5d4:	e0 57       	subi	r30, 0x70	; 112
 5d6:	ff 4f       	sbci	r31, 0xFF	; 255
 5d8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 5da:	cc 23       	and	r28, r28
 5dc:	c9 f0       	breq	.+50     	; 0x610 <digitalWrite+0x58>
 5de:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 5e0:	81 11       	cpse	r24, r1
 5e2:	0e 94 77 02 	call	0x4ee	; 0x4ee <turnOffPWM>

	out = portOutputRegister(port);
 5e6:	ec 2f       	mov	r30, r28
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	ee 0f       	add	r30, r30
 5ec:	ff 1f       	adc	r31, r31
 5ee:	ec 55       	subi	r30, 0x5C	; 92
 5f0:	ff 4f       	sbci	r31, 0xFF	; 255
 5f2:	a5 91       	lpm	r26, Z+
 5f4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 5f6:	8f b7       	in	r24, 0x3f	; 63
	cli();
 5f8:	f8 94       	cli

	if (val == LOW) {
 5fa:	11 11       	cpse	r17, r1
 5fc:	05 c0       	rjmp	.+10     	; 0x608 <digitalWrite+0x50>
		*out &= ~bit;
 5fe:	9c 91       	ld	r25, X
 600:	ed 2f       	mov	r30, r29
 602:	e0 95       	com	r30
 604:	e9 23       	and	r30, r25
 606:	02 c0       	rjmp	.+4      	; 0x60c <digitalWrite+0x54>
	} else {
		*out |= bit;
 608:	ec 91       	ld	r30, X
 60a:	ed 2b       	or	r30, r29
 60c:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 60e:	8f bf       	out	0x3f, r24	; 63
}
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	1f 91       	pop	r17
 616:	08 95       	ret

00000618 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 618:	08 95       	ret

0000061a <__tablejump2__>:
 61a:	ee 0f       	add	r30, r30
 61c:	ff 1f       	adc	r31, r31
 61e:	05 90       	lpm	r0, Z+
 620:	f4 91       	lpm	r31, Z
 622:	e0 2d       	mov	r30, r0
 624:	09 94       	ijmp

00000626 <__do_global_dtors>:
 626:	10 e0       	ldi	r17, 0x00	; 0
 628:	cd e5       	ldi	r28, 0x5D	; 93
 62a:	d0 e0       	ldi	r29, 0x00	; 0
 62c:	04 c0       	rjmp	.+8      	; 0x636 <__do_global_dtors+0x10>
 62e:	fe 01       	movw	r30, r28
 630:	0e 94 0d 03 	call	0x61a	; 0x61a <__tablejump2__>
 634:	21 96       	adiw	r28, 0x01	; 1
 636:	ce 35       	cpi	r28, 0x5E	; 94
 638:	d1 07       	cpc	r29, r17
 63a:	c9 f7       	brne	.-14     	; 0x62e <__do_global_dtors+0x8>
 63c:	f8 94       	cli

0000063e <__stop_program>:
 63e:	ff cf       	rjmp	.-2      	; 0x63e <__stop_program>
