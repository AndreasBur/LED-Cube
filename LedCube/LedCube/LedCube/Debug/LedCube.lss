
LedCube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         00000000  00800100  00800100  00001428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  00800100  00800100  00001428  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001488  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000451f  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c14  00000000  00000000  00005c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017a1  00000000  00000000  00006883  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f4  00000000  00000000  00008024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000118a  00000000  00000000  00008818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002dd7  00000000  00000000  000099a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000410  00000000  00000000  0000c779  2**0
=======
  0 .data         00000000  00800100  00800100  000013d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000135e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  00800100  00800100  000013d2  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000013d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044cc  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf5  00000000  00000000  00005bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001773  00000000  00000000  000067bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f0  00000000  00000000  00007f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012a6  00000000  00000000  00008720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b8d  00000000  00000000  000099c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000c553  2**0
>>>>>>> ...
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__dtors_end>
       4:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
       8:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
       c:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      10:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      14:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      18:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      1c:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      20:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      24:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      28:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      2c:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      30:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      34:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      38:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      3c:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
<<<<<<< HEAD
      40:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__vector_16>
=======
      40:	0c 94 35 08 	jmp	0x106a	; 0x106a <__vector_16>
>>>>>>> ...
      44:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      48:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      4c:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      50:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      54:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      58:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      5c:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      60:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>
      64:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__bad_interrupt>

00000068 <__trampolines_end>:
	...
      70:	7e 81       	ldd	r23, Y+6	; 0x06
      72:	a5 81       	ldd	r26, Z+5	; 0x05
      74:	bd 99       	sbic	0x17, 5	; 23
      76:	81 7e       	andi	r24, 0xE1	; 225
      78:	7e ff       	.word	0xff7e	; ????
      7a:	db ff       	.word	0xffdb	; ????
      7c:	c3 e7       	ldi	r28, 0x73	; 115
      7e:	ff 7e       	andi	r31, 0xEF	; 239
      80:	36 7f       	andi	r19, 0xF6	; 246
      82:	7f 7f       	andi	r23, 0xFF	; 255
      84:	3e 1c       	adc	r3, r14
      86:	08 00       	.word	0x0008	; ????
      88:	08 1c       	adc	r0, r8
      8a:	3e 7f       	andi	r19, 0xFE	; 254
      8c:	3e 1c       	adc	r3, r14
      8e:	08 00       	.word	0x0008	; ????
      90:	1c 3e       	cpi	r17, 0xEC	; 236
      92:	1c 7f       	andi	r17, 0xFC	; 252
      94:	7f 6b       	ori	r23, 0xBF	; 191
      96:	08 1c       	adc	r0, r8
      98:	08 08       	sbc	r0, r8
      9a:	1c 3e       	cpi	r17, 0xEC	; 236
      9c:	7f 3e       	cpi	r23, 0xEF	; 239
      9e:	08 1c       	adc	r0, r8
	...
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	f0 be       	out	0x30, r15	; 48
      c4:	33 33       	cpi	r19, 0x33	; 51
      c6:	33 1e       	adc	r3, r19
      c8:	3c 66       	ori	r19, 0x6C	; 108
      ca:	66 66       	ori	r22, 0x66	; 102
      cc:	3c 18       	sub	r3, r12
      ce:	7e 18       	sub	r7, r14
	...
<<<<<<< HEAD
      d8:	fe c6       	rjmp	.+3580   	; 0xed6 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1bc>
      da:	fe c6       	rjmp	.+3580   	; 0xed8 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1be>
=======
      d8:	fe c6       	rjmp	.+3580   	; 0xed6 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1ee>
      da:	fe c6       	rjmp	.+3580   	; 0xed8 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1f0>
>>>>>>> ...
      dc:	c6 e6       	ldi	r28, 0x66	; 102
      de:	67 03       	mulsu	r22, r23
      e0:	99 5a       	subi	r25, 0xA9	; 169
      e2:	3c e7       	ldi	r19, 0x7C	; 124
      e4:	e7 3c       	cpi	r30, 0xC7	; 199
      e6:	5a 99       	sbic	0x0b, 2	; 11
      e8:	01 07       	cpc	r16, r17
      ea:	1f 7f       	andi	r17, 0xFF	; 255
      ec:	1f 07       	cpc	r17, r31
      ee:	01 00       	.word	0x0001	; ????
      f0:	40 70       	andi	r20, 0x00	; 0
      f2:	7c 7f       	andi	r23, 0xFC	; 252
      f4:	7c 70       	andi	r23, 0x0C	; 12
      f6:	40 00       	.word	0x0040	; ????
      f8:	18 3c       	cpi	r17, 0xC8	; 200
      fa:	7e 18       	sub	r7, r14
      fc:	18 7e       	andi	r17, 0xE8	; 232
      fe:	3c 18       	sub	r3, r12
     100:	66 66       	ori	r22, 0x66	; 102
     102:	66 66       	ori	r22, 0x66	; 102
     104:	66 00       	.word	0x0066	; ????
     106:	66 00       	.word	0x0066	; ????
     108:	fe db       	rcall	.-2052   	; 0xfffff906 <__eeprom_end+0xff7ef906>
     10a:	db de       	rcall	.-586    	; 0xfffffec2 <__eeprom_end+0xff7efec2>
     10c:	d8 d8       	rcall	.-3664   	; 0xfffff2be <__eeprom_end+0xff7ef2be>
     10e:	d8 00       	.word	0x00d8	; ????
     110:	7e c3       	rjmp	.+1788   	; 0x80e <__FUSE_REGION_LENGTH__+0x40e>
     112:	1e 33       	cpi	r17, 0x3E	; 62
     114:	33 1e       	adc	r3, r19
     116:	31 1f       	adc	r19, r17
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	7e 7e       	andi	r23, 0xEE	; 238
     11e:	7e 00       	.word	0x007e	; ????
     120:	18 3c       	cpi	r17, 0xC8	; 200
     122:	7e 18       	sub	r7, r14
     124:	7e 3c       	cpi	r23, 0xCE	; 206
     126:	18 ff       	.word	0xff18	; ????
     128:	18 3c       	cpi	r17, 0xC8	; 200
     12a:	7e 18       	sub	r7, r14
     12c:	18 18       	sub	r1, r8
     12e:	18 00       	.word	0x0018	; ????
     130:	18 18       	sub	r1, r8
     132:	18 18       	sub	r1, r8
     134:	7e 3c       	cpi	r23, 0xCE	; 206
     136:	18 00       	.word	0x0018	; ????
     138:	00 18       	sub	r0, r0
     13a:	30 7f       	andi	r19, 0xF0	; 240
     13c:	30 18       	sub	r3, r0
     13e:	00 00       	nop
     140:	00 0c       	add	r0, r0
     142:	06 7f       	andi	r16, 0xF6	; 246
     144:	06 0c       	add	r0, r6
     146:	00 00       	nop
     148:	00 00       	nop
     14a:	03 03       	mulsu	r16, r19
     14c:	03 7f       	andi	r16, 0xF3	; 243
     14e:	00 00       	nop
     150:	00 24       	eor	r0, r0
     152:	66 ff       	sbrs	r22, 6
     154:	66 24       	eor	r6, r6
     156:	00 00       	nop
     158:	00 18       	sub	r0, r0
     15a:	3c 7e       	andi	r19, 0xEC	; 236
     15c:	ff ff       	.word	0xffff	; ????
     15e:	00 00       	nop
     160:	00 ff       	sbrs	r16, 0
     162:	ff 7e       	andi	r31, 0xEF	; 239
     164:	3c 18       	sub	r3, r12
	...
     16e:	00 00       	nop
     170:	0c 1e       	adc	r0, r28
     172:	1e 0c       	add	r1, r14
     174:	0c 00       	.word	0x000c	; ????
     176:	0c 00       	.word	0x000c	; ????
     178:	36 36       	cpi	r19, 0x66	; 102
     17a:	36 00       	.word	0x0036	; ????
     17c:	00 00       	nop
     17e:	00 00       	nop
     180:	36 36       	cpi	r19, 0x66	; 102
     182:	7f 36       	cpi	r23, 0x6F	; 111
     184:	7f 36       	cpi	r23, 0x6F	; 111
     186:	36 00       	.word	0x0036	; ????
     188:	0c 3e       	cpi	r16, 0xEC	; 236
     18a:	03 1e       	adc	r0, r19
     18c:	30 1f       	adc	r19, r16
     18e:	0c 00       	.word	0x000c	; ????
     190:	00 63       	ori	r16, 0x30	; 48
     192:	33 18       	sub	r3, r3
     194:	0c 66       	ori	r16, 0x6C	; 108
     196:	63 00       	.word	0x0063	; ????
     198:	1c 36       	cpi	r17, 0x6C	; 108
     19a:	1c 6e       	ori	r17, 0xEC	; 236
     19c:	3b 33       	cpi	r19, 0x3B	; 59
     19e:	6e 00       	.word	0x006e	; ????
     1a0:	06 06       	cpc	r0, r22
     1a2:	03 00       	.word	0x0003	; ????
     1a4:	00 00       	nop
     1a6:	00 00       	nop
     1a8:	18 0c       	add	r1, r8
     1aa:	06 06       	cpc	r0, r22
     1ac:	06 0c       	add	r0, r6
     1ae:	18 00       	.word	0x0018	; ????
     1b0:	06 0c       	add	r0, r6
     1b2:	18 18       	sub	r1, r8
     1b4:	18 0c       	add	r1, r8
     1b6:	06 00       	.word	0x0006	; ????
     1b8:	00 66       	ori	r16, 0x60	; 96
     1ba:	3c ff       	.word	0xff3c	; ????
     1bc:	3c 66       	ori	r19, 0x6C	; 108
     1be:	00 00       	nop
     1c0:	00 0c       	add	r0, r0
     1c2:	0c 3f       	cpi	r16, 0xFC	; 252
     1c4:	0c 0c       	add	r0, r12
     1c6:	00 00       	nop
     1c8:	00 00       	nop
     1ca:	00 00       	nop
     1cc:	00 0e       	add	r0, r16
     1ce:	0c 06       	cpc	r0, r28
     1d0:	00 00       	nop
     1d2:	00 3f       	cpi	r16, 0xF0	; 240
	...
     1dc:	00 0c       	add	r0, r0
     1de:	0c 00       	.word	0x000c	; ????
     1e0:	60 30       	cpi	r22, 0x00	; 0
     1e2:	18 0c       	add	r1, r8
     1e4:	06 03       	mulsu	r16, r22
     1e6:	01 00       	.word	0x0001	; ????
     1e8:	1e 33       	cpi	r17, 0x3E	; 62
     1ea:	3b 3f       	cpi	r19, 0xFB	; 251
     1ec:	37 33       	cpi	r19, 0x37	; 55
     1ee:	1e 00       	.word	0x001e	; ????
     1f0:	0c 0f       	add	r16, r28
     1f2:	0c 0c       	add	r0, r12
     1f4:	0c 0c       	add	r0, r12
     1f6:	3f 00       	.word	0x003f	; ????
     1f8:	1e 33       	cpi	r17, 0x3E	; 62
     1fa:	30 1c       	adc	r3, r0
     1fc:	06 33       	cpi	r16, 0x36	; 54
     1fe:	3f 00       	.word	0x003f	; ????
     200:	1e 33       	cpi	r17, 0x3E	; 62
     202:	30 1c       	adc	r3, r0
     204:	30 33       	cpi	r19, 0x30	; 48
     206:	1e 00       	.word	0x001e	; ????
     208:	38 3c       	cpi	r19, 0xC8	; 200
     20a:	36 33       	cpi	r19, 0x36	; 54
     20c:	7f 30       	cpi	r23, 0x0F	; 15
     20e:	30 00       	.word	0x0030	; ????
     210:	3f 03       	fmul	r19, r23
     212:	1f 30       	cpi	r17, 0x0F	; 15
     214:	30 33       	cpi	r19, 0x30	; 48
     216:	1e 00       	.word	0x001e	; ????
     218:	1c 06       	cpc	r1, r28
     21a:	03 1f       	adc	r16, r19
     21c:	33 33       	cpi	r19, 0x33	; 51
     21e:	1e 00       	.word	0x001e	; ????
     220:	3f 33       	cpi	r19, 0x3F	; 63
     222:	30 18       	sub	r3, r0
     224:	0c 06       	cpc	r0, r28
     226:	06 00       	.word	0x0006	; ????
     228:	1e 33       	cpi	r17, 0x3E	; 62
     22a:	33 1e       	adc	r3, r19
     22c:	33 33       	cpi	r19, 0x33	; 51
     22e:	1e 00       	.word	0x001e	; ????
     230:	1e 33       	cpi	r17, 0x3E	; 62
     232:	33 3e       	cpi	r19, 0xE3	; 227
     234:	30 18       	sub	r3, r0
     236:	0e 00       	.word	0x000e	; ????
     238:	00 00       	nop
     23a:	0c 0c       	add	r0, r12
     23c:	00 0c       	add	r0, r0
     23e:	0c 00       	.word	0x000c	; ????
     240:	00 00       	nop
     242:	0c 0c       	add	r0, r12
     244:	00 0e       	add	r0, r16
     246:	0c 06       	cpc	r0, r28
     248:	18 0c       	add	r1, r8
     24a:	06 03       	mulsu	r16, r22
     24c:	06 0c       	add	r0, r6
     24e:	18 00       	.word	0x0018	; ????
     250:	00 00       	nop
     252:	3f 00       	.word	0x003f	; ????
     254:	3f 00       	.word	0x003f	; ????
     256:	00 00       	nop
     258:	06 0c       	add	r0, r6
     25a:	18 30       	cpi	r17, 0x08	; 8
     25c:	18 0c       	add	r1, r8
     25e:	06 00       	.word	0x0006	; ????
     260:	1e 33       	cpi	r17, 0x3E	; 62
     262:	30 18       	sub	r3, r0
     264:	0c 00       	.word	0x000c	; ????
     266:	0c 00       	.word	0x000c	; ????
     268:	3e 63       	ori	r19, 0x3E	; 62
     26a:	7b 7b       	andi	r23, 0xBB	; 187
     26c:	7b 03       	fmul	r23, r19
     26e:	1e 00       	.word	0x001e	; ????
     270:	0c 1e       	adc	r0, r28
     272:	33 33       	cpi	r19, 0x33	; 51
     274:	3f 33       	cpi	r19, 0x3F	; 63
     276:	33 00       	.word	0x0033	; ????
     278:	3f 66       	ori	r19, 0x6F	; 111
     27a:	66 3e       	cpi	r22, 0xE6	; 230
     27c:	66 66       	ori	r22, 0x66	; 102
     27e:	3f 00       	.word	0x003f	; ????
     280:	3c 66       	ori	r19, 0x6C	; 108
     282:	03 03       	mulsu	r16, r19
     284:	03 66       	ori	r16, 0x63	; 99
     286:	3c 00       	.word	0x003c	; ????
     288:	3f 36       	cpi	r19, 0x6F	; 111
     28a:	66 66       	ori	r22, 0x66	; 102
     28c:	66 36       	cpi	r22, 0x66	; 102
     28e:	3f 00       	.word	0x003f	; ????
     290:	7f 46       	sbci	r23, 0x6F	; 111
     292:	16 1e       	adc	r1, r22
     294:	16 46       	sbci	r17, 0x66	; 102
     296:	7f 00       	.word	0x007f	; ????
     298:	7f 46       	sbci	r23, 0x6F	; 111
     29a:	16 1e       	adc	r1, r22
     29c:	16 06       	cpc	r1, r22
     29e:	0f 00       	.word	0x000f	; ????
     2a0:	3c 66       	ori	r19, 0x6C	; 108
     2a2:	03 03       	mulsu	r16, r19
     2a4:	73 66       	ori	r23, 0x63	; 99
     2a6:	7c 00       	.word	0x007c	; ????
     2a8:	33 33       	cpi	r19, 0x33	; 51
     2aa:	33 3f       	cpi	r19, 0xF3	; 243
     2ac:	33 33       	cpi	r19, 0x33	; 51
     2ae:	33 00       	.word	0x0033	; ????
     2b0:	1e 0c       	add	r1, r14
     2b2:	0c 0c       	add	r0, r12
     2b4:	0c 0c       	add	r0, r12
     2b6:	1e 00       	.word	0x001e	; ????
     2b8:	78 30       	cpi	r23, 0x08	; 8
     2ba:	30 30       	cpi	r19, 0x00	; 0
     2bc:	33 33       	cpi	r19, 0x33	; 51
     2be:	1e 00       	.word	0x001e	; ????
     2c0:	67 66       	ori	r22, 0x67	; 103
     2c2:	36 1e       	adc	r3, r22
     2c4:	36 66       	ori	r19, 0x66	; 102
     2c6:	67 00       	.word	0x0067	; ????
     2c8:	0f 06       	cpc	r0, r31
     2ca:	06 06       	cpc	r0, r22
     2cc:	46 66       	ori	r20, 0x66	; 102
     2ce:	7f 00       	.word	0x007f	; ????
     2d0:	63 77       	andi	r22, 0x73	; 115
     2d2:	7f 6b       	ori	r23, 0xBF	; 191
     2d4:	63 63       	ori	r22, 0x33	; 51
     2d6:	63 00       	.word	0x0063	; ????
     2d8:	63 67       	ori	r22, 0x73	; 115
     2da:	6f 7b       	andi	r22, 0xBF	; 191
     2dc:	73 63       	ori	r23, 0x33	; 51
     2de:	63 00       	.word	0x0063	; ????
     2e0:	1c 36       	cpi	r17, 0x6C	; 108
     2e2:	63 63       	ori	r22, 0x33	; 51
     2e4:	63 36       	cpi	r22, 0x63	; 99
     2e6:	1c 00       	.word	0x001c	; ????
     2e8:	3f 66       	ori	r19, 0x6F	; 111
     2ea:	66 3e       	cpi	r22, 0xE6	; 230
     2ec:	06 06       	cpc	r0, r22
     2ee:	0f 00       	.word	0x000f	; ????
     2f0:	1e 33       	cpi	r17, 0x3E	; 62
     2f2:	33 33       	cpi	r19, 0x33	; 51
     2f4:	3b 1e       	adc	r3, r27
     2f6:	38 00       	.word	0x0038	; ????
     2f8:	3f 66       	ori	r19, 0x6F	; 111
     2fa:	66 3e       	cpi	r22, 0xE6	; 230
     2fc:	1e 36       	cpi	r17, 0x6E	; 110
     2fe:	67 00       	.word	0x0067	; ????
     300:	1e 33       	cpi	r17, 0x3E	; 62
     302:	07 1c       	adc	r0, r7
     304:	38 33       	cpi	r19, 0x38	; 56
     306:	1e 00       	.word	0x001e	; ????
     308:	3f 2d       	mov	r19, r15
     30a:	0c 0c       	add	r0, r12
     30c:	0c 0c       	add	r0, r12
     30e:	1e 00       	.word	0x001e	; ????
     310:	33 33       	cpi	r19, 0x33	; 51
     312:	33 33       	cpi	r19, 0x33	; 51
     314:	33 33       	cpi	r19, 0x33	; 51
     316:	3f 00       	.word	0x003f	; ????
     318:	33 33       	cpi	r19, 0x33	; 51
     31a:	33 33       	cpi	r19, 0x33	; 51
     31c:	33 1e       	adc	r3, r19
     31e:	0c 00       	.word	0x000c	; ????
     320:	63 63       	ori	r22, 0x33	; 51
     322:	63 6b       	ori	r22, 0xB3	; 179
     324:	7f 77       	andi	r23, 0x7F	; 127
     326:	63 00       	.word	0x0063	; ????
     328:	63 63       	ori	r22, 0x33	; 51
     32a:	36 1c       	adc	r3, r6
     32c:	36 63       	ori	r19, 0x36	; 54
     32e:	63 00       	.word	0x0063	; ????
     330:	33 33       	cpi	r19, 0x33	; 51
     332:	33 1e       	adc	r3, r19
     334:	0c 0c       	add	r0, r12
     336:	1e 00       	.word	0x001e	; ????
     338:	7f 33       	cpi	r23, 0x3F	; 63
     33a:	19 0c       	add	r1, r9
     33c:	46 63       	ori	r20, 0x36	; 54
     33e:	7f 00       	.word	0x007f	; ????
     340:	1e 06       	cpc	r1, r30
     342:	06 06       	cpc	r0, r22
     344:	06 06       	cpc	r0, r22
     346:	1e 00       	.word	0x001e	; ????
     348:	03 06       	cpc	r0, r19
     34a:	0c 18       	sub	r0, r12
     34c:	30 60       	ori	r19, 0x00	; 0
     34e:	40 00       	.word	0x0040	; ????
     350:	1e 18       	sub	r1, r14
     352:	18 18       	sub	r1, r8
     354:	18 18       	sub	r1, r8
     356:	1e 00       	.word	0x001e	; ????
     358:	08 1c       	adc	r0, r8
     35a:	36 63       	ori	r19, 0x36	; 54
	...
     364:	00 00       	nop
     366:	00 ff       	sbrs	r16, 0
     368:	0c 0c       	add	r0, r12
     36a:	18 00       	.word	0x0018	; ????
     36c:	00 00       	nop
     36e:	00 00       	nop
     370:	00 00       	nop
     372:	1e 30       	cpi	r17, 0x0E	; 14
     374:	3e 33       	cpi	r19, 0x3E	; 62
     376:	6e 00       	.word	0x006e	; ????
     378:	07 06       	cpc	r0, r23
     37a:	3e 66       	ori	r19, 0x6E	; 110
     37c:	66 66       	ori	r22, 0x66	; 102
     37e:	3d 00       	.word	0x003d	; ????
     380:	00 00       	nop
     382:	1e 33       	cpi	r17, 0x3E	; 62
     384:	03 33       	cpi	r16, 0x33	; 51
     386:	1e 00       	.word	0x001e	; ????
     388:	38 30       	cpi	r19, 0x08	; 8
     38a:	30 3e       	cpi	r19, 0xE0	; 224
     38c:	33 33       	cpi	r19, 0x33	; 51
     38e:	6e 00       	.word	0x006e	; ????
     390:	00 00       	nop
     392:	1e 33       	cpi	r17, 0x3E	; 62
     394:	3f 03       	fmul	r19, r23
     396:	1e 00       	.word	0x001e	; ????
     398:	1c 36       	cpi	r17, 0x6C	; 108
     39a:	06 0f       	add	r16, r22
     39c:	06 06       	cpc	r0, r22
     39e:	0f 00       	.word	0x000f	; ????
     3a0:	00 00       	nop
     3a2:	6e 33       	cpi	r22, 0x3E	; 62
     3a4:	33 3e       	cpi	r19, 0xE3	; 227
     3a6:	30 1f       	adc	r19, r16
     3a8:	07 06       	cpc	r0, r23
     3aa:	36 6e       	ori	r19, 0xE6	; 230
     3ac:	66 66       	ori	r22, 0x66	; 102
     3ae:	67 00       	.word	0x0067	; ????
     3b0:	0c 00       	.word	0x000c	; ????
     3b2:	0e 0c       	add	r0, r14
     3b4:	0c 0c       	add	r0, r12
     3b6:	1e 00       	.word	0x001e	; ????
     3b8:	18 00       	.word	0x0018	; ????
     3ba:	1e 18       	sub	r1, r14
     3bc:	18 18       	sub	r1, r8
     3be:	1b 0e       	add	r1, r27
     3c0:	07 06       	cpc	r0, r23
     3c2:	66 36       	cpi	r22, 0x66	; 102
     3c4:	1e 36       	cpi	r17, 0x6E	; 110
     3c6:	67 00       	.word	0x0067	; ????
     3c8:	0e 0c       	add	r0, r14
     3ca:	0c 0c       	add	r0, r12
     3cc:	0c 0c       	add	r0, r12
     3ce:	1e 00       	.word	0x001e	; ????
     3d0:	00 00       	nop
     3d2:	37 7f       	andi	r19, 0xF7	; 247
     3d4:	6b 63       	ori	r22, 0x3B	; 59
     3d6:	63 00       	.word	0x0063	; ????
     3d8:	00 00       	nop
     3da:	1f 33       	cpi	r17, 0x3F	; 63
     3dc:	33 33       	cpi	r19, 0x33	; 51
     3de:	33 00       	.word	0x0033	; ????
     3e0:	00 00       	nop
     3e2:	1e 33       	cpi	r17, 0x3E	; 62
     3e4:	33 33       	cpi	r19, 0x33	; 51
     3e6:	1e 00       	.word	0x001e	; ????
     3e8:	00 00       	nop
     3ea:	3b 66       	ori	r19, 0x6B	; 107
     3ec:	66 3e       	cpi	r22, 0xE6	; 230
     3ee:	06 0f       	add	r16, r22
     3f0:	00 00       	nop
     3f2:	6e 33       	cpi	r22, 0x3E	; 62
     3f4:	33 3e       	cpi	r19, 0xE3	; 227
     3f6:	30 78       	andi	r19, 0x80	; 128
     3f8:	00 00       	nop
     3fa:	1b 36       	cpi	r17, 0x6B	; 107
     3fc:	36 06       	cpc	r3, r22
     3fe:	0f 00       	.word	0x000f	; ????
     400:	00 00       	nop
     402:	3e 03       	fmul	r19, r22
     404:	1e 30       	cpi	r17, 0x0E	; 14
     406:	1f 00       	.word	0x001f	; ????
     408:	08 0c       	add	r0, r8
     40a:	3e 0c       	add	r3, r14
     40c:	0c 2c       	mov	r0, r12
     40e:	18 00       	.word	0x0018	; ????
     410:	00 00       	nop
     412:	33 33       	cpi	r19, 0x33	; 51
     414:	33 33       	cpi	r19, 0x33	; 51
     416:	6e 00       	.word	0x006e	; ????
     418:	00 00       	nop
     41a:	33 33       	cpi	r19, 0x33	; 51
     41c:	33 1e       	adc	r3, r19
     41e:	0c 00       	.word	0x000c	; ????
     420:	00 00       	nop
     422:	63 63       	ori	r22, 0x33	; 51
     424:	6b 7f       	andi	r22, 0xFB	; 251
     426:	36 00       	.word	0x0036	; ????
     428:	00 00       	nop
     42a:	63 36       	cpi	r22, 0x63	; 99
     42c:	1c 36       	cpi	r17, 0x6C	; 108
     42e:	63 00       	.word	0x0063	; ????
     430:	00 00       	nop
     432:	33 33       	cpi	r19, 0x33	; 51
     434:	33 3e       	cpi	r19, 0xE3	; 227
     436:	30 1f       	adc	r19, r16
     438:	00 00       	nop
     43a:	3f 19       	sub	r19, r15
     43c:	0c 26       	eor	r0, r28
     43e:	3f 00       	.word	0x003f	; ????
     440:	38 0c       	add	r3, r8
     442:	0c 07       	cpc	r16, r28
     444:	0c 0c       	add	r0, r12
     446:	38 00       	.word	0x0038	; ????
     448:	18 18       	sub	r1, r8
     44a:	18 00       	.word	0x0018	; ????
     44c:	18 18       	sub	r1, r8
     44e:	18 00       	.word	0x0018	; ????
     450:	07 0c       	add	r0, r7
     452:	0c 38       	cpi	r16, 0x8C	; 140
     454:	0c 0c       	add	r0, r12
     456:	07 00       	.word	0x0007	; ????
     458:	6e 3b       	cpi	r22, 0xBE	; 190
     45a:	00 00       	nop
     45c:	00 00       	nop
     45e:	00 00       	nop
     460:	08 1c       	adc	r0, r8
     462:	36 63       	ori	r19, 0x36	; 54
     464:	63 63       	ori	r22, 0x33	; 51
     466:	7f 00       	.word	0x007f	; ????
     468:	1e 33       	cpi	r17, 0x3E	; 62
     46a:	03 03       	mulsu	r16, r19
     46c:	33 1e       	adc	r3, r19
     46e:	0c 06       	cpc	r0, r28
     470:	00 33       	cpi	r16, 0x30	; 48
     472:	00 33       	cpi	r16, 0x30	; 48
     474:	33 33       	cpi	r19, 0x33	; 51
     476:	7e 00       	.word	0x007e	; ????
     478:	18 0c       	add	r1, r8
     47a:	1e 33       	cpi	r17, 0x3E	; 62
     47c:	3f 03       	fmul	r19, r23
     47e:	1e 00       	.word	0x001e	; ????
<<<<<<< HEAD
     480:	7e c3       	rjmp	.+1788   	; 0xb7e <_ZN7LedCube14setVoxelsYFastEhhh+0x7c>
=======
     480:	7e c3       	rjmp	.+1788   	; 0xb7e <_ZN7LedCube17setNextFrameReadyEv>
>>>>>>> ...
     482:	3c 60       	ori	r19, 0x0C	; 12
     484:	7c 66       	ori	r23, 0x6C	; 108
     486:	fc 00       	.word	0x00fc	; ????
     488:	33 00       	.word	0x0033	; ????
     48a:	1e 30       	cpi	r17, 0x0E	; 14
     48c:	3e 33       	cpi	r19, 0x3E	; 62
     48e:	7e 00       	.word	0x007e	; ????
     490:	06 0c       	add	r0, r6
     492:	1e 30       	cpi	r17, 0x0E	; 14
     494:	3e 33       	cpi	r19, 0x3E	; 62
     496:	7e 00       	.word	0x007e	; ????
     498:	3c 66       	ori	r19, 0x6C	; 108
     49a:	3c 60       	ori	r19, 0x0C	; 12
     49c:	7c 66       	ori	r23, 0x6C	; 108
     49e:	fc 00       	.word	0x00fc	; ????
     4a0:	00 1e       	adc	r0, r16
     4a2:	33 03       	mulsu	r19, r19
     4a4:	33 1e       	adc	r3, r19
     4a6:	0c 06       	cpc	r0, r28
<<<<<<< HEAD
     4a8:	7e c3       	rjmp	.+1788   	; 0xba6 <_ZN7LedCube23setNextFrameTimeElapsedEv+0xe>
=======
     4a8:	7e c3       	rjmp	.+1788   	; 0xba6 <_ZN7LedCube23setNextFrameTimeElapsedEv+0x10>
>>>>>>> ...
     4aa:	3c 66       	ori	r19, 0x6C	; 108
     4ac:	7e 06       	cpc	r7, r30
     4ae:	3c 00       	.word	0x003c	; ????
     4b0:	33 00       	.word	0x0033	; ????
     4b2:	1e 33       	cpi	r17, 0x3E	; 62
     4b4:	3f 03       	fmul	r19, r23
     4b6:	1e 00       	.word	0x001e	; ????
     4b8:	06 0c       	add	r0, r6
     4ba:	1e 33       	cpi	r17, 0x3E	; 62
     4bc:	3f 03       	fmul	r19, r23
     4be:	1e 00       	.word	0x001e	; ????
     4c0:	33 00       	.word	0x0033	; ????
     4c2:	0e 0c       	add	r0, r14
     4c4:	0c 0c       	add	r0, r12
     4c6:	1e 00       	.word	0x001e	; ????
     4c8:	3e 63       	ori	r19, 0x3E	; 62
     4ca:	1c 18       	sub	r1, r12
     4cc:	18 18       	sub	r1, r8
     4ce:	3c 00       	.word	0x003c	; ????
     4d0:	06 0c       	add	r0, r6
     4d2:	0e 0c       	add	r0, r14
     4d4:	0c 0c       	add	r0, r12
     4d6:	1e 00       	.word	0x001e	; ????
     4d8:	33 0c       	add	r3, r3
     4da:	1e 33       	cpi	r17, 0x3E	; 62
     4dc:	33 3f       	cpi	r19, 0xF3	; 243
     4de:	33 00       	.word	0x0033	; ????
     4e0:	0c 12       	cpse	r0, r28
     4e2:	0c 1e       	adc	r0, r28
     4e4:	33 3f       	cpi	r19, 0xF3	; 243
     4e6:	33 00       	.word	0x0033	; ????
     4e8:	18 0c       	add	r1, r8
     4ea:	3f 06       	cpc	r3, r31
     4ec:	1e 06       	cpc	r1, r30
     4ee:	3f 00       	.word	0x003f	; ????
     4f0:	00 00       	nop
     4f2:	fe 30       	cpi	r31, 0x0E	; 14
     4f4:	fe 33       	cpi	r31, 0x3E	; 62
     4f6:	fe 00       	.word	0x00fe	; ????
     4f8:	7c 36       	cpi	r23, 0x6C	; 108
     4fa:	33 7f       	andi	r19, 0xF3	; 243
     4fc:	33 33       	cpi	r19, 0x33	; 51
     4fe:	73 00       	.word	0x0073	; ????
     500:	1e 33       	cpi	r17, 0x3E	; 62
     502:	00 1e       	adc	r0, r16
     504:	33 33       	cpi	r19, 0x33	; 51
     506:	1e 00       	.word	0x001e	; ????
     508:	00 33       	cpi	r16, 0x30	; 48
     50a:	00 1e       	adc	r0, r16
     50c:	33 33       	cpi	r19, 0x33	; 51
     50e:	1e 00       	.word	0x001e	; ????
     510:	06 0c       	add	r0, r6
     512:	00 1e       	adc	r0, r16
     514:	33 33       	cpi	r19, 0x33	; 51
     516:	1e 00       	.word	0x001e	; ????
     518:	1e 33       	cpi	r17, 0x3E	; 62
     51a:	00 33       	cpi	r16, 0x30	; 48
     51c:	33 33       	cpi	r19, 0x33	; 51
     51e:	7e 00       	.word	0x007e	; ????
     520:	06 0c       	add	r0, r6
     522:	00 33       	cpi	r16, 0x30	; 48
     524:	33 33       	cpi	r19, 0x33	; 51
     526:	7e 00       	.word	0x007e	; ????
     528:	00 33       	cpi	r16, 0x30	; 48
     52a:	00 33       	cpi	r16, 0x30	; 48
     52c:	33 3f       	cpi	r19, 0xF3	; 243
     52e:	30 1f       	adc	r19, r16
     530:	63 00       	.word	0x0063	; ????
     532:	3e 63       	ori	r19, 0x3E	; 62
     534:	63 63       	ori	r22, 0x33	; 51
     536:	3e 00       	.word	0x003e	; ????
     538:	33 00       	.word	0x0033	; ????
     53a:	33 33       	cpi	r19, 0x33	; 51
     53c:	33 33       	cpi	r19, 0x33	; 51
     53e:	1e 00       	.word	0x001e	; ????
     540:	00 00       	nop
     542:	3e 73       	andi	r19, 0x3E	; 62
     544:	6b 67       	ori	r22, 0x7B	; 123
     546:	3e 00       	.word	0x003e	; ????
     548:	1c 36       	cpi	r17, 0x6C	; 108
     54a:	26 0f       	add	r18, r22
     54c:	06 67       	ori	r16, 0x76	; 118
     54e:	3f 00       	.word	0x003f	; ????
     550:	5c 36       	cpi	r21, 0x6C	; 108
     552:	73 6b       	ori	r23, 0xB3	; 179
     554:	67 36       	cpi	r22, 0x67	; 103
     556:	1d 00       	.word	0x001d	; ????
     558:	00 00       	nop
     55a:	33 1e       	adc	r3, r19
     55c:	0c 1e       	adc	r0, r28
     55e:	33 00       	.word	0x0033	; ????
     560:	70 d8       	rcall	.-3872   	; 0xfffff642 <__eeprom_end+0xff7ef642>
     562:	18 7e       	andi	r17, 0xE8	; 232
     564:	18 18       	sub	r1, r8
     566:	1b 0e       	add	r1, r27
     568:	18 0c       	add	r1, r8
     56a:	1e 30       	cpi	r17, 0x0E	; 14
     56c:	3e 33       	cpi	r19, 0x3E	; 62
     56e:	7e 00       	.word	0x007e	; ????
     570:	18 0c       	add	r1, r8
     572:	0e 0c       	add	r0, r14
     574:	0c 0c       	add	r0, r12
     576:	1e 00       	.word	0x001e	; ????
     578:	30 18       	sub	r3, r0
     57a:	00 1e       	adc	r0, r16
     57c:	33 33       	cpi	r19, 0x33	; 51
     57e:	1e 00       	.word	0x001e	; ????
     580:	30 18       	sub	r3, r0
     582:	00 33       	cpi	r16, 0x30	; 48
     584:	33 33       	cpi	r19, 0x33	; 51
     586:	7e 00       	.word	0x007e	; ????
     588:	6e 3b       	cpi	r22, 0xBE	; 190
     58a:	00 1f       	adc	r16, r16
     58c:	33 33       	cpi	r19, 0x33	; 51
     58e:	33 00       	.word	0x0033	; ????
     590:	6e 3b       	cpi	r22, 0xBE	; 190
     592:	00 37       	cpi	r16, 0x70	; 112
     594:	3f 3b       	cpi	r19, 0xBF	; 191
     596:	33 00       	.word	0x0033	; ????
     598:	3c 36       	cpi	r19, 0x6C	; 108
     59a:	36 7c       	andi	r19, 0xC6	; 198
     59c:	00 7e       	andi	r16, 0xE0	; 224
     59e:	00 00       	nop
     5a0:	3c 66       	ori	r19, 0x6C	; 108
     5a2:	66 3c       	cpi	r22, 0xC6	; 198
     5a4:	00 7e       	andi	r16, 0xE0	; 224
     5a6:	00 00       	nop
     5a8:	0c 00       	.word	0x000c	; ????
     5aa:	0c 06       	cpc	r0, r28
     5ac:	03 33       	cpi	r16, 0x33	; 51
     5ae:	1e 00       	.word	0x001e	; ????
     5b0:	3c 5a       	subi	r19, 0xAC	; 172
     5b2:	a5 9d       	mul	r26, r5
     5b4:	95 66       	ori	r25, 0x65	; 101
     5b6:	3c 00       	.word	0x003c	; ????
     5b8:	00 00       	nop
     5ba:	00 3f       	cpi	r16, 0xF0	; 240
     5bc:	30 30       	cpi	r19, 0x00	; 0
     5be:	00 00       	nop
     5c0:	67 36       	cpi	r22, 0x67	; 103
     5c2:	1e 7e       	andi	r17, 0xEE	; 238
     5c4:	c6 73       	andi	r28, 0x36	; 54
     5c6:	19 f8       	.word	0xf819	; ????
     5c8:	67 36       	cpi	r22, 0x67	; 103
     5ca:	1e ce       	rjmp	.-964    	; 0x208 <__trampolines_end+0x1a0>
     5cc:	e6 b3       	in	r30, 0x16	; 22
     5ce:	f9 c0       	rjmp	.+498    	; 0x7c2 <__FUSE_REGION_LENGTH__+0x3c2>
     5d0:	00 18       	sub	r0, r0
     5d2:	00 18       	sub	r0, r0
     5d4:	18 3c       	cpi	r17, 0xC8	; 200
     5d6:	3c 18       	sub	r3, r12
     5d8:	00 cc       	rjmp	.-2048   	; 0xfffffdda <__eeprom_end+0xff7efdda>
     5da:	66 33       	cpi	r22, 0x36	; 54
     5dc:	66 cc       	rjmp	.-1844   	; 0xfffffeaa <__eeprom_end+0xff7efeaa>
     5de:	00 00       	nop
     5e0:	00 33       	cpi	r16, 0x30	; 48
     5e2:	66 cc       	rjmp	.-1844   	; 0xfffffeb0 <__eeprom_end+0xff7efeb0>
     5e4:	66 33       	cpi	r22, 0x36	; 54
     5e6:	00 00       	nop
     5e8:	44 11       	cpse	r20, r4
     5ea:	44 11       	cpse	r20, r4
     5ec:	44 11       	cpse	r20, r4
     5ee:	44 11       	cpse	r20, r4
     5f0:	aa 55       	subi	r26, 0x5A	; 90
     5f2:	aa 55       	subi	r26, 0x5A	; 90
     5f4:	aa 55       	subi	r26, 0x5A	; 90
     5f6:	aa 55       	subi	r26, 0x5A	; 90
     5f8:	bb ee       	ldi	r27, 0xEB	; 235
     5fa:	bb ee       	ldi	r27, 0xEB	; 235
     5fc:	bb ee       	ldi	r27, 0xEB	; 235
     5fe:	bb ee       	ldi	r27, 0xEB	; 235
     600:	18 18       	sub	r1, r8
     602:	18 18       	sub	r1, r8
     604:	18 18       	sub	r1, r8
     606:	18 18       	sub	r1, r8
     608:	18 18       	sub	r1, r8
     60a:	18 18       	sub	r1, r8
     60c:	1f 18       	sub	r1, r15
     60e:	18 18       	sub	r1, r8
     610:	30 18       	sub	r3, r0
     612:	0c 1e       	adc	r0, r28
     614:	33 3f       	cpi	r19, 0xF3	; 243
     616:	33 00       	.word	0x0033	; ????
     618:	1e 21       	and	r17, r14
     61a:	0c 1e       	adc	r0, r28
     61c:	33 3f       	cpi	r19, 0xF3	; 243
     61e:	33 00       	.word	0x0033	; ????
     620:	03 06       	cpc	r0, r19
     622:	0c 1e       	adc	r0, r28
     624:	33 3f       	cpi	r19, 0xF3	; 243
     626:	33 00       	.word	0x0033	; ????
     628:	3c 42       	sbci	r19, 0x2C	; 44
     62a:	9d 85       	ldd	r25, Y+13	; 0x0d
     62c:	9d 42       	sbci	r25, 0x2D	; 45
     62e:	3c 00       	.word	0x003c	; ????
     630:	6c 6c       	ori	r22, 0xCC	; 204
     632:	6f 60       	ori	r22, 0x0F	; 15
     634:	6f 6c       	ori	r22, 0xCF	; 207
     636:	6c 6c       	ori	r22, 0xCC	; 204
     638:	6c 6c       	ori	r22, 0xCC	; 204
     63a:	6c 6c       	ori	r22, 0xCC	; 204
     63c:	6c 6c       	ori	r22, 0xCC	; 204
     63e:	6c 6c       	ori	r22, 0xCC	; 204
     640:	00 00       	nop
     642:	7f 60       	ori	r23, 0x0F	; 15
     644:	6f 6c       	ori	r22, 0xCF	; 207
     646:	6c 6c       	ori	r22, 0xCC	; 204
     648:	6c 6c       	ori	r22, 0xCC	; 204
     64a:	6f 60       	ori	r22, 0x0F	; 15
     64c:	7f 00       	.word	0x007f	; ????
     64e:	00 00       	nop
     650:	18 18       	sub	r1, r8
     652:	7e 03       	fmul	r23, r22
     654:	03 7e       	andi	r16, 0xE3	; 227
     656:	18 18       	sub	r1, r8
     658:	33 33       	cpi	r19, 0x33	; 51
     65a:	1e 3f       	cpi	r17, 0xFE	; 254
     65c:	0c 3f       	cpi	r16, 0xFC	; 252
     65e:	0c 0c       	add	r0, r12
     660:	00 00       	nop
     662:	00 00       	nop
     664:	1f 18       	sub	r1, r15
     666:	18 18       	sub	r1, r8
     668:	18 18       	sub	r1, r8
     66a:	18 18       	sub	r1, r8
     66c:	f8 00       	.word	0x00f8	; ????
     66e:	00 00       	nop
     670:	18 18       	sub	r1, r8
     672:	18 18       	sub	r1, r8
     674:	ff 00       	.word	0x00ff	; ????
     676:	00 00       	nop
     678:	00 00       	nop
     67a:	00 00       	nop
     67c:	ff 18       	sub	r15, r15
     67e:	18 18       	sub	r1, r8
     680:	18 18       	sub	r1, r8
     682:	18 18       	sub	r1, r8
     684:	f8 18       	sub	r15, r8
     686:	18 18       	sub	r1, r8
     688:	00 00       	nop
     68a:	00 00       	nop
     68c:	ff 00       	.word	0x00ff	; ????
     68e:	00 00       	nop
     690:	18 18       	sub	r1, r8
     692:	18 18       	sub	r1, r8
     694:	ff 18       	sub	r15, r15
     696:	18 18       	sub	r1, r8
     698:	6e 3b       	cpi	r22, 0xBE	; 190
     69a:	1e 30       	cpi	r17, 0x0E	; 14
     69c:	3e 33       	cpi	r19, 0x3E	; 62
     69e:	7e 00       	.word	0x007e	; ????
     6a0:	6e 3b       	cpi	r22, 0xBE	; 190
     6a2:	0c 1e       	adc	r0, r28
     6a4:	33 3f       	cpi	r19, 0xF3	; 243
     6a6:	33 00       	.word	0x0033	; ????
     6a8:	6c 6c       	ori	r22, 0xCC	; 204
     6aa:	ec 0c       	add	r14, r12
     6ac:	fc 00       	.word	0x00fc	; ????
     6ae:	00 00       	nop
     6b0:	00 00       	nop
     6b2:	fc 0c       	add	r15, r12
     6b4:	ec 6c       	ori	r30, 0xCC	; 204
     6b6:	6c 6c       	ori	r22, 0xCC	; 204
     6b8:	6c 6c       	ori	r22, 0xCC	; 204
     6ba:	ef 00       	.word	0x00ef	; ????
     6bc:	ff 00       	.word	0x00ff	; ????
     6be:	00 00       	nop
     6c0:	00 00       	nop
     6c2:	ff 00       	.word	0x00ff	; ????
     6c4:	ef 6c       	ori	r30, 0xCF	; 207
     6c6:	6c 6c       	ori	r22, 0xCC	; 204
     6c8:	6c 6c       	ori	r22, 0xCC	; 204
     6ca:	ec 0c       	add	r14, r12
     6cc:	ec 6c       	ori	r30, 0xCC	; 204
     6ce:	6c 6c       	ori	r22, 0xCC	; 204
     6d0:	00 00       	nop
     6d2:	ff 00       	.word	0x00ff	; ????
     6d4:	ff 00       	.word	0x00ff	; ????
     6d6:	00 00       	nop
     6d8:	6c 6c       	ori	r22, 0xCC	; 204
     6da:	ef 00       	.word	0x00ef	; ????
     6dc:	ef 6c       	ori	r30, 0xCF	; 207
     6de:	6c 6c       	ori	r22, 0xCC	; 204
     6e0:	00 41       	sbci	r16, 0x10	; 16
     6e2:	7f 36       	cpi	r23, 0x6F	; 111
     6e4:	36 7f       	andi	r19, 0xF6	; 246
     6e6:	41 00       	.word	0x0041	; ????
     6e8:	1b 0e       	add	r1, r27
     6ea:	1b 30       	cpi	r17, 0x0B	; 11
     6ec:	3c 36       	cpi	r19, 0x6C	; 108
     6ee:	1c 00       	.word	0x001c	; ????
     6f0:	3f 36       	cpi	r19, 0x6F	; 111
     6f2:	66 6f       	ori	r22, 0xF6	; 246
     6f4:	66 36       	cpi	r22, 0x66	; 102
     6f6:	3f 00       	.word	0x003f	; ????
     6f8:	1e 21       	and	r17, r14
     6fa:	3f 06       	cpc	r3, r31
     6fc:	1e 06       	cpc	r1, r30
     6fe:	3f 00       	.word	0x003f	; ????
     700:	33 00       	.word	0x0033	; ????
     702:	3f 06       	cpc	r3, r31
     704:	1e 06       	cpc	r1, r30
     706:	3f 00       	.word	0x003f	; ????
     708:	06 0c       	add	r0, r6
     70a:	3f 06       	cpc	r3, r31
     70c:	1e 06       	cpc	r1, r30
     70e:	3f 00       	.word	0x003f	; ????
     710:	00 03       	mulsu	r16, r16
     712:	02 07       	cpc	r16, r18
     714:	00 00       	nop
     716:	00 00       	nop
     718:	18 0c       	add	r1, r8
     71a:	1e 0c       	add	r1, r14
     71c:	0c 0c       	add	r0, r12
     71e:	1e 00       	.word	0x001e	; ????
     720:	1e 21       	and	r17, r14
     722:	1e 0c       	add	r1, r14
     724:	0c 0c       	add	r0, r12
     726:	1e 00       	.word	0x001e	; ????
     728:	33 00       	.word	0x0033	; ????
     72a:	1e 0c       	add	r1, r14
     72c:	0c 0c       	add	r0, r12
     72e:	1e 00       	.word	0x001e	; ????
     730:	18 18       	sub	r1, r8
     732:	18 18       	sub	r1, r8
     734:	1f 00       	.word	0x001f	; ????
     736:	00 00       	nop
     738:	00 00       	nop
     73a:	00 00       	nop
     73c:	f8 18       	sub	r15, r8
     73e:	18 18       	sub	r1, r8
     740:	ff ff       	.word	0xffff	; ????
     742:	ff ff       	.word	0xffff	; ????
     744:	ff ff       	.word	0xffff	; ????
     746:	ff ff       	.word	0xffff	; ????
     748:	00 00       	nop
     74a:	00 00       	nop
     74c:	ff ff       	.word	0xffff	; ????
     74e:	ff ff       	.word	0xffff	; ????
     750:	18 18       	sub	r1, r8
     752:	18 00       	.word	0x0018	; ????
     754:	18 18       	sub	r1, r8
     756:	18 00       	.word	0x0018	; ????
     758:	06 0c       	add	r0, r6
     75a:	1e 0c       	add	r1, r14
     75c:	0c 0c       	add	r0, r12
     75e:	1e 00       	.word	0x001e	; ????
     760:	ff ff       	.word	0xffff	; ????
     762:	ff ff       	.word	0xffff	; ????
     764:	00 00       	nop
     766:	00 00       	nop
     768:	18 0c       	add	r1, r8
     76a:	3e 63       	ori	r19, 0x3E	; 62
     76c:	63 63       	ori	r22, 0x33	; 51
     76e:	3e 00       	.word	0x003e	; ????
     770:	00 1e       	adc	r0, r16
     772:	33 1f       	adc	r19, r19
     774:	33 1f       	adc	r19, r19
     776:	03 03       	mulsu	r16, r19
     778:	3e 41       	sbci	r19, 0x1E	; 30
     77a:	3e 63       	ori	r19, 0x3E	; 62
     77c:	63 63       	ori	r22, 0x33	; 51
     77e:	3e 00       	.word	0x003e	; ????
     780:	0c 18       	sub	r0, r12
     782:	3e 63       	ori	r19, 0x3E	; 62
     784:	63 63       	ori	r22, 0x33	; 51
     786:	3e 00       	.word	0x003e	; ????
     788:	6e 3b       	cpi	r22, 0xBE	; 190
     78a:	00 1e       	adc	r0, r16
     78c:	33 33       	cpi	r19, 0x33	; 51
     78e:	1e 00       	.word	0x001e	; ????
     790:	6e 3b       	cpi	r22, 0xBE	; 190
     792:	3e 63       	ori	r19, 0x3E	; 62
     794:	63 63       	ori	r22, 0x33	; 51
     796:	3e 00       	.word	0x003e	; ????
     798:	00 66       	ori	r16, 0x60	; 96
     79a:	66 66       	ori	r22, 0x66	; 102
     79c:	66 3e       	cpi	r22, 0xE6	; 230
     79e:	06 03       	mulsu	r16, r22
     7a0:	00 07       	cpc	r16, r16
     7a2:	1e 36       	cpi	r17, 0x6E	; 110
     7a4:	1e 06       	cpc	r1, r30
     7a6:	0f 00       	.word	0x000f	; ????
     7a8:	0f 06       	cpc	r0, r31
     7aa:	3e 66       	ori	r19, 0x6E	; 110
     7ac:	3e 06       	cpc	r3, r30
     7ae:	0f 00       	.word	0x000f	; ????
     7b0:	18 0c       	add	r1, r8
     7b2:	33 33       	cpi	r19, 0x33	; 51
     7b4:	33 33       	cpi	r19, 0x33	; 51
     7b6:	1e 00       	.word	0x001e	; ????
     7b8:	1e 21       	and	r17, r14
     7ba:	00 33       	cpi	r16, 0x30	; 48
     7bc:	33 33       	cpi	r19, 0x33	; 51
     7be:	1e 00       	.word	0x001e	; ????
     7c0:	06 0c       	add	r0, r6
     7c2:	33 33       	cpi	r19, 0x33	; 51
     7c4:	33 33       	cpi	r19, 0x33	; 51
     7c6:	1e 00       	.word	0x001e	; ????
     7c8:	18 0c       	add	r1, r8
     7ca:	00 33       	cpi	r16, 0x30	; 48
     7cc:	33 3f       	cpi	r19, 0xF3	; 243
     7ce:	30 1f       	adc	r19, r16
     7d0:	18 0c       	add	r1, r8
     7d2:	33 33       	cpi	r19, 0x33	; 51
     7d4:	1e 0c       	add	r1, r14
     7d6:	1e 00       	.word	0x001e	; ????
     7d8:	00 3f       	cpi	r16, 0xF0	; 240
     7da:	00 00       	nop
     7dc:	00 00       	nop
     7de:	00 00       	nop
     7e0:	18 0c       	add	r1, r8
	...
     7ea:	00 00       	nop
     7ec:	3f 00       	.word	0x003f	; ????
     7ee:	00 00       	nop
     7f0:	0c 0c       	add	r0, r12
     7f2:	3f 0c       	add	r3, r15
     7f4:	0c 00       	.word	0x000c	; ????
     7f6:	3f 00       	.word	0x003f	; ????
     7f8:	00 00       	nop
     7fa:	00 3f       	cpi	r16, 0xF0	; 240
     7fc:	00 3f       	cpi	r16, 0xF0	; 240
     7fe:	00 00       	nop
     800:	67 34       	cpi	r22, 0x47	; 71
     802:	1e cc       	rjmp	.-1988   	; 0x40 <__SREG__+0x1>
     804:	e7 b3       	in	r30, 0x17	; 23
<<<<<<< HEAD
     806:	f9 c0       	rjmp	.+498    	; 0x9fa <setup+0x1c>
=======
     806:	f9 c0       	rjmp	.+498    	; 0x9fa <setup+0x1e>
>>>>>>> ...
     808:	fe db       	rcall	.-2052   	; 0x6 <__zero_reg__+0x5>
     80a:	db de       	rcall	.-586    	; 0x5c2 <__FUSE_REGION_LENGTH__+0x1c2>
     80c:	d8 d8       	rcall	.-3664   	; 0xfffff9be <__eeprom_end+0xff7ef9be>
     80e:	d8 00       	.word	0x00d8	; ????
<<<<<<< HEAD
     810:	7e c3       	rjmp	.+1788   	; 0xf0e <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1f4>
=======
     810:	7e c3       	rjmp	.+1788   	; 0xf0e <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x226>
>>>>>>> ...
     812:	1e 33       	cpi	r17, 0x3E	; 62
     814:	33 1e       	adc	r3, r19
     816:	31 1f       	adc	r19, r17
     818:	0c 0c       	add	r0, r12
     81a:	00 3f       	cpi	r16, 0xF0	; 240
     81c:	00 0c       	add	r0, r0
     81e:	0c 00       	.word	0x000c	; ????
     820:	00 00       	nop
     822:	00 00       	nop
     824:	00 00       	nop
     826:	0c 06       	cpc	r0, r28
     828:	1c 36       	cpi	r17, 0x6C	; 108
     82a:	36 1c       	adc	r3, r6
     82c:	00 00       	nop
     82e:	00 00       	nop
     830:	00 33       	cpi	r16, 0x30	; 48
	...
     83a:	00 00       	nop
     83c:	18 00       	.word	0x0018	; ????
     83e:	00 00       	nop
     840:	1c 1e       	adc	r1, r28
     842:	18 18       	sub	r1, r8
     844:	7e 00       	.word	0x007e	; ????
     846:	00 00       	nop
     848:	3e 70       	andi	r19, 0x0E	; 14
     84a:	3c 70       	andi	r19, 0x0C	; 12
     84c:	3e 00       	.word	0x003e	; ????
     84e:	00 00       	nop
     850:	1e 30       	cpi	r17, 0x0E	; 14
     852:	1c 06       	cpc	r1, r28
     854:	3e 00       	.word	0x003e	; ????
     856:	00 00       	nop
     858:	00 00       	nop
     85a:	3c 3c       	cpi	r19, 0xCC	; 204
     85c:	3c 3c       	cpi	r19, 0xCC	; 204
	...

00000868 <digital_pin_to_timer_PGM>:
     868:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     878:	00 00 00 00                                         ....

0000087c <digital_pin_to_bit_mask_PGM>:
     87c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     88c:	04 08 10 20                                         ... 

00000890 <digital_pin_to_port_PGM>:
     890:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     8a0:	03 03 03 03                                         ....

000008a4 <port_to_output_PGM>:
     8a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000008ae <port_to_mode_PGM>:
     8ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000008b8 <__ctors_start>:
<<<<<<< HEAD
     8b8:	1b 05       	cpc	r17, r11

000008ba <__ctors_end>:
     8ba:	25 05       	cpc	r18, r5
=======
     8b8:	1a 05       	cpc	r17, r10

000008ba <__ctors_end>:
     8ba:	24 05       	cpc	r18, r4
>>>>>>> ...

000008bc <__dtors_end>:
     8bc:	11 24       	eor	r1, r1
     8be:	1f be       	out	0x3f, r1	; 63
     8c0:	cf ef       	ldi	r28, 0xFF	; 255
     8c2:	d8 e0       	ldi	r29, 0x08	; 8
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	cd bf       	out	0x3d, r28	; 61

000008c8 <__do_clear_bss>:
     8c8:	21 e0       	ldi	r18, 0x01	; 1
     8ca:	a0 e0       	ldi	r26, 0x00	; 0
     8cc:	b1 e0       	ldi	r27, 0x01	; 1
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <.do_clear_bss_start>

000008d0 <.do_clear_bss_loop>:
     8d0:	1d 92       	st	X+, r1

000008d2 <.do_clear_bss_start>:
     8d2:	a6 39       	cpi	r26, 0x96	; 150
     8d4:	b2 07       	cpc	r27, r18
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <.do_clear_bss_loop>

000008d8 <__do_global_ctors>:
     8d8:	14 e0       	ldi	r17, 0x04	; 4
     8da:	cd e5       	ldi	r28, 0x5D	; 93
     8dc:	d4 e0       	ldi	r29, 0x04	; 4
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <__do_global_ctors+0x10>
     8e0:	21 97       	sbiw	r28, 0x01	; 1
     8e2:	fe 01       	movw	r30, r28
<<<<<<< HEAD
     8e4:	0e 94 c7 09 	call	0x138e	; 0x138e <__tablejump2__>
     8e8:	cc 35       	cpi	r28, 0x5C	; 92
     8ea:	d1 07       	cpc	r29, r17
     8ec:	c9 f7       	brne	.-14     	; 0x8e0 <__do_global_ctors+0x8>
     8ee:	0e 94 50 08 	call	0x10a0	; 0x10a0 <main>
     8f2:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__do_global_dtors>
=======
     8e4:	0e 94 9c 09 	call	0x1338	; 0x1338 <__tablejump2__>
     8e8:	cc 35       	cpi	r28, 0x5C	; 92
     8ea:	d1 07       	cpc	r29, r17
     8ec:	c9 f7       	brne	.-14     	; 0x8e0 <__do_global_ctors+0x8>
     8ee:	0e 94 26 08 	call	0x104c	; 0x104c <main>
     8f2:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__do_global_dtors>
>>>>>>> ...

000008f6 <__bad_interrupt>:
     8f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000008fa <loop>:
	setChar(3);
}

void loop()
{
	if(Counter == 200) {
     8fa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Counter>
     8fe:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <Counter+0x1>
     902:	88 3c       	cpi	r24, 0xC8	; 200
     904:	91 05       	cpc	r25, r1
     906:	69 f5       	brne	.+90     	; 0x962 <__stack+0x63>
		//CubeTrans.shiftBackward(&Cube, true);
		//setChar(CharCounter);
		Cube.setNextFrameReady();
     908:	85 e0       	ldi	r24, 0x05	; 5
     90a:	91 e0       	ldi	r25, 0x01	; 1
<<<<<<< HEAD
     90c:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN7LedCube17setNextFrameReadyEv>
		Cube.setNextFrameTimeElapsed();
     910:	85 e0       	ldi	r24, 0x05	; 5
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN7LedCube23setNextFrameTimeElapsedEv>
=======
     90c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN7LedCube17setNextFrameReadyEv>
		Cube.setNextFrameTimeElapsed();
     910:	85 e0       	ldi	r24, 0x05	; 5
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 cb 05 	call	0xb96	; 0xb96 <_ZN7LedCube23setNextFrameTimeElapsedEv>
>>>>>>> ...
		CubeTrans.shiftCircle(LEDCUBE_AXIS_Z, TRANSFORMATION_ROTATION_COUNTERCLOCKWISE, 1);
     918:	21 e0       	ldi	r18, 0x01	; 1
     91a:	41 e0       	ldi	r20, 0x01	; 1
     91c:	62 e0       	ldi	r22, 0x02	; 2
     91e:	83 e0       	ldi	r24, 0x03	; 3
     920:	91 e0       	ldi	r25, 0x01	; 1
<<<<<<< HEAD
     922:	0e 94 8d 06 	call	0xd1a	; 0xd1a <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh>
=======
     922:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh>
>>>>>>> ...
		CubeTrans.shiftCircle(LEDCUBE_AXIS_Z, TRANSFORMATION_ROTATION_COUNTERCLOCKWISE, 2);
     926:	22 e0       	ldi	r18, 0x02	; 2
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	62 e0       	ldi	r22, 0x02	; 2
     92c:	83 e0       	ldi	r24, 0x03	; 3
     92e:	91 e0       	ldi	r25, 0x01	; 1
<<<<<<< HEAD
     930:	0e 94 8d 06 	call	0xd1a	; 0xd1a <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh>
=======
     930:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh>
>>>>>>> ...
		CubeTrans.shiftCircle(LEDCUBE_AXIS_Z, TRANSFORMATION_ROTATION_COUNTERCLOCKWISE, 3);
     934:	23 e0       	ldi	r18, 0x03	; 3
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	62 e0       	ldi	r22, 0x02	; 2
     93a:	83 e0       	ldi	r24, 0x03	; 3
     93c:	91 e0       	ldi	r25, 0x01	; 1
<<<<<<< HEAD
     93e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh>
=======
     93e:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh>
>>>>>>> ...
		CubeTrans.shiftCircle(LEDCUBE_AXIS_Z, TRANSFORMATION_ROTATION_COUNTERCLOCKWISE, 4);
     942:	24 e0       	ldi	r18, 0x04	; 4
     944:	41 e0       	ldi	r20, 0x01	; 1
     946:	62 e0       	ldi	r22, 0x02	; 2
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	91 e0       	ldi	r25, 0x01	; 1
<<<<<<< HEAD
     94c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh>
=======
     94c:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh>
>>>>>>> ...
		Counter = 0;
     950:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Counter+0x1>
     954:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <Counter>
		CharCounter++;
     958:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     95c:	8f 5f       	subi	r24, 0xFF	; 255
     95e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	Counter++;
     962:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Counter>
     966:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <Counter+0x1>
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <Counter+0x1>
     970:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Counter>
	delay(1);
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 e0       	ldi	r25, 0x00	; 0
<<<<<<< HEAD
     97c:	0e 94 ce 08 	call	0x119c	; 0x119c <delay>
	digitalWrite(7, STD_ON);
     980:	61 e0       	ldi	r22, 0x01	; 1
     982:	87 e0       	ldi	r24, 0x07	; 7
     984:	0e 94 96 09 	call	0x132c	; 0x132c <digitalWrite>
	Cube.task();
     988:	85 e0       	ldi	r24, 0x05	; 5
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	0e 94 22 06 	call	0xc44	; 0xc44 <_ZN7LedCube4taskEv>
	digitalWrite(7, STD_OFF);
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	87 e0       	ldi	r24, 0x07	; 7
     994:	0c 94 96 09 	jmp	0x132c	; 0x132c <digitalWrite>
=======
     97c:	0e 94 a4 08 	call	0x1148	; 0x1148 <delay>
	digitalWrite(7, STD_ON);
     980:	61 e0       	ldi	r22, 0x01	; 1
     982:	87 e0       	ldi	r24, 0x07	; 7
     984:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <digitalWrite>
	Cube.task();
     988:	85 e0       	ldi	r24, 0x05	; 5
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN7LedCube4taskEv>
	digitalWrite(7, STD_OFF);
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	87 e0       	ldi	r24, 0x07	; 7
     994:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <digitalWrite>
>>>>>>> ...

00000998 <_Z7setCharh>:
}

void setChar(byte Number) {
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
<<<<<<< HEAD
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
=======
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
>>>>>>> ...
     9a2:	98 e0       	ldi	r25, 0x08	; 8
     9a4:	89 9f       	mul	r24, r25
     9a6:	70 01       	movw	r14, r0
     9a8:	11 24       	eor	r1, r1
<<<<<<< HEAD
     9aa:	c0 e0       	ldi	r28, 0x00	; 0
     9ac:	d0 e0       	ldi	r29, 0x00	; 0
     9ae:	17 e0       	ldi	r17, 0x07	; 7
     9b0:	fe 01       	movw	r30, r28
     9b2:	ee 0d       	add	r30, r14
     9b4:	ff 1d       	adc	r31, r15
     9b6:	e8 59       	subi	r30, 0x98	; 152
     9b8:	ff 4f       	sbci	r31, 0xFF	; 255
	for(byte i = 0; i < 8; i++) {
		Cube.setVoxelsYFast(0, 7-i, pgm_read_byte_near(&font[Number][i]));
     9ba:	24 91       	lpm	r18, Z
     9bc:	41 2f       	mov	r20, r17
     9be:	4c 1b       	sub	r20, r28
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	85 e0       	ldi	r24, 0x05	; 5
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	0e 94 81 05 	call	0xb02	; 0xb02 <_ZN7LedCube14setVoxelsYFastEhhh>
     9ca:	21 96       	adiw	r28, 0x01	; 1
	Cube.task();
	digitalWrite(7, STD_OFF);
}

void setChar(byte Number) {
	for(byte i = 0; i < 8; i++) {
     9cc:	c8 30       	cpi	r28, 0x08	; 8
     9ce:	d1 05       	cpc	r29, r1
     9d0:	79 f7       	brne	.-34     	; 0x9b0 <_Z7setCharh+0x18>
		Cube.setVoxelsYFast(0, 7-i, pgm_read_byte_near(&font[Number][i]));
	}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	08 95       	ret

000009de <setup>:
=======
     9aa:	c7 e0       	ldi	r28, 0x07	; 7
     9ac:	00 e0       	ldi	r16, 0x00	; 0
     9ae:	10 e0       	ldi	r17, 0x00	; 0
	for(byte i = 0; i < 8; i++) {
		Cube.setVoxelsYFast(0, 7-i, pgm_read_byte_near(&font[Number][i]));
     9b0:	f8 01       	movw	r30, r16
     9b2:	ee 0d       	add	r30, r14
     9b4:	ff 1d       	adc	r31, r15
     9b6:	e8 59       	subi	r30, 0x98	; 152
     9b8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ba:	24 91       	lpm	r18, Z
     9bc:	4c 2f       	mov	r20, r28
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	85 e0       	ldi	r24, 0x05	; 5
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	0e 94 80 05 	call	0xb00	; 0xb00 <_ZN7LedCube14setVoxelsYFastEhhh>
     9c8:	0f 5f       	subi	r16, 0xFF	; 255
     9ca:	1f 4f       	sbci	r17, 0xFF	; 255
     9cc:	c1 50       	subi	r28, 0x01	; 1
     9ce:	80 f7       	brcc	.-32     	; 0x9b0 <_Z7setCharh+0x18>
	}
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	08 95       	ret

000009dc <setup>:
>>>>>>> ...
Transformation CubeTrans(&Cube);
int Counter;
byte CharCounter = 0;

void setup() {
	Cube.init();
<<<<<<< HEAD
     9de:	85 e0       	ldi	r24, 0x05	; 5
     9e0:	91 e0       	ldi	r25, 0x01	; 1
     9e2:	0e 94 5c 05 	call	0xab8	; 0xab8 <_ZN7LedCube4initEv>
	pinMode(7, OUTPUT);
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	87 e0       	ldi	r24, 0x07	; 7
     9ea:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <pinMode>
=======
     9dc:	85 e0       	ldi	r24, 0x05	; 5
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN7LedCube4initEv>
	pinMode(7, OUTPUT);
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	87 e0       	ldi	r24, 0x07	; 7
     9e8:	0e 94 30 09 	call	0x1260	; 0x1260 <pinMode>
>>>>>>> ...
			}
		}
	}
	
	
	Cube.start();
<<<<<<< HEAD
     9ee:	85 e0       	ldi	r24, 0x05	; 5
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN7LedCube5startEv>
	Cube.setNextFrameReady();
     9f6:	85 e0       	ldi	r24, 0x05	; 5
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN7LedCube17setNextFrameReadyEv>
	Cube.setNextFrameTimeElapsed();
     9fe:	85 e0       	ldi	r24, 0x05	; 5
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN7LedCube23setNextFrameTimeElapsedEv>
	Cube.setVoxelsX(1,1,B(01111110));
     a06:	2e e7       	ldi	r18, 0x7E	; 126
     a08:	41 e0       	ldi	r20, 0x01	; 1
     a0a:	61 e0       	ldi	r22, 0x01	; 1
     a0c:	85 e0       	ldi	r24, 0x05	; 5
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN7LedCube10setVoxelsXEhhh>
	Cube.setVoxelsX(2,7,B(00111100));
     a14:	2c e3       	ldi	r18, 0x3C	; 60
     a16:	47 e0       	ldi	r20, 0x07	; 7
     a18:	62 e0       	ldi	r22, 0x02	; 2
     a1a:	85 e0       	ldi	r24, 0x05	; 5
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN7LedCube10setVoxelsXEhhh>
	Cube.setVoxelsX(3,5,B(00011000));
     a22:	28 e1       	ldi	r18, 0x18	; 24
     a24:	45 e0       	ldi	r20, 0x05	; 5
     a26:	63 e0       	ldi	r22, 0x03	; 3
     a28:	85 e0       	ldi	r24, 0x05	; 5
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN7LedCube10setVoxelsXEhhh>
	setChar(3);
     a30:	83 e0       	ldi	r24, 0x03	; 3
     a32:	0c 94 cc 04 	jmp	0x998	; 0x998 <_Z7setCharh>

00000a36 <_GLOBAL__sub_I_Cube>:
=======
     9ec:	85 e0       	ldi	r24, 0x05	; 5
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <_ZN7LedCube5startEv>
	Cube.setNextFrameReady();
     9f4:	85 e0       	ldi	r24, 0x05	; 5
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN7LedCube17setNextFrameReadyEv>
	Cube.setNextFrameTimeElapsed();
     9fc:	85 e0       	ldi	r24, 0x05	; 5
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	0e 94 cb 05 	call	0xb96	; 0xb96 <_ZN7LedCube23setNextFrameTimeElapsedEv>
	Cube.setVoxelsX(1,1,B(01111110));
     a04:	2e e7       	ldi	r18, 0x7E	; 126
     a06:	41 e0       	ldi	r20, 0x01	; 1
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	85 e0       	ldi	r24, 0x05	; 5
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 6b 05 	call	0xad6	; 0xad6 <_ZN7LedCube10setVoxelsXEhhh>
	Cube.setVoxelsX(2,7,B(00111100));
     a12:	2c e3       	ldi	r18, 0x3C	; 60
     a14:	47 e0       	ldi	r20, 0x07	; 7
     a16:	62 e0       	ldi	r22, 0x02	; 2
     a18:	85 e0       	ldi	r24, 0x05	; 5
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	0e 94 6b 05 	call	0xad6	; 0xad6 <_ZN7LedCube10setVoxelsXEhhh>
	Cube.setVoxelsX(3,5,B(00011000));
     a20:	28 e1       	ldi	r18, 0x18	; 24
     a22:	45 e0       	ldi	r20, 0x05	; 5
     a24:	63 e0       	ldi	r22, 0x03	; 3
     a26:	85 e0       	ldi	r24, 0x05	; 5
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	0e 94 6b 05 	call	0xad6	; 0xad6 <_ZN7LedCube10setVoxelsXEhhh>
	setChar(3);
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	0c 94 cc 04 	jmp	0x998	; 0x998 <_Z7setCharh>

00000a34 <_GLOBAL__sub_I_Cube>:
>>>>>>> ...
#define RCK_74 12  // storage input
#define SCK_74 11  // clock input

void setChar(byte);

LedCube Cube;
<<<<<<< HEAD
     a36:	85 e0       	ldi	r24, 0x05	; 5
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN7LedCubeC1Ev>
Transformation CubeTrans(&Cube);
     a3e:	65 e0       	ldi	r22, 0x05	; 5
     a40:	71 e0       	ldi	r23, 0x01	; 1
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0c 94 88 06 	jmp	0xd10	; 0xd10 <_ZN14TransformationC1EP7LedCube>

00000a4a <_GLOBAL__sub_D_Cube>:
     a4a:	83 e0       	ldi	r24, 0x03	; 3
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN14TransformationD1Ev>
=======
     a34:	85 e0       	ldi	r24, 0x05	; 5
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	0e 94 2c 05 	call	0xa58	; 0xa58 <_ZN7LedCubeC1Ev>
Transformation CubeTrans(&Cube);
     a3c:	65 e0       	ldi	r22, 0x05	; 5
     a3e:	71 e0       	ldi	r23, 0x01	; 1
     a40:	83 e0       	ldi	r24, 0x03	; 3
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0c 94 6f 06 	jmp	0xcde	; 0xcde <_ZN14TransformationC1EP7LedCube>

00000a48 <_GLOBAL__sub_D_Cube>:
     a48:	83 e0       	ldi	r24, 0x03	; 3
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	0e 94 73 06 	call	0xce6	; 0xce6 <_ZN14TransformationD1Ev>
>>>>>>> ...
#define RCK_74 12  // storage input
#define SCK_74 11  // clock input

void setChar(byte);

LedCube Cube;
<<<<<<< HEAD
     a52:	85 e0       	ldi	r24, 0x05	; 5
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <_ZN7LedCubeD1Ev>

00000a5a <_ZN7LedCubeC1Ev>:
=======
     a50:	85 e0       	ldi	r24, 0x05	; 5
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <_ZN7LedCubeD1Ev>

00000a58 <_ZN7LedCubeC1Ev>:
>>>>>>> ...
void LedCube::setVoxelsZFast(byte X, byte Y, byte Value)
{
	for(byte Z = 0; Z < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Z++) {
		bitWrite(NextFrame[Y][Z], X, bitRead(Value, Z));
	}
} /* setVoxelsZFast */
<<<<<<< HEAD
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	fc 01       	movw	r30, r24
     a60:	10 82       	st	Z, r1
     a62:	11 82       	std	Z+1, r1	; 0x01
     a64:	dc 01       	movw	r26, r24
     a66:	aa 57       	subi	r26, 0x7A	; 122
     a68:	bf 4f       	sbci	r27, 0xFF	; 255
     a6a:	1c 92       	st	X, r1
     a6c:	11 96       	adiw	r26, 0x01	; 1
     a6e:	1c 92       	st	X, r1
     a70:	ec 01       	movw	r28, r24
     a72:	26 96       	adiw	r28, 0x06	; 6
     a74:	d3 83       	std	Z+3, r29	; 0x03
     a76:	c2 83       	std	Z+2, r28	; 0x02
     a78:	a1 54       	subi	r26, 0x41	; 65
     a7a:	b1 09       	sbc	r27, r1
     a7c:	b5 83       	std	Z+5, r27	; 0x05
     a7e:	a4 83       	std	Z+4, r26	; 0x04
     a80:	80 e4       	ldi	r24, 0x40	; 64
     a82:	fe 01       	movw	r30, r28
     a84:	98 2f       	mov	r25, r24
     a86:	11 92       	st	Z+, r1
     a88:	9a 95       	dec	r25
     a8a:	e9 f7       	brne	.-6      	; 0xa86 <_ZN7LedCubeC1Ev+0x2c>
     a8c:	fd 01       	movw	r30, r26
     a8e:	11 92       	st	Z+, r1
     a90:	8a 95       	dec	r24
     a92:	e9 f7       	brne	.-6      	; 0xa8e <_ZN7LedCubeC1Ev+0x34>
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	08 95       	ret

00000a9a <_ZN7LedCubeD1Ev>:
     a9a:	08 95       	ret

00000a9c <_ZN7LedCube5startEv>:
     a9c:	23 e0       	ldi	r18, 0x03	; 3
     a9e:	fc 01       	movw	r30, r24
     aa0:	21 83       	std	Z+1, r18	; 0x01
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	08 95       	ret

00000aa6 <_ZN7LedCube9clearCubeEv>:
     aa6:	2d 98       	cbi	0x05, 5	; 5
     aa8:	88 e4       	ldi	r24, 0x48	; 72
     aaa:	2b 9a       	sbi	0x05, 3	; 5
     aac:	2b 98       	cbi	0x05, 3	; 5
     aae:	81 50       	subi	r24, 0x01	; 1
     ab0:	e1 f7       	brne	.-8      	; 0xaaa <_ZN7LedCube9clearCubeEv+0x4>
     ab2:	2c 9a       	sbi	0x05, 4	; 5
     ab4:	2c 98       	cbi	0x05, 4	; 5
     ab6:	08 95       	ret

00000ab8 <_ZN7LedCube4initEv>:
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	ec 01       	movw	r28, r24
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	89 83       	std	Y+1, r24	; 0x01
     ac2:	ce 01       	movw	r24, r28
     ac4:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZN7LedCube9clearCubeEv>
     ac8:	25 9a       	sbi	0x04, 5	; 4
     aca:	23 9a       	sbi	0x04, 3	; 4
     acc:	24 9a       	sbi	0x04, 4	; 4
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	89 83       	std	Y+1, r24	; 0x01
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <_ZN7LedCube10setVoxelsXEhhh>:
     ad8:	68 30       	cpi	r22, 0x08	; 8
     ada:	88 f4       	brcc	.+34     	; 0xafe <_ZN7LedCube10setVoxelsXEhhh+0x26>
     adc:	48 30       	cpi	r20, 0x08	; 8
     ade:	78 f4       	brcc	.+30     	; 0xafe <_ZN7LedCube10setVoxelsXEhhh+0x26>
     ae0:	dc 01       	movw	r26, r24
     ae2:	14 96       	adiw	r26, 0x04	; 4
     ae4:	ed 91       	ld	r30, X+
     ae6:	fc 91       	ld	r31, X
     ae8:	15 97       	sbiw	r26, 0x05	; 5
     aea:	b8 e0       	ldi	r27, 0x08	; 8
     aec:	6b 9f       	mul	r22, r27
     aee:	e0 0d       	add	r30, r0
     af0:	f1 1d       	adc	r31, r1
     af2:	11 24       	eor	r1, r1
     af4:	e4 0f       	add	r30, r20
     af6:	f1 1d       	adc	r31, r1
     af8:	20 83       	st	Z, r18
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	08 95       	ret
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	08 95       	ret

00000b02 <_ZN7LedCube14setVoxelsYFastEhhh>:
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	52 2f       	mov	r21, r18
     b12:	01 e0       	ldi	r16, 0x01	; 1
     b14:	10 e0       	ldi	r17, 0x00	; 0
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	04 c0       	rjmp	.+8      	; 0xb24 <_ZN7LedCube14setVoxelsYFastEhhh+0x22>
     b1c:	00 0f       	add	r16, r16
     b1e:	11 1f       	adc	r17, r17
     b20:	22 1f       	adc	r18, r18
     b22:	33 1f       	adc	r19, r19
     b24:	6a 95       	dec	r22
     b26:	d2 f7       	brpl	.-12     	; 0xb1c <_ZN7LedCube14setVoxelsYFastEhhh+0x1a>
     b28:	d0 2e       	mov	r13, r16
     b2a:	00 95       	com	r16
     b2c:	a0 e0       	ldi	r26, 0x00	; 0
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	25 2f       	mov	r18, r21
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	ec 01       	movw	r28, r24
     b3c:	ec 81       	ldd	r30, Y+4	; 0x04
     b3e:	fd 81       	ldd	r31, Y+5	; 0x05
     b40:	79 01       	movw	r14, r18
     b42:	06 2e       	mov	r0, r22
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <_ZN7LedCube14setVoxelsYFastEhhh+0x48>
     b46:	f5 94       	asr	r15
     b48:	e7 94       	ror	r14
     b4a:	0a 94       	dec	r0
     b4c:	e2 f7       	brpl	.-8      	; 0xb46 <_ZN7LedCube14setVoxelsYFastEhhh+0x44>
     b4e:	ea 0f       	add	r30, r26
     b50:	fb 1f       	adc	r31, r27
     b52:	e4 0f       	add	r30, r20
     b54:	f5 1f       	adc	r31, r21
     b56:	10 81       	ld	r17, Z
     b58:	e0 fe       	sbrs	r14, 0
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <_ZN7LedCube14setVoxelsYFastEhhh+0x5e>
     b5c:	1d 29       	or	r17, r13
     b5e:	01 c0       	rjmp	.+2      	; 0xb62 <_ZN7LedCube14setVoxelsYFastEhhh+0x60>
     b60:	10 23       	and	r17, r16
     b62:	10 83       	st	Z, r17
     b64:	6f 5f       	subi	r22, 0xFF	; 255
     b66:	7f 4f       	sbci	r23, 0xFF	; 255
     b68:	18 96       	adiw	r26, 0x08	; 8
     b6a:	68 30       	cpi	r22, 0x08	; 8
     b6c:	71 05       	cpc	r23, r1
     b6e:	29 f7       	brne	.-54     	; 0xb3a <_ZN7LedCube14setVoxelsYFastEhhh+0x38>
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	df 90       	pop	r13
     b7e:	08 95       	ret

00000b80 <_ZN7LedCube17setNextFrameReadyEv>:
=======
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	fc 01       	movw	r30, r24
     a5e:	10 82       	st	Z, r1
     a60:	11 82       	std	Z+1, r1	; 0x01
     a62:	dc 01       	movw	r26, r24
     a64:	aa 57       	subi	r26, 0x7A	; 122
     a66:	bf 4f       	sbci	r27, 0xFF	; 255
     a68:	1c 92       	st	X, r1
     a6a:	11 96       	adiw	r26, 0x01	; 1
     a6c:	1c 92       	st	X, r1
     a6e:	ec 01       	movw	r28, r24
     a70:	26 96       	adiw	r28, 0x06	; 6
     a72:	d3 83       	std	Z+3, r29	; 0x03
     a74:	c2 83       	std	Z+2, r28	; 0x02
     a76:	a1 54       	subi	r26, 0x41	; 65
     a78:	b1 09       	sbc	r27, r1
     a7a:	b5 83       	std	Z+5, r27	; 0x05
     a7c:	a4 83       	std	Z+4, r26	; 0x04
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	fe 01       	movw	r30, r28
     a82:	98 2f       	mov	r25, r24
     a84:	11 92       	st	Z+, r1
     a86:	9a 95       	dec	r25
     a88:	e9 f7       	brne	.-6      	; 0xa84 <_ZN7LedCubeC1Ev+0x2c>
     a8a:	fd 01       	movw	r30, r26
     a8c:	11 92       	st	Z+, r1
     a8e:	8a 95       	dec	r24
     a90:	e9 f7       	brne	.-6      	; 0xa8c <_ZN7LedCubeC1Ev+0x34>
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <_ZN7LedCubeD1Ev>:
     a98:	08 95       	ret

00000a9a <_ZN7LedCube5startEv>:
     a9a:	23 e0       	ldi	r18, 0x03	; 3
     a9c:	fc 01       	movw	r30, r24
     a9e:	21 83       	std	Z+1, r18	; 0x01
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	08 95       	ret

00000aa4 <_ZN7LedCube9clearCubeEv>:
     aa4:	2d 98       	cbi	0x05, 5	; 5
     aa6:	88 e4       	ldi	r24, 0x48	; 72
     aa8:	2b 9a       	sbi	0x05, 3	; 5
     aaa:	2b 98       	cbi	0x05, 3	; 5
     aac:	81 50       	subi	r24, 0x01	; 1
     aae:	e1 f7       	brne	.-8      	; 0xaa8 <_ZN7LedCube9clearCubeEv+0x4>
     ab0:	2c 9a       	sbi	0x05, 4	; 5
     ab2:	2c 98       	cbi	0x05, 4	; 5
     ab4:	08 95       	ret

00000ab6 <_ZN7LedCube4initEv>:
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	ec 01       	movw	r28, r24
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	89 83       	std	Y+1, r24	; 0x01
     ac0:	ce 01       	movw	r24, r28
     ac2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_ZN7LedCube9clearCubeEv>
     ac6:	25 9a       	sbi	0x04, 5	; 4
     ac8:	23 9a       	sbi	0x04, 3	; 4
     aca:	24 9a       	sbi	0x04, 4	; 4
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <_ZN7LedCube10setVoxelsXEhhh>:
     ad6:	68 30       	cpi	r22, 0x08	; 8
     ad8:	88 f4       	brcc	.+34     	; 0xafc <_ZN7LedCube10setVoxelsXEhhh+0x26>
     ada:	48 30       	cpi	r20, 0x08	; 8
     adc:	78 f4       	brcc	.+30     	; 0xafc <_ZN7LedCube10setVoxelsXEhhh+0x26>
     ade:	dc 01       	movw	r26, r24
     ae0:	14 96       	adiw	r26, 0x04	; 4
     ae2:	ed 91       	ld	r30, X+
     ae4:	fc 91       	ld	r31, X
     ae6:	15 97       	sbiw	r26, 0x05	; 5
     ae8:	b8 e0       	ldi	r27, 0x08	; 8
     aea:	6b 9f       	mul	r22, r27
     aec:	e0 0d       	add	r30, r0
     aee:	f1 1d       	adc	r31, r1
     af0:	11 24       	eor	r1, r1
     af2:	e4 0f       	add	r30, r20
     af4:	f1 1d       	adc	r31, r1
     af6:	20 83       	st	Z, r18
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	08 95       	ret
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	08 95       	ret

00000b00 <_ZN7LedCube14setVoxelsYFastEhhh>:
     b00:	df 92       	push	r13
     b02:	ef 92       	push	r14
     b04:	ff 92       	push	r15
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	52 2f       	mov	r21, r18
     b10:	01 e0       	ldi	r16, 0x01	; 1
     b12:	10 e0       	ldi	r17, 0x00	; 0
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <_ZN7LedCube14setVoxelsYFastEhhh+0x22>
     b1a:	00 0f       	add	r16, r16
     b1c:	11 1f       	adc	r17, r17
     b1e:	22 1f       	adc	r18, r18
     b20:	33 1f       	adc	r19, r19
     b22:	6a 95       	dec	r22
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <_ZN7LedCube14setVoxelsYFastEhhh+0x1a>
     b26:	d0 2e       	mov	r13, r16
     b28:	00 95       	com	r16
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	25 2f       	mov	r18, r21
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	ec 01       	movw	r28, r24
     b3a:	ec 81       	ldd	r30, Y+4	; 0x04
     b3c:	fd 81       	ldd	r31, Y+5	; 0x05
     b3e:	79 01       	movw	r14, r18
     b40:	06 2e       	mov	r0, r22
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <_ZN7LedCube14setVoxelsYFastEhhh+0x48>
     b44:	f5 94       	asr	r15
     b46:	e7 94       	ror	r14
     b48:	0a 94       	dec	r0
     b4a:	e2 f7       	brpl	.-8      	; 0xb44 <_ZN7LedCube14setVoxelsYFastEhhh+0x44>
     b4c:	ea 0f       	add	r30, r26
     b4e:	fb 1f       	adc	r31, r27
     b50:	e4 0f       	add	r30, r20
     b52:	f5 1f       	adc	r31, r21
     b54:	10 81       	ld	r17, Z
     b56:	e0 fe       	sbrs	r14, 0
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <_ZN7LedCube14setVoxelsYFastEhhh+0x5e>
     b5a:	1d 29       	or	r17, r13
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <_ZN7LedCube14setVoxelsYFastEhhh+0x60>
     b5e:	10 23       	and	r17, r16
     b60:	10 83       	st	Z, r17
     b62:	6f 5f       	subi	r22, 0xFF	; 255
     b64:	7f 4f       	sbci	r23, 0xFF	; 255
     b66:	18 96       	adiw	r26, 0x08	; 8
     b68:	68 30       	cpi	r22, 0x08	; 8
     b6a:	71 05       	cpc	r23, r1
     b6c:	29 f7       	brne	.-54     	; 0xb38 <_ZN7LedCube14setVoxelsYFastEhhh+0x38>
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	ff 90       	pop	r15
     b78:	ef 90       	pop	r14
     b7a:	df 90       	pop	r13
     b7c:	08 95       	ret

00000b7e <_ZN7LedCube17setNextFrameReadyEv>:
>>>>>>> ...
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::setNextFrameReady()
{
    if(State == LEDCUBE_STATE_RUNNING) {
<<<<<<< HEAD
     b80:	fc 01       	movw	r30, r24
     b82:	21 81       	ldd	r18, Z+1	; 0x01
     b84:	23 30       	cpi	r18, 0x03	; 3
     b86:	31 f4       	brne	.+12     	; 0xb94 <_ZN7LedCube17setNextFrameReadyEv+0x14>
        NextFrameReady = true;
     b88:	ea 57       	subi	r30, 0x7A	; 122
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	80 83       	st	Z, r24
        return E_OK;
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	08 95       	ret
    } else {
        return E_NOT_OK;
     b94:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     b96:	08 95       	ret

00000b98 <_ZN7LedCube23setNextFrameTimeElapsedEv>:
=======
     b7e:	fc 01       	movw	r30, r24
     b80:	21 81       	ldd	r18, Z+1	; 0x01
     b82:	23 30       	cpi	r18, 0x03	; 3
     b84:	31 f4       	brne	.+12     	; 0xb92 <_ZN7LedCube17setNextFrameReadyEv+0x14>
        NextFrameReady = true;
     b86:	ea 57       	subi	r30, 0x7A	; 122
     b88:	ff 4f       	sbci	r31, 0xFF	; 255
     b8a:	21 e0       	ldi	r18, 0x01	; 1
     b8c:	20 83       	st	Z, r18
        return E_OK;
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	08 95       	ret
    } else {
        return E_NOT_OK;
     b92:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     b94:	08 95       	ret

00000b96 <_ZN7LedCube23setNextFrameTimeElapsedEv>:
>>>>>>> ...
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::setNextFrameTimeElapsed()
{
    if(State == LEDCUBE_STATE_RUNNING) {
<<<<<<< HEAD
     b98:	fc 01       	movw	r30, r24
     b9a:	21 81       	ldd	r18, Z+1	; 0x01
     b9c:	23 30       	cpi	r18, 0x03	; 3
     b9e:	31 f4       	brne	.+12     	; 0xbac <_ZN7LedCube23setNextFrameTimeElapsedEv+0x14>
        NextFrameTimeElapsed = true;
     ba0:	e9 57       	subi	r30, 0x79	; 121
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 83       	st	Z, r24
        return E_OK;
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 95       	ret
    } else {
        return E_NOT_OK;
     bac:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     bae:	08 95       	ret

00000bb0 <_ZN7LedCube8sendDataEh>:
=======
     b96:	fc 01       	movw	r30, r24
     b98:	21 81       	ldd	r18, Z+1	; 0x01
     b9a:	23 30       	cpi	r18, 0x03	; 3
     b9c:	31 f4       	brne	.+12     	; 0xbaa <_ZN7LedCube23setNextFrameTimeElapsedEv+0x14>
        NextFrameTimeElapsed = true;
     b9e:	e9 57       	subi	r30, 0x79	; 121
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	21 e0       	ldi	r18, 0x01	; 1
     ba4:	20 83       	st	Z, r18
        return E_OK;
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	08 95       	ret
    } else {
        return E_NOT_OK;
     baa:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     bac:	08 95       	ret

00000bae <_ZN7LedCube8sendDataEh>:
>>>>>>> ...
 *
 *  \param[in]      Data    data (Byte) to send
 *  \return         -
 *****************************************************************************************************************************************************/
void LedCube::sendData(byte Data)
{
<<<<<<< HEAD
     bb0:	87 e0       	ldi	r24, 0x07	; 7
     bb2:	90 e0       	ldi	r25, 0x00	; 0
=======
     bae:	87 e0       	ldi	r24, 0x07	; 7
     bb0:	90 e0       	ldi	r25, 0x00	; 0
>>>>>>> ...
    for (byte i = 0; i < 8; i++) {
        // LSB First
        //digitalWrite(DataInPin, !!(Data & (1 << i)));
        // MSB First
        digitalWriteFast(LEDCUBE_DATA_IN_PIN, !!(Data & (1 << (7 - i))));
<<<<<<< HEAD
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	9b 01       	movw	r18, r22
     bb8:	08 2e       	mov	r0, r24
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <_ZN7LedCube8sendDataEh+0x10>
     bbc:	35 95       	asr	r19
     bbe:	27 95       	ror	r18
     bc0:	0a 94       	dec	r0
     bc2:	e2 f7       	brpl	.-8      	; 0xbbc <_ZN7LedCube8sendDataEh+0xc>
     bc4:	20 ff       	sbrs	r18, 0
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <_ZN7LedCube8sendDataEh+0x1c>
     bc8:	2d 9a       	sbi	0x05, 5	; 5
     bca:	01 c0       	rjmp	.+2      	; 0xbce <_ZN7LedCube8sendDataEh+0x1e>
     bcc:	2d 98       	cbi	0x05, 5	; 5
        // toggle clock pin
        digitalWriteFast(LEDCUBE_CLOCK_PIN, HIGH);
     bce:	2b 9a       	sbi	0x05, 3	; 5
        digitalWriteFast(LEDCUBE_CLOCK_PIN, LOW);
     bd0:	2b 98       	cbi	0x05, 3	; 5
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	80 f7       	brcc	.-32     	; 0xbb6 <_ZN7LedCube8sendDataEh+0x6>
    }
} /* sendData */
     bd6:	08 95       	ret

00000bd8 <_ZN7LedCube9showLayerEh>:
=======
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	9b 01       	movw	r18, r22
     bb6:	08 2e       	mov	r0, r24
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <_ZN7LedCube8sendDataEh+0x10>
     bba:	35 95       	asr	r19
     bbc:	27 95       	ror	r18
     bbe:	0a 94       	dec	r0
     bc0:	e2 f7       	brpl	.-8      	; 0xbba <_ZN7LedCube8sendDataEh+0xc>
     bc2:	20 ff       	sbrs	r18, 0
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <_ZN7LedCube8sendDataEh+0x1c>
     bc6:	2d 9a       	sbi	0x05, 5	; 5
     bc8:	01 c0       	rjmp	.+2      	; 0xbcc <_ZN7LedCube8sendDataEh+0x1e>
     bca:	2d 98       	cbi	0x05, 5	; 5
        // toggle clock pin
        digitalWriteFast(LEDCUBE_CLOCK_PIN, HIGH);
     bcc:	2b 9a       	sbi	0x05, 3	; 5
        digitalWriteFast(LEDCUBE_CLOCK_PIN, LOW);
     bce:	2b 98       	cbi	0x05, 3	; 5
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	80 f7       	brcc	.-32     	; 0xbb4 <_ZN7LedCube8sendDataEh+0x6>
    }
} /* sendData */
     bd4:	08 95       	ret

00000bd6 <_ZN7LedCube9showLayerEh>:
>>>>>>> ...
 *  \param[in]      Layer       layer which should be shown on the cube
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showLayer(byte Layer)
{
<<<<<<< HEAD
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
    stdReturnType ReturnValue = E_NOT_OK;
    
    if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
     be4:	68 30       	cpi	r22, 0x08	; 8
     be6:	30 f5       	brcc	.+76     	; 0xc34 <_ZN7LedCube9showLayerEh+0x5c>
     be8:	ec 01       	movw	r28, r24
        /* put on given layer */
        sendData(1 << Layer);
     bea:	06 2f       	mov	r16, r22
     bec:	10 e0       	ldi	r17, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	9c 01       	movw	r18, r24
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <_ZN7LedCube9showLayerEh+0x22>
     bf6:	22 0f       	add	r18, r18
     bf8:	33 1f       	adc	r19, r19
     bfa:	6a 95       	dec	r22
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <_ZN7LedCube9showLayerEh+0x1e>
     bfe:	b9 01       	movw	r22, r18
     c00:	ce 01       	movw	r24, r28
     c02:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7LedCube8sendDataEh>
     c06:	e1 2c       	mov	r14, r1
     c08:	f1 2c       	mov	r15, r1
        /* send the layer data to the shift registers */
        for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
            sendData(CurrentFrame[Y][Layer]);
     c0a:	ea 81       	ldd	r30, Y+2	; 0x02
     c0c:	fb 81       	ldd	r31, Y+3	; 0x03
     c0e:	ee 0d       	add	r30, r14
     c10:	ff 1d       	adc	r31, r15
     c12:	e0 0f       	add	r30, r16
     c14:	f1 1f       	adc	r31, r17
     c16:	60 81       	ld	r22, Z
     c18:	ce 01       	movw	r24, r28
     c1a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN7LedCube8sendDataEh>
     c1e:	38 e0       	ldi	r19, 0x08	; 8
     c20:	e3 0e       	add	r14, r19
     c22:	f1 1c       	adc	r15, r1
=======
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
    stdReturnType ReturnValue = E_NOT_OK;
    
    if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
     be2:	68 30       	cpi	r22, 0x08	; 8
     be4:	30 f5       	brcc	.+76     	; 0xc32 <_ZN7LedCube9showLayerEh+0x5c>
     be6:	ec 01       	movw	r28, r24
        /* put on given layer */
        sendData(1 << Layer);
     be8:	06 2f       	mov	r16, r22
     bea:	10 e0       	ldi	r17, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	9c 01       	movw	r18, r24
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <_ZN7LedCube9showLayerEh+0x22>
     bf4:	22 0f       	add	r18, r18
     bf6:	33 1f       	adc	r19, r19
     bf8:	6a 95       	dec	r22
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <_ZN7LedCube9showLayerEh+0x1e>
     bfc:	b9 01       	movw	r22, r18
     bfe:	ce 01       	movw	r24, r28
     c00:	0e 94 d7 05 	call	0xbae	; 0xbae <_ZN7LedCube8sendDataEh>
     c04:	e1 2c       	mov	r14, r1
     c06:	f1 2c       	mov	r15, r1
        /* send the layer data to the shift registers */
        for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
            sendData(CurrentFrame[Y][Layer]);
     c08:	ea 81       	ldd	r30, Y+2	; 0x02
     c0a:	fb 81       	ldd	r31, Y+3	; 0x03
     c0c:	ee 0d       	add	r30, r14
     c0e:	ff 1d       	adc	r31, r15
     c10:	e0 0f       	add	r30, r16
     c12:	f1 1f       	adc	r31, r17
     c14:	60 81       	ld	r22, Z
     c16:	ce 01       	movw	r24, r28
     c18:	0e 94 d7 05 	call	0xbae	; 0xbae <_ZN7LedCube8sendDataEh>
     c1c:	38 e0       	ldi	r19, 0x08	; 8
     c1e:	e3 0e       	add	r14, r19
     c20:	f1 1c       	adc	r15, r1
>>>>>>> ...
    
    if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
        /* put on given layer */
        sendData(1 << Layer);
        /* send the layer data to the shift registers */
        for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
<<<<<<< HEAD
     c24:	80 e4       	ldi	r24, 0x40	; 64
     c26:	e8 16       	cp	r14, r24
     c28:	f1 04       	cpc	r15, r1
     c2a:	79 f7       	brne	.-34     	; 0xc0a <_ZN7LedCube9showLayerEh+0x32>
=======
     c22:	80 e4       	ldi	r24, 0x40	; 64
     c24:	e8 16       	cp	r14, r24
     c26:	f1 04       	cpc	r15, r1
     c28:	79 f7       	brne	.-34     	; 0xc08 <_ZN7LedCube9showLayerEh+0x32>
>>>>>>> ...
            sendData(CurrentFrame[Y][Layer]);
        }
        // toggle storage pin
        digitalWriteFast(LEDCUBE_STORAGE_PIN, HIGH);
<<<<<<< HEAD
     c2c:	2c 9a       	sbi	0x05, 4	; 5
        digitalWriteFast(LEDCUBE_STORAGE_PIN, LOW);
     c2e:	2c 98       	cbi	0x05, 4	; 5
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <_ZN7LedCube9showLayerEh+0x5e>
=======
     c2a:	2c 9a       	sbi	0x05, 4	; 5
        digitalWriteFast(LEDCUBE_STORAGE_PIN, LOW);
     c2c:	2c 98       	cbi	0x05, 4	; 5
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	01 c0       	rjmp	.+2      	; 0xc34 <_ZN7LedCube9showLayerEh+0x5e>
>>>>>>> ...
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showLayer(byte Layer)
{
    stdReturnType ReturnValue = E_NOT_OK;
<<<<<<< HEAD
     c34:	81 e0       	ldi	r24, 0x01	; 1
=======
     c32:	81 e0       	ldi	r24, 0x01	; 1
>>>>>>> ...
        digitalWriteFast(LEDCUBE_STORAGE_PIN, LOW);

        ReturnValue = E_OK;
    }
    return ReturnValue;
} /* showLayer */
<<<<<<< HEAD
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	08 95       	ret

00000c44 <_ZN7LedCube4taskEv>:
=======
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	08 95       	ret

00000c42 <_ZN7LedCube4taskEv>:
>>>>>>> ...
 *                  has to be called periodically
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
void LedCube::task()
{
<<<<<<< HEAD
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	fc 01       	movw	r30, r24
    if(State == LEDCUBE_STATE_RUNNING) {
     c4a:	81 81       	ldd	r24, Z+1	; 0x01
     c4c:	83 30       	cpi	r24, 0x03	; 3
     c4e:	11 f5       	brne	.+68     	; 0xc94 <_ZN7LedCube4taskEv+0x50>
        if(CurrentLayer >= LEDCUBE_NUMBER_OF_LAYERS) {
     c50:	80 81       	ld	r24, Z
     c52:	88 30       	cpi	r24, 0x08	; 8
     c54:	b8 f0       	brcs	.+46     	; 0xc84 <_ZN7LedCube4taskEv+0x40>
            CurrentLayer = 0;
     c56:	10 82       	st	Z, r1
			/* is next frame ready to show? */
			if(NextFrameReady && NextFrameTimeElapsed) { 
     c58:	ef 01       	movw	r28, r30
     c5a:	ca 57       	subi	r28, 0x7A	; 122
     c5c:	df 4f       	sbci	r29, 0xFF	; 255
     c5e:	88 81       	ld	r24, Y
     c60:	88 23       	and	r24, r24
     c62:	81 f0       	breq	.+32     	; 0xc84 <_ZN7LedCube4taskEv+0x40>
     c64:	df 01       	movw	r26, r30
     c66:	a9 57       	subi	r26, 0x79	; 121
     c68:	bf 4f       	sbci	r27, 0xFF	; 255
     c6a:	8c 91       	ld	r24, X
     c6c:	88 23       	and	r24, r24
     c6e:	51 f0       	breq	.+20     	; 0xc84 <_ZN7LedCube4taskEv+0x40>
=======
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	fc 01       	movw	r30, r24
    if(State == LEDCUBE_STATE_RUNNING) {
     c48:	81 81       	ldd	r24, Z+1	; 0x01
     c4a:	83 30       	cpi	r24, 0x03	; 3
     c4c:	11 f5       	brne	.+68     	; 0xc92 <_ZN7LedCube4taskEv+0x50>
        if(CurrentLayer >= LEDCUBE_NUMBER_OF_LAYERS) {
     c4e:	80 81       	ld	r24, Z
     c50:	88 30       	cpi	r24, 0x08	; 8
     c52:	b8 f0       	brcs	.+46     	; 0xc82 <_ZN7LedCube4taskEv+0x40>
            CurrentLayer = 0;
     c54:	10 82       	st	Z, r1
			/* is next frame ready to show? */
			if(NextFrameReady && NextFrameTimeElapsed) { 
     c56:	ef 01       	movw	r28, r30
     c58:	ca 57       	subi	r28, 0x7A	; 122
     c5a:	df 4f       	sbci	r29, 0xFF	; 255
     c5c:	88 81       	ld	r24, Y
     c5e:	88 23       	and	r24, r24
     c60:	81 f0       	breq	.+32     	; 0xc82 <_ZN7LedCube4taskEv+0x40>
     c62:	df 01       	movw	r26, r30
     c64:	a9 57       	subi	r26, 0x79	; 121
     c66:	bf 4f       	sbci	r27, 0xFF	; 255
     c68:	8c 91       	ld	r24, X
     c6a:	88 23       	and	r24, r24
     c6c:	51 f0       	breq	.+20     	; 0xc82 <_ZN7LedCube4taskEv+0x40>
>>>>>>> ...
 *****************************************************************************************************************************************************/
void LedCube::switchBufferPointer()
{
        byte (*pTmp)[LEDCUBE_NUMBER_OF_LEDS_PER_SIDE];

        pTmp = CurrentFrame;
<<<<<<< HEAD
     c70:	82 81       	ldd	r24, Z+2	; 0x02
     c72:	93 81       	ldd	r25, Z+3	; 0x03
        CurrentFrame = NextFrame;
     c74:	24 81       	ldd	r18, Z+4	; 0x04
     c76:	35 81       	ldd	r19, Z+5	; 0x05
     c78:	33 83       	std	Z+3, r19	; 0x03
     c7a:	22 83       	std	Z+2, r18	; 0x02
        NextFrame = pTmp;
     c7c:	95 83       	std	Z+5, r25	; 0x05
     c7e:	84 83       	std	Z+4, r24	; 0x04
=======
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
        CurrentFrame = NextFrame;
     c72:	24 81       	ldd	r18, Z+4	; 0x04
     c74:	35 81       	ldd	r19, Z+5	; 0x05
     c76:	33 83       	std	Z+3, r19	; 0x03
     c78:	22 83       	std	Z+2, r18	; 0x02
        NextFrame = pTmp;
     c7a:	95 83       	std	Z+5, r25	; 0x05
     c7c:	84 83       	std	Z+4, r24	; 0x04
>>>>>>> ...
        if(CurrentLayer >= LEDCUBE_NUMBER_OF_LAYERS) {
            CurrentLayer = 0;
			/* is next frame ready to show? */
			if(NextFrameReady && NextFrameTimeElapsed) { 
				showNextFrame();
				NextFrameReady = false;
<<<<<<< HEAD
     c80:	18 82       	st	Y, r1
				NextFrameTimeElapsed = false;
     c82:	1c 92       	st	X, r1
     c84:	ef 01       	movw	r28, r30
			}
        }
        showLayer(CurrentLayer);
     c86:	60 81       	ld	r22, Z
     c88:	cf 01       	movw	r24, r30
     c8a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN7LedCube9showLayerEh>
        CurrentLayer++;
     c8e:	88 81       	ld	r24, Y
     c90:	8f 5f       	subi	r24, 0xFF	; 255
     c92:	88 83       	st	Y, r24
    }
} /* task */
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>:
        for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
            pCube->setVoxelsXFast(Y, Z, pCube->getVoxelsXFast(Y, Z) << 1);
            if(Rotate) pCube->writeVoxelFast(0, Y, Z, pCube->getVoxelFast(LEDCUBE_NUMBER_OF_LEDS_PER_SIDE - 1, Y, Z));
        }
    }
} /* shiftBackwardFast */
     c9a:	0f 93       	push	r16
     c9c:	dc 01       	movw	r26, r24
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	00 23       	and	r16, r16
     ca4:	d1 f0       	breq	.+52     	; 0xcda <_ZN7LedCube14writeVoxelFastEhhhb.isra.0+0x40>
     ca6:	fa 01       	movw	r30, r20
     ca8:	93 e0       	ldi	r25, 0x03	; 3
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	9a 95       	dec	r25
     cb0:	e1 f7       	brne	.-8      	; 0xcaa <_ZN7LedCube14writeVoxelFastEhhhb.isra.0+0x10>
     cb2:	ad 01       	movw	r20, r26
     cb4:	4e 0f       	add	r20, r30
     cb6:	5f 1f       	adc	r21, r31
     cb8:	fa 01       	movw	r30, r20
     cba:	e2 0f       	add	r30, r18
     cbc:	f3 1f       	adc	r31, r19
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	04 c0       	rjmp	.+8      	; 0xcd0 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0+0x36>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	aa 1f       	adc	r26, r26
     cce:	bb 1f       	adc	r27, r27
     cd0:	6a 95       	dec	r22
     cd2:	d2 f7       	brpl	.-12     	; 0xcc8 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0+0x2e>
     cd4:	20 81       	ld	r18, Z
     cd6:	82 2b       	or	r24, r18
     cd8:	18 c0       	rjmp	.+48     	; 0xd0a <_ZN7LedCube14writeVoxelFastEhhhb.isra.0+0x70>
     cda:	83 e0       	ldi	r24, 0x03	; 3
     cdc:	44 0f       	add	r20, r20
     cde:	55 1f       	adc	r21, r21
     ce0:	8a 95       	dec	r24
     ce2:	e1 f7       	brne	.-8      	; 0xcdc <_ZN7LedCube14writeVoxelFastEhhhb.isra.0+0x42>
     ce4:	4a 0f       	add	r20, r26
     ce6:	5b 1f       	adc	r21, r27
     ce8:	fa 01       	movw	r30, r20
     cea:	e2 0f       	add	r30, r18
     cec:	f3 1f       	adc	r31, r19
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	a0 e0       	ldi	r26, 0x00	; 0
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	04 c0       	rjmp	.+8      	; 0xd00 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0+0x66>
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	aa 1f       	adc	r26, r26
     cfe:	bb 1f       	adc	r27, r27
     d00:	6a 95       	dec	r22
     d02:	d2 f7       	brpl	.-12     	; 0xcf8 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0+0x5e>
     d04:	80 95       	com	r24
     d06:	90 81       	ld	r25, Z
     d08:	89 23       	and	r24, r25
     d0a:	80 83       	st	Z, r24
     d0c:	0f 91       	pop	r16
     d0e:	08 95       	ret

00000d10 <_ZN14TransformationC1EP7LedCube>:
     d10:	fc 01       	movw	r30, r24
     d12:	71 83       	std	Z+1, r23	; 0x01
     d14:	60 83       	st	Z, r22
     d16:	08 95       	ret

00000d18 <_ZN14TransformationD1Ev>:
     d18:	08 95       	ret

00000d1a <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh>:
=======
     c7e:	18 82       	st	Y, r1
				NextFrameTimeElapsed = false;
     c80:	1c 92       	st	X, r1
     c82:	ef 01       	movw	r28, r30
			}
        }
        showLayer(CurrentLayer);
     c84:	60 81       	ld	r22, Z
     c86:	cf 01       	movw	r24, r30
     c88:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_ZN7LedCube9showLayerEh>
        CurrentLayer++;
     c8c:	88 81       	ld	r24, Y
     c8e:	8f 5f       	subi	r24, 0xFF	; 255
     c90:	88 83       	st	Y, r24
    }
} /* task */
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>:
		for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
			pCube->setVoxelsXFast(Y, Z, pCube->getVoxelsXFast(Y, Z) << 1);
			if(Rotate) pCube->writeVoxelFast(0, Y, Z, pCube->getVoxelFast(LEDCUBE_NUMBER_OF_LEDS_PER_SIDE - 1, Y, Z));
		}
	}
} /* shiftBackwardFast */
     c98:	0f 93       	push	r16
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	e2 2f       	mov	r30, r18
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	23 e0       	ldi	r18, 0x03	; 3
     ca2:	44 0f       	add	r20, r20
     ca4:	55 1f       	adc	r21, r21
     ca6:	2a 95       	dec	r18
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0+0xa>
     caa:	48 0f       	add	r20, r24
     cac:	59 1f       	adc	r21, r25
     cae:	e4 0f       	add	r30, r20
     cb0:	f5 1f       	adc	r31, r21
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	04 c0       	rjmp	.+8      	; 0xcc4 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0+0x2c>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	aa 1f       	adc	r26, r26
     cc2:	bb 1f       	adc	r27, r27
     cc4:	6a 95       	dec	r22
     cc6:	d2 f7       	brpl	.-12     	; 0xcbc <_ZN7LedCube14writeVoxelFastEhhhb.isra.0+0x24>
     cc8:	00 23       	and	r16, r16
     cca:	19 f0       	breq	.+6      	; 0xcd2 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0+0x3a>
     ccc:	20 81       	ld	r18, Z
     cce:	82 2b       	or	r24, r18
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0+0x40>
     cd2:	80 95       	com	r24
     cd4:	90 81       	ld	r25, Z
     cd6:	89 23       	and	r24, r25
     cd8:	80 83       	st	Z, r24
     cda:	0f 91       	pop	r16
     cdc:	08 95       	ret

00000cde <_ZN14TransformationC1EP7LedCube>:
     cde:	fc 01       	movw	r30, r24
     ce0:	71 83       	std	Z+1, r23	; 0x01
     ce2:	60 83       	st	Z, r22
     ce4:	08 95       	ret

00000ce6 <_ZN14TransformationD1Ev>:
     ce6:	08 95       	ret

00000ce8 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh>:
>>>>>>> ...
 *  \details        
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
stdReturnType Transformation::shiftCircle(LedCubeAxisType ShiftAxis, TransformationRotationDirectionType Direction, byte Circle)
<<<<<<< HEAD
{   
     d1a:	2f 92       	push	r2
     d1c:	3f 92       	push	r3
     d1e:	4f 92       	push	r4
     d20:	5f 92       	push	r5
     d22:	6f 92       	push	r6
     d24:	7f 92       	push	r7
     d26:	8f 92       	push	r8
     d28:	9f 92       	push	r9
     d2a:	af 92       	push	r10
     d2c:	bf 92       	push	r11
     d2e:	cf 92       	push	r12
     d30:	df 92       	push	r13
     d32:	ef 92       	push	r14
     d34:	ff 92       	push	r15
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x26>
     d40:	1f 92       	push	r1
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
    const byte LEDs = LEDCUBE_NUMBER_OF_LEDS_PER_SIDE;

    if(Circle > 0 && Circle <= LEDs / 2) {
     d46:	3f ef       	ldi	r19, 0xFF	; 255
     d48:	32 0f       	add	r19, r18
     d4a:	3a 83       	std	Y+2, r19	; 0x02
     d4c:	34 30       	cpi	r19, 0x04	; 4
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x38>
     d50:	8d c1       	rjmp	.+794    	; 0x106c <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x352>
     d52:	7c 01       	movw	r14, r24
        Circle--;
        if(TRANSFORMATION_ROTATION_CLOCKWISE == Direction) {
     d54:	41 11       	cpse	r20, r1
     d56:	c3 c0       	rjmp	.+390    	; 0xede <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1c4>
            if(LEDCUBE_AXIS_Z == ShiftAxis) {
     d58:	62 30       	cpi	r22, 0x02	; 2
     d5a:	09 f0       	breq	.+2      	; 0xd5e <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x44>
     d5c:	89 c1       	rjmp	.+786    	; 0x1070 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x356>
                for(byte Z = 0; Z < LEDs; Z++) {
                    /* shift front, right, back, left */
                    for(int8_t Y = Circle; Y < LEDs-1-Circle; Y++) pCube->writeVoxelFast(Circle, Y, Z, pCube->getVoxelFast(Circle, Y+1, Z));
                    for(int8_t X = Circle; X < LEDs-1-Circle; X++) pCube->writeVoxelFast(X, LEDs-1-Circle, Z, pCube->getVoxelFast(X+1, LEDs-1-Circle, Z));
     d5e:	88 e0       	ldi	r24, 0x08	; 8
     d60:	82 1b       	sub	r24, r18
     d62:	8b 83       	std	Y+3, r24	; 0x03
=======
{	
     ce8:	2f 92       	push	r2
     cea:	3f 92       	push	r3
     cec:	4f 92       	push	r4
     cee:	5f 92       	push	r5
     cf0:	6f 92       	push	r6
     cf2:	7f 92       	push	r7
     cf4:	8f 92       	push	r8
     cf6:	9f 92       	push	r9
     cf8:	af 92       	push	r10
     cfa:	bf 92       	push	r11
     cfc:	cf 92       	push	r12
     cfe:	df 92       	push	r13
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
	const byte LEDs = LEDCUBE_NUMBER_OF_LEDS_PER_SIDE;

	if(Circle > 0 && Circle <= LEDs / 2) {
     d0c:	1f ef       	ldi	r17, 0xFF	; 255
     d0e:	12 0f       	add	r17, r18
     d10:	14 30       	cpi	r17, 0x04	; 4
     d12:	08 f0       	brcs	.+2      	; 0xd16 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x2e>
     d14:	84 c1       	rjmp	.+776    	; 0x101e <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x336>
     d16:	ec 01       	movw	r28, r24
		Circle--;
		if(TRANSFORMATION_ROTATION_CLOCKWISE == Direction) {
     d18:	41 11       	cpse	r20, r1
     d1a:	bf c0       	rjmp	.+382    	; 0xe9a <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1b2>
			if(LEDCUBE_AXIS_Z == ShiftAxis) {
     d1c:	62 30       	cpi	r22, 0x02	; 2
     d1e:	09 f0       	breq	.+2      	; 0xd22 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x3a>
     d20:	80 c1       	rjmp	.+768    	; 0x1022 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x33a>
				for(byte Z = 0; Z < LEDs; Z++) {
					/* shift front, right, back, left */
					for(int8_t Y = Circle; Y < LEDs-1-Circle; Y++) pCube->writeVoxelFast(Circle, Y, Z, pCube->getVoxelFast(Circle, Y+1, Z));
					for(int8_t X = Circle; X < LEDs-1-Circle; X++) pCube->writeVoxelFast(X, LEDs-1-Circle, Z, pCube->getVoxelFast(X+1, LEDs-1-Circle, Z));
     d22:	87 e0       	ldi	r24, 0x07	; 7
     d24:	58 2e       	mov	r5, r24
     d26:	51 1a       	sub	r5, r17
>>>>>>> ...
	stdReturnType getVoxel(byte, byte, byte, boolean*);

	void setVoxelFast(byte X, byte Y, byte Z) { bitSet(NextFrame[Y][Z], X); }
    void clearVoxelFast(byte X, byte Y, byte Z) { bitClear(NextFrame[Y][Z], X); }
    void writeVoxelFast(byte X, byte Y, byte Z, boolean Value) { bitWrite(NextFrame[Y][Z], X, Value); }
    byte getVoxelFast(byte X, byte Y, byte Z) { return bitRead(CurrentFrame[Y][Z], X); }
<<<<<<< HEAD
     d64:	98 e0       	ldi	r25, 0x08	; 8
     d66:	89 9f       	mul	r24, r25
     d68:	30 01       	movw	r6, r0
     d6a:	11 24       	eor	r1, r1
     d6c:	a3 2e       	mov	r10, r19
     d6e:	b1 2c       	mov	r11, r1
     d70:	25 01       	movw	r4, r10
     d72:	93 e0       	ldi	r25, 0x03	; 3
     d74:	44 0c       	add	r4, r4
     d76:	55 1c       	adc	r5, r5
     d78:	9a 95       	dec	r25
     d7a:	e1 f7       	brne	.-8      	; 0xd74 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x5a>
     d7c:	c1 2c       	mov	r12, r1
     d7e:	d1 2c       	mov	r13, r1
        Circle--;
        if(TRANSFORMATION_ROTATION_CLOCKWISE == Direction) {
            if(LEDCUBE_AXIS_Z == ShiftAxis) {
                for(byte Z = 0; Z < LEDs; Z++) {
                    /* shift front, right, back, left */
                    for(int8_t Y = Circle; Y < LEDs-1-Circle; Y++) pCube->writeVoxelFast(Circle, Y, Z, pCube->getVoxelFast(Circle, Y+1, Z));
     d80:	87 e0       	ldi	r24, 0x07	; 7
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	4c 01       	movw	r8, r24
     d86:	8a 18       	sub	r8, r10
     d88:	9b 08       	sbc	r9, r11
     d8a:	3c 2c       	mov	r3, r12
     d8c:	2a 80       	ldd	r2, Y+2	; 0x02
     d8e:	42 2d       	mov	r20, r2
     d90:	84 2f       	mov	r24, r20
     d92:	04 2e       	mov	r0, r20
     d94:	00 0c       	add	r0, r0
     d96:	99 0b       	sbc	r25, r25
     d98:	88 15       	cp	r24, r8
     d9a:	99 05       	cpc	r25, r9
     d9c:	0c f5       	brge	.+66     	; 0xde0 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0xc6>
     d9e:	31 e0       	ldi	r19, 0x01	; 1
     da0:	34 0f       	add	r19, r20
     da2:	d7 01       	movw	r26, r14
     da4:	ed 91       	ld	r30, X+
     da6:	fc 91       	ld	r31, X
     da8:	a2 81       	ldd	r26, Z+2	; 0x02
     daa:	b3 81       	ldd	r27, Z+3	; 0x03
     dac:	88 e0       	ldi	r24, 0x08	; 8
     dae:	38 9f       	mul	r19, r24
     db0:	a0 0d       	add	r26, r0
     db2:	b1 1d       	adc	r27, r1
     db4:	11 24       	eor	r1, r1
     db6:	ac 0d       	add	r26, r12
     db8:	bd 1d       	adc	r27, r13
     dba:	0c 91       	ld	r16, X
     dbc:	10 e0       	ldi	r17, 0x00	; 0
     dbe:	0a 80       	ldd	r0, Y+2	; 0x02
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0xac>
     dc2:	15 95       	asr	r17
     dc4:	07 95       	ror	r16
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0xa8>
     dca:	01 70       	andi	r16, 0x01	; 1
     dcc:	23 2d       	mov	r18, r3
     dce:	6a 81       	ldd	r22, Y+2	; 0x02
     dd0:	84 81       	ldd	r24, Z+4	; 0x04
     dd2:	95 81       	ldd	r25, Z+5	; 0x05
     dd4:	39 83       	std	Y+1, r19	; 0x01
     dd6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
     dda:	39 81       	ldd	r19, Y+1	; 0x01
     ddc:	43 2f       	mov	r20, r19
     dde:	d8 cf       	rjmp	.-80     	; 0xd90 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x76>
                    for(int8_t X = Circle; X < LEDs-1-Circle; X++) pCube->writeVoxelFast(X, LEDs-1-Circle, Z, pCube->getVoxelFast(X+1, LEDs-1-Circle, Z));
     de0:	82 2d       	mov	r24, r2
     de2:	02 2c       	mov	r0, r2
     de4:	00 0c       	add	r0, r0
     de6:	99 0b       	sbc	r25, r25
     de8:	88 15       	cp	r24, r8
     dea:	99 05       	cpc	r25, r9
     dec:	fc f4       	brge	.+62     	; 0xe2c <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x112>
     dee:	31 e0       	ldi	r19, 0x01	; 1
     df0:	32 0d       	add	r19, r2
     df2:	d7 01       	movw	r26, r14
     df4:	ed 91       	ld	r30, X+
     df6:	fc 91       	ld	r31, X
     df8:	a2 81       	ldd	r26, Z+2	; 0x02
     dfa:	b3 81       	ldd	r27, Z+3	; 0x03
     dfc:	a6 0d       	add	r26, r6
     dfe:	b7 1d       	adc	r27, r7
     e00:	ac 0d       	add	r26, r12
     e02:	bd 1d       	adc	r27, r13
     e04:	0c 91       	ld	r16, X
     e06:	10 e0       	ldi	r17, 0x00	; 0
     e08:	03 2e       	mov	r0, r19
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0xf6>
     e0c:	15 95       	asr	r17
     e0e:	07 95       	ror	r16
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0xf2>
     e14:	01 70       	andi	r16, 0x01	; 1
     e16:	23 2d       	mov	r18, r3
     e18:	4b 81       	ldd	r20, Y+3	; 0x03
     e1a:	62 2d       	mov	r22, r2
     e1c:	84 81       	ldd	r24, Z+4	; 0x04
     e1e:	95 81       	ldd	r25, Z+5	; 0x05
     e20:	39 83       	std	Y+1, r19	; 0x01
     e22:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
     e26:	39 81       	ldd	r19, Y+1	; 0x01
     e28:	23 2e       	mov	r2, r19
     e2a:	da cf       	rjmp	.-76     	; 0xde0 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0xc6>
                    for(int8_t Y = LEDs-1-Circle; Y > Circle; Y--) pCube->writeVoxelFast(LEDs-1-Circle, Y, Z, pCube->getVoxelFast(LEDs-1-Circle, Y-1, Z));
     e2c:	2b 80       	ldd	r2, Y+3	; 0x03
     e2e:	42 2d       	mov	r20, r2
     e30:	84 2f       	mov	r24, r20
     e32:	04 2e       	mov	r0, r20
     e34:	00 0c       	add	r0, r0
     e36:	99 0b       	sbc	r25, r25
     e38:	a8 16       	cp	r10, r24
     e3a:	b9 06       	cpc	r11, r25
     e3c:	0c f5       	brge	.+66     	; 0xe80 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x166>
     e3e:	3f ef       	ldi	r19, 0xFF	; 255
     e40:	34 0f       	add	r19, r20
     e42:	d7 01       	movw	r26, r14
     e44:	ed 91       	ld	r30, X+
     e46:	fc 91       	ld	r31, X
     e48:	a2 81       	ldd	r26, Z+2	; 0x02
     e4a:	b3 81       	ldd	r27, Z+3	; 0x03
     e4c:	88 e0       	ldi	r24, 0x08	; 8
     e4e:	38 9f       	mul	r19, r24
     e50:	a0 0d       	add	r26, r0
     e52:	b1 1d       	adc	r27, r1
     e54:	11 24       	eor	r1, r1
     e56:	ac 0d       	add	r26, r12
     e58:	bd 1d       	adc	r27, r13
     e5a:	0c 91       	ld	r16, X
     e5c:	10 e0       	ldi	r17, 0x00	; 0
     e5e:	0b 80       	ldd	r0, Y+3	; 0x03
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x14c>
     e62:	15 95       	asr	r17
     e64:	07 95       	ror	r16
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x148>
     e6a:	01 70       	andi	r16, 0x01	; 1
     e6c:	23 2d       	mov	r18, r3
     e6e:	6b 81       	ldd	r22, Y+3	; 0x03
     e70:	84 81       	ldd	r24, Z+4	; 0x04
     e72:	95 81       	ldd	r25, Z+5	; 0x05
     e74:	39 83       	std	Y+1, r19	; 0x01
     e76:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
     e7a:	39 81       	ldd	r19, Y+1	; 0x01
     e7c:	43 2f       	mov	r20, r19
     e7e:	d8 cf       	rjmp	.-80     	; 0xe30 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x116>
                    for(int8_t X = LEDs-1-Circle; X > Circle; X--) pCube->writeVoxelFast(X, Circle, Z, pCube->getVoxelFast(X-1, Circle, Z));
     e80:	82 2d       	mov	r24, r2
     e82:	02 2c       	mov	r0, r2
     e84:	00 0c       	add	r0, r0
     e86:	99 0b       	sbc	r25, r25
     e88:	a8 16       	cp	r10, r24
     e8a:	b9 06       	cpc	r11, r25
     e8c:	fc f4       	brge	.+62     	; 0xecc <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1b2>
     e8e:	3f ef       	ldi	r19, 0xFF	; 255
     e90:	32 0d       	add	r19, r2
     e92:	d7 01       	movw	r26, r14
     e94:	ed 91       	ld	r30, X+
     e96:	fc 91       	ld	r31, X
     e98:	a2 81       	ldd	r26, Z+2	; 0x02
     e9a:	b3 81       	ldd	r27, Z+3	; 0x03
     e9c:	a4 0d       	add	r26, r4
     e9e:	b5 1d       	adc	r27, r5
     ea0:	ac 0d       	add	r26, r12
     ea2:	bd 1d       	adc	r27, r13
     ea4:	0c 91       	ld	r16, X
     ea6:	10 e0       	ldi	r17, 0x00	; 0
     ea8:	03 2e       	mov	r0, r19
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x196>
     eac:	15 95       	asr	r17
     eae:	07 95       	ror	r16
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x192>
     eb4:	01 70       	andi	r16, 0x01	; 1
     eb6:	23 2d       	mov	r18, r3
     eb8:	4a 81       	ldd	r20, Y+2	; 0x02
     eba:	62 2d       	mov	r22, r2
     ebc:	84 81       	ldd	r24, Z+4	; 0x04
     ebe:	95 81       	ldd	r25, Z+5	; 0x05
     ec0:	39 83       	std	Y+1, r19	; 0x01
     ec2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
     ec6:	39 81       	ldd	r19, Y+1	; 0x01
     ec8:	23 2e       	mov	r2, r19
     eca:	da cf       	rjmp	.-76     	; 0xe80 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x166>
     ecc:	bf ef       	ldi	r27, 0xFF	; 255
     ece:	cb 1a       	sub	r12, r27
     ed0:	db 0a       	sbc	r13, r27

    if(Circle > 0 && Circle <= LEDs / 2) {
        Circle--;
        if(TRANSFORMATION_ROTATION_CLOCKWISE == Direction) {
            if(LEDCUBE_AXIS_Z == ShiftAxis) {
                for(byte Z = 0; Z < LEDs; Z++) {
     ed2:	38 e0       	ldi	r19, 0x08	; 8
     ed4:	c3 16       	cp	r12, r19
     ed6:	d1 04       	cpc	r13, r1
     ed8:	09 f0       	breq	.+2      	; 0xedc <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1c2>
     eda:	57 cf       	rjmp	.-338    	; 0xd8a <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x70>
     edc:	c9 c0       	rjmp	.+402    	; 0x1070 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x356>
                    for(int8_t Y = LEDs-1-Circle; Y > Circle; Y--) pCube->writeVoxelFast(LEDs-1-Circle, Y, Z, pCube->getVoxelFast(LEDs-1-Circle, Y-1, Z));
                    for(int8_t X = LEDs-1-Circle; X > Circle; X--) pCube->writeVoxelFast(X, Circle, Z, pCube->getVoxelFast(X-1, Circle, Z));
                }
            }
        }
        if(TRANSFORMATION_ROTATION_COUNTERCLOCKWISE == Direction) {
     ede:	41 30       	cpi	r20, 0x01	; 1
     ee0:	09 f0       	breq	.+2      	; 0xee4 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1ca>
     ee2:	c6 c0       	rjmp	.+396    	; 0x1070 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x356>
            if(LEDCUBE_AXIS_Z == ShiftAxis) {
     ee4:	62 30       	cpi	r22, 0x02	; 2
     ee6:	09 f0       	breq	.+2      	; 0xeea <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1d0>
     ee8:	c3 c0       	rjmp	.+390    	; 0x1070 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x356>
     eea:	3a 81       	ldd	r19, Y+2	; 0x02
     eec:	a3 2e       	mov	r10, r19
     eee:	b1 2c       	mov	r11, r1
     ef0:	35 01       	movw	r6, r10
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	66 0c       	add	r6, r6
     ef6:	77 1c       	adc	r7, r7
     ef8:	8a 95       	dec	r24
     efa:	e1 f7       	brne	.-8      	; 0xef4 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1da>
                for(byte Z = 0; Z < LEDs; Z++) {
                    /* shift left, back, right, front */
                    for(int8_t X = Circle; X < LEDs-1-Circle; X++) pCube->writeVoxelFast(X, Circle, Z, pCube->getVoxelFast(X+1, Circle, Z));
                    for(int8_t Y = Circle; Y < LEDs-1-Circle; Y++) pCube->writeVoxelFast(LEDs-1-Circle, Y, Z, pCube->getVoxelFast(LEDs-1-Circle, Y+1, Z));
                    for(int8_t X = LEDs-1-Circle; X > Circle; X--) pCube->writeVoxelFast(X, LEDs-1-Circle, Z, pCube->getVoxelFast(X-1, LEDs-1-Circle, Z));
     efc:	88 e0       	ldi	r24, 0x08	; 8
     efe:	82 1b       	sub	r24, r18
     f00:	8b 83       	std	Y+3, r24	; 0x03
     f02:	98 e0       	ldi	r25, 0x08	; 8
     f04:	89 9f       	mul	r24, r25
     f06:	20 01       	movw	r4, r0
     f08:	11 24       	eor	r1, r1
     f0a:	c1 2c       	mov	r12, r1
     f0c:	d1 2c       	mov	r13, r1
        }
        if(TRANSFORMATION_ROTATION_COUNTERCLOCKWISE == Direction) {
            if(LEDCUBE_AXIS_Z == ShiftAxis) {
                for(byte Z = 0; Z < LEDs; Z++) {
                    /* shift left, back, right, front */
                    for(int8_t X = Circle; X < LEDs-1-Circle; X++) pCube->writeVoxelFast(X, Circle, Z, pCube->getVoxelFast(X+1, Circle, Z));
     f0e:	87 e0       	ldi	r24, 0x07	; 7
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	4c 01       	movw	r8, r24
     f14:	8a 18       	sub	r8, r10
     f16:	9b 08       	sbc	r9, r11
     f18:	3c 2c       	mov	r3, r12
     f1a:	2a 80       	ldd	r2, Y+2	; 0x02
     f1c:	62 2d       	mov	r22, r2
     f1e:	86 2f       	mov	r24, r22
     f20:	06 2e       	mov	r0, r22
     f22:	00 0c       	add	r0, r0
     f24:	99 0b       	sbc	r25, r25
     f26:	88 15       	cp	r24, r8
     f28:	99 05       	cpc	r25, r9
     f2a:	f4 f4       	brge	.+60     	; 0xf68 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x24e>
     f2c:	31 e0       	ldi	r19, 0x01	; 1
     f2e:	36 0f       	add	r19, r22
     f30:	d7 01       	movw	r26, r14
     f32:	ed 91       	ld	r30, X+
     f34:	fc 91       	ld	r31, X
     f36:	a2 81       	ldd	r26, Z+2	; 0x02
     f38:	b3 81       	ldd	r27, Z+3	; 0x03
     f3a:	a6 0d       	add	r26, r6
     f3c:	b7 1d       	adc	r27, r7
     f3e:	ac 0d       	add	r26, r12
     f40:	bd 1d       	adc	r27, r13
     f42:	0c 91       	ld	r16, X
     f44:	10 e0       	ldi	r17, 0x00	; 0
     f46:	03 2e       	mov	r0, r19
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x234>
     f4a:	15 95       	asr	r17
     f4c:	07 95       	ror	r16
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x230>
     f52:	01 70       	andi	r16, 0x01	; 1
     f54:	23 2d       	mov	r18, r3
     f56:	4a 81       	ldd	r20, Y+2	; 0x02
     f58:	84 81       	ldd	r24, Z+4	; 0x04
     f5a:	95 81       	ldd	r25, Z+5	; 0x05
     f5c:	39 83       	std	Y+1, r19	; 0x01
     f5e:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
     f62:	39 81       	ldd	r19, Y+1	; 0x01
     f64:	63 2f       	mov	r22, r19
     f66:	db cf       	rjmp	.-74     	; 0xf1e <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x204>
                    for(int8_t Y = Circle; Y < LEDs-1-Circle; Y++) pCube->writeVoxelFast(LEDs-1-Circle, Y, Z, pCube->getVoxelFast(LEDs-1-Circle, Y+1, Z));
     f68:	82 2d       	mov	r24, r2
     f6a:	02 2c       	mov	r0, r2
     f6c:	00 0c       	add	r0, r0
     f6e:	99 0b       	sbc	r25, r25
     f70:	88 15       	cp	r24, r8
     f72:	99 05       	cpc	r25, r9
     f74:	14 f5       	brge	.+68     	; 0xfba <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x2a0>
     f76:	31 e0       	ldi	r19, 0x01	; 1
     f78:	32 0d       	add	r19, r2
     f7a:	d7 01       	movw	r26, r14
     f7c:	ed 91       	ld	r30, X+
     f7e:	fc 91       	ld	r31, X
     f80:	a2 81       	ldd	r26, Z+2	; 0x02
     f82:	b3 81       	ldd	r27, Z+3	; 0x03
     f84:	88 e0       	ldi	r24, 0x08	; 8
     f86:	38 9f       	mul	r19, r24
     f88:	a0 0d       	add	r26, r0
     f8a:	b1 1d       	adc	r27, r1
     f8c:	11 24       	eor	r1, r1
     f8e:	ac 0d       	add	r26, r12
     f90:	bd 1d       	adc	r27, r13
     f92:	0c 91       	ld	r16, X
     f94:	10 e0       	ldi	r17, 0x00	; 0
     f96:	0b 80       	ldd	r0, Y+3	; 0x03
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x284>
     f9a:	15 95       	asr	r17
     f9c:	07 95       	ror	r16
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x280>
     fa2:	01 70       	andi	r16, 0x01	; 1
     fa4:	23 2d       	mov	r18, r3
     fa6:	42 2d       	mov	r20, r2
     fa8:	6b 81       	ldd	r22, Y+3	; 0x03
     faa:	84 81       	ldd	r24, Z+4	; 0x04
     fac:	95 81       	ldd	r25, Z+5	; 0x05
     fae:	39 83       	std	Y+1, r19	; 0x01
     fb0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
     fb4:	39 81       	ldd	r19, Y+1	; 0x01
     fb6:	23 2e       	mov	r2, r19
     fb8:	d7 cf       	rjmp	.-82     	; 0xf68 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x24e>
                    for(int8_t X = LEDs-1-Circle; X > Circle; X--) pCube->writeVoxelFast(X, LEDs-1-Circle, Z, pCube->getVoxelFast(X-1, LEDs-1-Circle, Z));
     fba:	2b 80       	ldd	r2, Y+3	; 0x03
     fbc:	62 2d       	mov	r22, r2
     fbe:	86 2f       	mov	r24, r22
     fc0:	06 2e       	mov	r0, r22
     fc2:	00 0c       	add	r0, r0
     fc4:	99 0b       	sbc	r25, r25
     fc6:	a8 16       	cp	r10, r24
     fc8:	b9 06       	cpc	r11, r25
     fca:	f4 f4       	brge	.+60     	; 0x1008 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x2ee>
     fcc:	3f ef       	ldi	r19, 0xFF	; 255
     fce:	36 0f       	add	r19, r22
     fd0:	d7 01       	movw	r26, r14
     fd2:	ed 91       	ld	r30, X+
     fd4:	fc 91       	ld	r31, X
     fd6:	a2 81       	ldd	r26, Z+2	; 0x02
     fd8:	b3 81       	ldd	r27, Z+3	; 0x03
     fda:	a4 0d       	add	r26, r4
     fdc:	b5 1d       	adc	r27, r5
     fde:	ac 0d       	add	r26, r12
     fe0:	bd 1d       	adc	r27, r13
     fe2:	0c 91       	ld	r16, X
     fe4:	10 e0       	ldi	r17, 0x00	; 0
     fe6:	03 2e       	mov	r0, r19
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x2d4>
     fea:	15 95       	asr	r17
     fec:	07 95       	ror	r16
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x2d0>
     ff2:	01 70       	andi	r16, 0x01	; 1
     ff4:	23 2d       	mov	r18, r3
     ff6:	4b 81       	ldd	r20, Y+3	; 0x03
     ff8:	84 81       	ldd	r24, Z+4	; 0x04
     ffa:	95 81       	ldd	r25, Z+5	; 0x05
     ffc:	39 83       	std	Y+1, r19	; 0x01
     ffe:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
    1002:	39 81       	ldd	r19, Y+1	; 0x01
    1004:	63 2f       	mov	r22, r19
    1006:	db cf       	rjmp	.-74     	; 0xfbe <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x2a4>
                    for(int8_t Y = LEDs-1-Circle; Y > Circle; Y--) pCube->writeVoxelFast(Circle, Y, Z, pCube->getVoxelFast(Circle, Y-1, Z));
    1008:	82 2d       	mov	r24, r2
    100a:	02 2c       	mov	r0, r2
    100c:	00 0c       	add	r0, r0
    100e:	99 0b       	sbc	r25, r25
    1010:	a8 16       	cp	r10, r24
    1012:	b9 06       	cpc	r11, r25
    1014:	14 f5       	brge	.+68     	; 0x105a <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x340>
    1016:	3f ef       	ldi	r19, 0xFF	; 255
    1018:	32 0d       	add	r19, r2
    101a:	d7 01       	movw	r26, r14
    101c:	ed 91       	ld	r30, X+
    101e:	fc 91       	ld	r31, X
    1020:	a2 81       	ldd	r26, Z+2	; 0x02
    1022:	b3 81       	ldd	r27, Z+3	; 0x03
    1024:	88 e0       	ldi	r24, 0x08	; 8
    1026:	38 9f       	mul	r19, r24
    1028:	a0 0d       	add	r26, r0
    102a:	b1 1d       	adc	r27, r1
    102c:	11 24       	eor	r1, r1
    102e:	ac 0d       	add	r26, r12
    1030:	bd 1d       	adc	r27, r13
    1032:	0c 91       	ld	r16, X
    1034:	10 e0       	ldi	r17, 0x00	; 0
    1036:	0a 2c       	mov	r0, r10
    1038:	02 c0       	rjmp	.+4      	; 0x103e <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x324>
    103a:	15 95       	asr	r17
    103c:	07 95       	ror	r16
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x320>
    1042:	01 70       	andi	r16, 0x01	; 1
    1044:	23 2d       	mov	r18, r3
    1046:	42 2d       	mov	r20, r2
    1048:	6a 81       	ldd	r22, Y+2	; 0x02
    104a:	84 81       	ldd	r24, Z+4	; 0x04
    104c:	95 81       	ldd	r25, Z+5	; 0x05
    104e:	39 83       	std	Y+1, r19	; 0x01
    1050:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
    1054:	39 81       	ldd	r19, Y+1	; 0x01
    1056:	23 2e       	mov	r2, r19
    1058:	d7 cf       	rjmp	.-82     	; 0x1008 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x2ee>
    105a:	9f ef       	ldi	r25, 0xFF	; 255
    105c:	c9 1a       	sub	r12, r25
    105e:	d9 0a       	sbc	r13, r25
                }
            }
        }
        if(TRANSFORMATION_ROTATION_COUNTERCLOCKWISE == Direction) {
            if(LEDCUBE_AXIS_Z == ShiftAxis) {
                for(byte Z = 0; Z < LEDs; Z++) {
    1060:	a8 e0       	ldi	r26, 0x08	; 8
    1062:	ca 16       	cp	r12, r26
    1064:	d1 04       	cpc	r13, r1
    1066:	09 f0       	breq	.+2      	; 0x106a <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x350>
    1068:	57 cf       	rjmp	.-338    	; 0xf18 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1fe>
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x356>
            }
        }
        return E_OK;
    } 
    else { 
        return E_NOT_OK;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x358>
                    for(int8_t X = LEDs-1-Circle; X > Circle; X--) pCube->writeVoxelFast(X, LEDs-1-Circle, Z, pCube->getVoxelFast(X-1, LEDs-1-Circle, Z));
                    for(int8_t Y = LEDs-1-Circle; Y > Circle; Y--) pCube->writeVoxelFast(Circle, Y, Z, pCube->getVoxelFast(Circle, Y-1, Z));
                }
            }
        }
        return E_OK;
    1070:	80 e0       	ldi	r24, 0x00	; 0
    } 
    else { 
        return E_NOT_OK;
    }
} /* rotateWithShift */
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	bf 90       	pop	r11
    108a:	af 90       	pop	r10
    108c:	9f 90       	pop	r9
    108e:	8f 90       	pop	r8
    1090:	7f 90       	pop	r7
    1092:	6f 90       	pop	r6
    1094:	5f 90       	pop	r5
    1096:	4f 90       	pop	r4
    1098:	3f 90       	pop	r3
    109a:	2f 90       	pop	r2
    109c:	08 95       	ret

0000109e <initVariant>:
    109e:	08 95       	ret

000010a0 <main>:
    10a0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <init>
    10a4:	0e 94 4f 08 	call	0x109e	; 0x109e <initVariant>
    10a8:	0e 94 ef 04 	call	0x9de	; 0x9de <setup>
    10ac:	c0 e0       	ldi	r28, 0x00	; 0
    10ae:	d0 e0       	ldi	r29, 0x00	; 0
    10b0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <loop>
    10b4:	20 97       	sbiw	r28, 0x00	; 0
    10b6:	e1 f3       	breq	.-8      	; 0x10b0 <main+0x10>
    10b8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    10bc:	f9 cf       	rjmp	.-14     	; 0x10b0 <main+0x10>

000010be <__vector_16>:
    10be:	1f 92       	push	r1
    10c0:	0f 92       	push	r0
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	0f 92       	push	r0
    10c6:	11 24       	eor	r1, r1
    10c8:	2f 93       	push	r18
    10ca:	3f 93       	push	r19
    10cc:	8f 93       	push	r24
    10ce:	9f 93       	push	r25
    10d0:	af 93       	push	r26
    10d2:	bf 93       	push	r27
    10d4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timer0_millis>
    10d8:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timer0_millis+0x1>
    10dc:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <timer0_millis+0x2>
    10e0:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <timer0_millis+0x3>
    10e4:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <timer0_fract>
    10e8:	23 e0       	ldi	r18, 0x03	; 3
    10ea:	23 0f       	add	r18, r19
    10ec:	2d 37       	cpi	r18, 0x7D	; 125
    10ee:	20 f4       	brcc	.+8      	; 0x10f8 <__vector_16+0x3a>
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	a1 1d       	adc	r26, r1
    10f4:	b1 1d       	adc	r27, r1
    10f6:	05 c0       	rjmp	.+10     	; 0x1102 <__vector_16+0x44>
    10f8:	26 e8       	ldi	r18, 0x86	; 134
    10fa:	23 0f       	add	r18, r19
    10fc:	02 96       	adiw	r24, 0x02	; 2
    10fe:	a1 1d       	adc	r26, r1
    1100:	b1 1d       	adc	r27, r1
    1102:	20 93 8d 01 	sts	0x018D, r18	; 0x80018d <timer0_fract>
    1106:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timer0_millis>
    110a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timer0_millis+0x1>
    110e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timer0_millis+0x2>
    1112:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timer0_millis+0x3>
    1116:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <timer0_overflow_count>
    111a:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <timer0_overflow_count+0x1>
    111e:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <timer0_overflow_count+0x2>
    1122:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <timer0_overflow_count+0x3>
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	a1 1d       	adc	r26, r1
    112a:	b1 1d       	adc	r27, r1
    112c:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <timer0_overflow_count>
    1130:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <timer0_overflow_count+0x1>
    1134:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <timer0_overflow_count+0x2>
    1138:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <timer0_overflow_count+0x3>
    113c:	bf 91       	pop	r27
    113e:	af 91       	pop	r26
    1140:	9f 91       	pop	r25
    1142:	8f 91       	pop	r24
    1144:	3f 91       	pop	r19
    1146:	2f 91       	pop	r18
    1148:	0f 90       	pop	r0
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	0f 90       	pop	r0
    114e:	1f 90       	pop	r1
    1150:	18 95       	reti

00001152 <micros>:
    1152:	3f b7       	in	r19, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <timer0_overflow_count>
    115a:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <timer0_overflow_count+0x1>
    115e:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <timer0_overflow_count+0x2>
    1162:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <timer0_overflow_count+0x3>
    1166:	26 b5       	in	r18, 0x26	; 38
    1168:	a8 9b       	sbis	0x15, 0	; 21
    116a:	05 c0       	rjmp	.+10     	; 0x1176 <micros+0x24>
    116c:	2f 3f       	cpi	r18, 0xFF	; 255
    116e:	19 f0       	breq	.+6      	; 0x1176 <micros+0x24>
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	a1 1d       	adc	r26, r1
    1174:	b1 1d       	adc	r27, r1
    1176:	3f bf       	out	0x3f, r19	; 63
    1178:	ba 2f       	mov	r27, r26
    117a:	a9 2f       	mov	r26, r25
    117c:	98 2f       	mov	r25, r24
    117e:	88 27       	eor	r24, r24
    1180:	82 0f       	add	r24, r18
    1182:	91 1d       	adc	r25, r1
    1184:	a1 1d       	adc	r26, r1
    1186:	b1 1d       	adc	r27, r1
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	42 e0       	ldi	r20, 0x02	; 2
    118e:	66 0f       	add	r22, r22
    1190:	77 1f       	adc	r23, r23
    1192:	88 1f       	adc	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	4a 95       	dec	r20
    1198:	d1 f7       	brne	.-12     	; 0x118e <micros+0x3c>
    119a:	08 95       	ret

0000119c <delay>:
    119c:	cf 92       	push	r12
    119e:	df 92       	push	r13
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	6b 01       	movw	r12, r22
    11aa:	7c 01       	movw	r14, r24
    11ac:	0e 94 a9 08 	call	0x1152	; 0x1152 <micros>
    11b0:	eb 01       	movw	r28, r22
    11b2:	c1 14       	cp	r12, r1
    11b4:	d1 04       	cpc	r13, r1
    11b6:	e1 04       	cpc	r14, r1
    11b8:	f1 04       	cpc	r15, r1
    11ba:	89 f0       	breq	.+34     	; 0x11de <delay+0x42>
    11bc:	0e 94 c6 09 	call	0x138c	; 0x138c <yield>
    11c0:	0e 94 a9 08 	call	0x1152	; 0x1152 <micros>
    11c4:	6c 1b       	sub	r22, r28
    11c6:	7d 0b       	sbc	r23, r29
    11c8:	68 3e       	cpi	r22, 0xE8	; 232
    11ca:	73 40       	sbci	r23, 0x03	; 3
    11cc:	90 f3       	brcs	.-28     	; 0x11b2 <delay+0x16>
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	c8 1a       	sub	r12, r24
    11d2:	d1 08       	sbc	r13, r1
    11d4:	e1 08       	sbc	r14, r1
    11d6:	f1 08       	sbc	r15, r1
    11d8:	c8 51       	subi	r28, 0x18	; 24
    11da:	dc 4f       	sbci	r29, 0xFC	; 252
    11dc:	ea cf       	rjmp	.-44     	; 0x11b2 <delay+0x16>
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	ff 90       	pop	r15
    11e4:	ef 90       	pop	r14
    11e6:	df 90       	pop	r13
    11e8:	cf 90       	pop	r12
    11ea:	08 95       	ret

000011ec <init>:
    11ec:	78 94       	sei
    11ee:	84 b5       	in	r24, 0x24	; 36
    11f0:	82 60       	ori	r24, 0x02	; 2
    11f2:	84 bd       	out	0x24, r24	; 36
    11f4:	84 b5       	in	r24, 0x24	; 36
    11f6:	81 60       	ori	r24, 0x01	; 1
    11f8:	84 bd       	out	0x24, r24	; 36
    11fa:	85 b5       	in	r24, 0x25	; 37
    11fc:	82 60       	ori	r24, 0x02	; 2
    11fe:	85 bd       	out	0x25, r24	; 37
    1200:	85 b5       	in	r24, 0x25	; 37
    1202:	81 60       	ori	r24, 0x01	; 1
    1204:	85 bd       	out	0x25, r24	; 37
    1206:	ee e6       	ldi	r30, 0x6E	; 110
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	81 60       	ori	r24, 0x01	; 1
    120e:	80 83       	st	Z, r24
    1210:	e1 e8       	ldi	r30, 0x81	; 129
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	10 82       	st	Z, r1
    1216:	80 81       	ld	r24, Z
    1218:	82 60       	ori	r24, 0x02	; 2
    121a:	80 83       	st	Z, r24
    121c:	80 81       	ld	r24, Z
    121e:	81 60       	ori	r24, 0x01	; 1
    1220:	80 83       	st	Z, r24
    1222:	e0 e8       	ldi	r30, 0x80	; 128
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	81 60       	ori	r24, 0x01	; 1
    122a:	80 83       	st	Z, r24
    122c:	e1 eb       	ldi	r30, 0xB1	; 177
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	84 60       	ori	r24, 0x04	; 4
    1234:	80 83       	st	Z, r24
    1236:	e0 eb       	ldi	r30, 0xB0	; 176
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	81 60       	ori	r24, 0x01	; 1
    123e:	80 83       	st	Z, r24
    1240:	ea e7       	ldi	r30, 0x7A	; 122
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	84 60       	ori	r24, 0x04	; 4
    1248:	80 83       	st	Z, r24
    124a:	80 81       	ld	r24, Z
    124c:	82 60       	ori	r24, 0x02	; 2
    124e:	80 83       	st	Z, r24
    1250:	80 81       	ld	r24, Z
    1252:	81 60       	ori	r24, 0x01	; 1
    1254:	80 83       	st	Z, r24
    1256:	80 81       	ld	r24, Z
    1258:	80 68       	ori	r24, 0x80	; 128
    125a:	80 83       	st	Z, r24
    125c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1260:	08 95       	ret

00001262 <turnOffPWM>:
    1262:	83 30       	cpi	r24, 0x03	; 3
    1264:	81 f0       	breq	.+32     	; 0x1286 <turnOffPWM+0x24>
    1266:	28 f4       	brcc	.+10     	; 0x1272 <turnOffPWM+0x10>
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	99 f0       	breq	.+38     	; 0x1292 <turnOffPWM+0x30>
    126c:	82 30       	cpi	r24, 0x02	; 2
    126e:	a1 f0       	breq	.+40     	; 0x1298 <turnOffPWM+0x36>
    1270:	08 95       	ret
    1272:	87 30       	cpi	r24, 0x07	; 7
    1274:	a9 f0       	breq	.+42     	; 0x12a0 <turnOffPWM+0x3e>
    1276:	88 30       	cpi	r24, 0x08	; 8
    1278:	b9 f0       	breq	.+46     	; 0x12a8 <turnOffPWM+0x46>
    127a:	84 30       	cpi	r24, 0x04	; 4
    127c:	d1 f4       	brne	.+52     	; 0x12b2 <turnOffPWM+0x50>
    127e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1282:	8f 7d       	andi	r24, 0xDF	; 223
    1284:	03 c0       	rjmp	.+6      	; 0x128c <turnOffPWM+0x2a>
    1286:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    128a:	8f 77       	andi	r24, 0x7F	; 127
    128c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1290:	08 95       	ret
    1292:	84 b5       	in	r24, 0x24	; 36
    1294:	8f 77       	andi	r24, 0x7F	; 127
    1296:	02 c0       	rjmp	.+4      	; 0x129c <turnOffPWM+0x3a>
    1298:	84 b5       	in	r24, 0x24	; 36
    129a:	8f 7d       	andi	r24, 0xDF	; 223
    129c:	84 bd       	out	0x24, r24	; 36
    129e:	08 95       	ret
    12a0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    12a4:	8f 77       	andi	r24, 0x7F	; 127
    12a6:	03 c0       	rjmp	.+6      	; 0x12ae <turnOffPWM+0x4c>
    12a8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    12ac:	8f 7d       	andi	r24, 0xDF	; 223
    12ae:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    12b2:	08 95       	ret

000012b4 <pinMode>:
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	fc 01       	movw	r30, r24
    12bc:	e4 58       	subi	r30, 0x84	; 132
    12be:	f7 4f       	sbci	r31, 0xF7	; 247
    12c0:	24 91       	lpm	r18, Z
    12c2:	fc 01       	movw	r30, r24
    12c4:	e0 57       	subi	r30, 0x70	; 112
    12c6:	f7 4f       	sbci	r31, 0xF7	; 247
    12c8:	84 91       	lpm	r24, Z
    12ca:	88 23       	and	r24, r24
    12cc:	61 f1       	breq	.+88     	; 0x1326 <pinMode+0x72>
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	fc 01       	movw	r30, r24
    12d6:	e2 55       	subi	r30, 0x52	; 82
    12d8:	f7 4f       	sbci	r31, 0xF7	; 247
    12da:	c5 91       	lpm	r28, Z+
    12dc:	d4 91       	lpm	r29, Z
    12de:	fc 01       	movw	r30, r24
    12e0:	ec 55       	subi	r30, 0x5C	; 92
    12e2:	f7 4f       	sbci	r31, 0xF7	; 247
    12e4:	a5 91       	lpm	r26, Z+
    12e6:	b4 91       	lpm	r27, Z
    12e8:	61 11       	cpse	r22, r1
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <pinMode+0x4a>
    12ec:	9f b7       	in	r25, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	88 81       	ld	r24, Y
    12f2:	20 95       	com	r18
    12f4:	82 23       	and	r24, r18
    12f6:	88 83       	st	Y, r24
    12f8:	ec 91       	ld	r30, X
    12fa:	2e 23       	and	r18, r30
    12fc:	0b c0       	rjmp	.+22     	; 0x1314 <pinMode+0x60>
    12fe:	62 30       	cpi	r22, 0x02	; 2
    1300:	61 f4       	brne	.+24     	; 0x131a <pinMode+0x66>
    1302:	9f b7       	in	r25, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	38 81       	ld	r19, Y
    1308:	82 2f       	mov	r24, r18
    130a:	80 95       	com	r24
    130c:	83 23       	and	r24, r19
    130e:	88 83       	st	Y, r24
    1310:	ec 91       	ld	r30, X
    1312:	2e 2b       	or	r18, r30
    1314:	2c 93       	st	X, r18
    1316:	9f bf       	out	0x3f, r25	; 63
    1318:	06 c0       	rjmp	.+12     	; 0x1326 <pinMode+0x72>
    131a:	8f b7       	in	r24, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	e8 81       	ld	r30, Y
    1320:	2e 2b       	or	r18, r30
    1322:	28 83       	st	Y, r18
    1324:	8f bf       	out	0x3f, r24	; 63
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	08 95       	ret

0000132c <digitalWrite>:
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	f9 01       	movw	r30, r18
    1338:	e8 59       	subi	r30, 0x98	; 152
    133a:	f7 4f       	sbci	r31, 0xF7	; 247
    133c:	84 91       	lpm	r24, Z
    133e:	f9 01       	movw	r30, r18
    1340:	e4 58       	subi	r30, 0x84	; 132
    1342:	f7 4f       	sbci	r31, 0xF7	; 247
    1344:	d4 91       	lpm	r29, Z
    1346:	f9 01       	movw	r30, r18
    1348:	e0 57       	subi	r30, 0x70	; 112
    134a:	f7 4f       	sbci	r31, 0xF7	; 247
    134c:	c4 91       	lpm	r28, Z
    134e:	cc 23       	and	r28, r28
    1350:	c9 f0       	breq	.+50     	; 0x1384 <digitalWrite+0x58>
    1352:	16 2f       	mov	r17, r22
    1354:	81 11       	cpse	r24, r1
    1356:	0e 94 31 09 	call	0x1262	; 0x1262 <turnOffPWM>
    135a:	ec 2f       	mov	r30, r28
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	ee 0f       	add	r30, r30
    1360:	ff 1f       	adc	r31, r31
    1362:	ec 55       	subi	r30, 0x5C	; 92
    1364:	f7 4f       	sbci	r31, 0xF7	; 247
    1366:	a5 91       	lpm	r26, Z+
    1368:	b4 91       	lpm	r27, Z
    136a:	8f b7       	in	r24, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	11 11       	cpse	r17, r1
    1370:	05 c0       	rjmp	.+10     	; 0x137c <digitalWrite+0x50>
    1372:	9c 91       	ld	r25, X
    1374:	ed 2f       	mov	r30, r29
    1376:	e0 95       	com	r30
    1378:	e9 23       	and	r30, r25
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <digitalWrite+0x54>
    137c:	ec 91       	ld	r30, X
    137e:	ed 2b       	or	r30, r29
    1380:	ec 93       	st	X, r30
    1382:	8f bf       	out	0x3f, r24	; 63
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	1f 91       	pop	r17
    138a:	08 95       	ret

0000138c <yield>:
    138c:	08 95       	ret

0000138e <__tablejump2__>:
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	05 90       	lpm	r0, Z+
    1394:	f4 91       	lpm	r31, Z
    1396:	e0 2d       	mov	r30, r0
    1398:	09 94       	ijmp

0000139a <__do_global_dtors>:
    139a:	14 e0       	ldi	r17, 0x04	; 4
    139c:	cd e5       	ldi	r28, 0x5D	; 93
    139e:	d4 e0       	ldi	r29, 0x04	; 4
    13a0:	04 c0       	rjmp	.+8      	; 0x13aa <__do_global_dtors+0x10>
    13a2:	fe 01       	movw	r30, r28
    13a4:	0e 94 c7 09 	call	0x138e	; 0x138e <__tablejump2__>
    13a8:	21 96       	adiw	r28, 0x01	; 1
    13aa:	ce 35       	cpi	r28, 0x5E	; 94
    13ac:	d1 07       	cpc	r29, r17
    13ae:	c9 f7       	brne	.-14     	; 0x13a2 <__do_global_dtors+0x8>
    13b0:	f8 94       	cli

000013b2 <__stop_program>:
    13b2:	ff cf       	rjmp	.-2      	; 0x13b2 <__stop_program>
=======
     d28:	88 e0       	ldi	r24, 0x08	; 8
     d2a:	58 9e       	mul	r5, r24
     d2c:	30 01       	movw	r6, r0
     d2e:	11 24       	eor	r1, r1
     d30:	c1 2e       	mov	r12, r17
     d32:	d1 2c       	mov	r13, r1
     d34:	46 01       	movw	r8, r12
     d36:	93 e0       	ldi	r25, 0x03	; 3
     d38:	88 0c       	add	r8, r8
     d3a:	99 1c       	adc	r9, r9
     d3c:	9a 95       	dec	r25
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x50>
     d40:	e1 2c       	mov	r14, r1
     d42:	f1 2c       	mov	r15, r1
		Circle--;
		if(TRANSFORMATION_ROTATION_CLOCKWISE == Direction) {
			if(LEDCUBE_AXIS_Z == ShiftAxis) {
				for(byte Z = 0; Z < LEDs; Z++) {
					/* shift front, right, back, left */
					for(int8_t Y = Circle; Y < LEDs-1-Circle; Y++) pCube->writeVoxelFast(Circle, Y, Z, pCube->getVoxelFast(Circle, Y+1, Z));
     d44:	87 e0       	ldi	r24, 0x07	; 7
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	5c 01       	movw	r10, r24
     d4a:	ac 18       	sub	r10, r12
     d4c:	bd 08       	sbc	r11, r13
     d4e:	3e 2c       	mov	r3, r14
     d50:	41 2e       	mov	r4, r17
     d52:	41 2f       	mov	r20, r17
     d54:	84 2f       	mov	r24, r20
     d56:	04 2e       	mov	r0, r20
     d58:	00 0c       	add	r0, r0
     d5a:	99 0b       	sbc	r25, r25
     d5c:	8a 15       	cp	r24, r10
     d5e:	9b 05       	cpc	r25, r11
     d60:	04 f5       	brge	.+64     	; 0xda2 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0xba>
     d62:	22 24       	eor	r2, r2
     d64:	23 94       	inc	r2
     d66:	24 0e       	add	r2, r20
     d68:	e8 81       	ld	r30, Y
     d6a:	f9 81       	ldd	r31, Y+1	; 0x01
     d6c:	a2 81       	ldd	r26, Z+2	; 0x02
     d6e:	b3 81       	ldd	r27, Z+3	; 0x03
     d70:	88 e0       	ldi	r24, 0x08	; 8
     d72:	28 9e       	mul	r2, r24
     d74:	a0 0d       	add	r26, r0
     d76:	b1 1d       	adc	r27, r1
     d78:	11 24       	eor	r1, r1
     d7a:	ae 0d       	add	r26, r14
     d7c:	bf 1d       	adc	r27, r15
     d7e:	8c 91       	ld	r24, X
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	01 2e       	mov	r0, r17
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0xa2>
     d86:	95 95       	asr	r25
     d88:	87 95       	ror	r24
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x9e>
     d8e:	08 2f       	mov	r16, r24
     d90:	01 70       	andi	r16, 0x01	; 1
     d92:	23 2d       	mov	r18, r3
     d94:	61 2f       	mov	r22, r17
     d96:	84 81       	ldd	r24, Z+4	; 0x04
     d98:	95 81       	ldd	r25, Z+5	; 0x05
     d9a:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
     d9e:	42 2d       	mov	r20, r2
     da0:	d9 cf       	rjmp	.-78     	; 0xd54 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x6c>
					for(int8_t X = Circle; X < LEDs-1-Circle; X++) pCube->writeVoxelFast(X, LEDs-1-Circle, Z, pCube->getVoxelFast(X+1, LEDs-1-Circle, Z));
     da2:	84 2d       	mov	r24, r4
     da4:	04 2c       	mov	r0, r4
     da6:	00 0c       	add	r0, r0
     da8:	99 0b       	sbc	r25, r25
     daa:	8a 15       	cp	r24, r10
     dac:	9b 05       	cpc	r25, r11
     dae:	f4 f4       	brge	.+60     	; 0xdec <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x104>
     db0:	22 24       	eor	r2, r2
     db2:	23 94       	inc	r2
     db4:	24 0c       	add	r2, r4
     db6:	e8 81       	ld	r30, Y
     db8:	f9 81       	ldd	r31, Y+1	; 0x01
     dba:	a2 81       	ldd	r26, Z+2	; 0x02
     dbc:	b3 81       	ldd	r27, Z+3	; 0x03
     dbe:	a6 0d       	add	r26, r6
     dc0:	b7 1d       	adc	r27, r7
     dc2:	ae 0d       	add	r26, r14
     dc4:	bf 1d       	adc	r27, r15
     dc6:	8c 91       	ld	r24, X
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2c       	mov	r0, r2
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0xea>
     dce:	95 95       	asr	r25
     dd0:	87 95       	ror	r24
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0xe6>
     dd6:	08 2f       	mov	r16, r24
     dd8:	01 70       	andi	r16, 0x01	; 1
     dda:	23 2d       	mov	r18, r3
     ddc:	45 2d       	mov	r20, r5
     dde:	64 2d       	mov	r22, r4
     de0:	84 81       	ldd	r24, Z+4	; 0x04
     de2:	95 81       	ldd	r25, Z+5	; 0x05
     de4:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
     de8:	42 2c       	mov	r4, r2
     dea:	db cf       	rjmp	.-74     	; 0xda2 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0xba>
					for(int8_t Y = LEDs-1-Circle; Y > Circle; Y--) pCube->writeVoxelFast(LEDs-1-Circle, Y, Z, pCube->getVoxelFast(LEDs-1-Circle, Y-1, Z));
     dec:	45 2c       	mov	r4, r5
     dee:	45 2d       	mov	r20, r5
     df0:	84 2f       	mov	r24, r20
     df2:	04 2e       	mov	r0, r20
     df4:	00 0c       	add	r0, r0
     df6:	99 0b       	sbc	r25, r25
     df8:	c8 16       	cp	r12, r24
     dfa:	d9 06       	cpc	r13, r25
     dfc:	04 f5       	brge	.+64     	; 0xe3e <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x156>
     dfe:	22 24       	eor	r2, r2
     e00:	2a 94       	dec	r2
     e02:	24 0e       	add	r2, r20
     e04:	e8 81       	ld	r30, Y
     e06:	f9 81       	ldd	r31, Y+1	; 0x01
     e08:	a2 81       	ldd	r26, Z+2	; 0x02
     e0a:	b3 81       	ldd	r27, Z+3	; 0x03
     e0c:	88 e0       	ldi	r24, 0x08	; 8
     e0e:	28 9e       	mul	r2, r24
     e10:	a0 0d       	add	r26, r0
     e12:	b1 1d       	adc	r27, r1
     e14:	11 24       	eor	r1, r1
     e16:	ae 0d       	add	r26, r14
     e18:	bf 1d       	adc	r27, r15
     e1a:	8c 91       	ld	r24, X
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	05 2c       	mov	r0, r5
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x13e>
     e22:	95 95       	asr	r25
     e24:	87 95       	ror	r24
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x13a>
     e2a:	08 2f       	mov	r16, r24
     e2c:	01 70       	andi	r16, 0x01	; 1
     e2e:	23 2d       	mov	r18, r3
     e30:	65 2d       	mov	r22, r5
     e32:	84 81       	ldd	r24, Z+4	; 0x04
     e34:	95 81       	ldd	r25, Z+5	; 0x05
     e36:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
     e3a:	42 2d       	mov	r20, r2
     e3c:	d9 cf       	rjmp	.-78     	; 0xdf0 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x108>
					for(int8_t X = LEDs-1-Circle; X > Circle; X--) pCube->writeVoxelFast(X, Circle, Z, pCube->getVoxelFast(X-1, Circle, Z));
     e3e:	84 2d       	mov	r24, r4
     e40:	04 2c       	mov	r0, r4
     e42:	00 0c       	add	r0, r0
     e44:	99 0b       	sbc	r25, r25
     e46:	c8 16       	cp	r12, r24
     e48:	d9 06       	cpc	r13, r25
     e4a:	f4 f4       	brge	.+60     	; 0xe88 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1a0>
     e4c:	22 24       	eor	r2, r2
     e4e:	2a 94       	dec	r2
     e50:	24 0c       	add	r2, r4
     e52:	e8 81       	ld	r30, Y
     e54:	f9 81       	ldd	r31, Y+1	; 0x01
     e56:	a2 81       	ldd	r26, Z+2	; 0x02
     e58:	b3 81       	ldd	r27, Z+3	; 0x03
     e5a:	a8 0d       	add	r26, r8
     e5c:	b9 1d       	adc	r27, r9
     e5e:	ae 0d       	add	r26, r14
     e60:	bf 1d       	adc	r27, r15
     e62:	8c 91       	ld	r24, X
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2c       	mov	r0, r2
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x186>
     e6a:	95 95       	asr	r25
     e6c:	87 95       	ror	r24
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x182>
     e72:	08 2f       	mov	r16, r24
     e74:	01 70       	andi	r16, 0x01	; 1
     e76:	23 2d       	mov	r18, r3
     e78:	41 2f       	mov	r20, r17
     e7a:	64 2d       	mov	r22, r4
     e7c:	84 81       	ldd	r24, Z+4	; 0x04
     e7e:	95 81       	ldd	r25, Z+5	; 0x05
     e80:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
     e84:	42 2c       	mov	r4, r2
     e86:	db cf       	rjmp	.-74     	; 0xe3e <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x156>
     e88:	8f ef       	ldi	r24, 0xFF	; 255
     e8a:	e8 1a       	sub	r14, r24
     e8c:	f8 0a       	sbc	r15, r24

	if(Circle > 0 && Circle <= LEDs / 2) {
		Circle--;
		if(TRANSFORMATION_ROTATION_CLOCKWISE == Direction) {
			if(LEDCUBE_AXIS_Z == ShiftAxis) {
				for(byte Z = 0; Z < LEDs; Z++) {
     e8e:	88 e0       	ldi	r24, 0x08	; 8
     e90:	e8 16       	cp	r14, r24
     e92:	f1 04       	cpc	r15, r1
     e94:	09 f0       	breq	.+2      	; 0xe98 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1b0>
     e96:	5b cf       	rjmp	.-330    	; 0xd4e <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x66>
     e98:	c4 c0       	rjmp	.+392    	; 0x1022 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x33a>
					for(int8_t Y = LEDs-1-Circle; Y > Circle; Y--) pCube->writeVoxelFast(LEDs-1-Circle, Y, Z, pCube->getVoxelFast(LEDs-1-Circle, Y-1, Z));
					for(int8_t X = LEDs-1-Circle; X > Circle; X--) pCube->writeVoxelFast(X, Circle, Z, pCube->getVoxelFast(X-1, Circle, Z));
				}
			}
		}
		if(TRANSFORMATION_ROTATION_COUNTERCLOCKWISE == Direction) {
     e9a:	41 30       	cpi	r20, 0x01	; 1
     e9c:	09 f0       	breq	.+2      	; 0xea0 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1b8>
     e9e:	c1 c0       	rjmp	.+386    	; 0x1022 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x33a>
			if(LEDCUBE_AXIS_Z == ShiftAxis) {
     ea0:	62 30       	cpi	r22, 0x02	; 2
     ea2:	09 f0       	breq	.+2      	; 0xea6 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1be>
     ea4:	be c0       	rjmp	.+380    	; 0x1022 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x33a>
     ea6:	c1 2e       	mov	r12, r17
     ea8:	d1 2c       	mov	r13, r1
     eaa:	36 01       	movw	r6, r12
     eac:	83 e0       	ldi	r24, 0x03	; 3
     eae:	66 0c       	add	r6, r6
     eb0:	77 1c       	adc	r7, r7
     eb2:	8a 95       	dec	r24
     eb4:	e1 f7       	brne	.-8      	; 0xeae <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1c6>
				for(byte Z = 0; Z < LEDs; Z++) {
					/* shift left, back, right, front */
					for(int8_t X = Circle; X < LEDs-1-Circle; X++) pCube->writeVoxelFast(X, Circle, Z, pCube->getVoxelFast(X+1, Circle, Z));
					for(int8_t Y = Circle; Y < LEDs-1-Circle; Y++) pCube->writeVoxelFast(LEDs-1-Circle, Y, Z, pCube->getVoxelFast(LEDs-1-Circle, Y+1, Z));
					for(int8_t X = LEDs-1-Circle; X > Circle; X--) pCube->writeVoxelFast(X, LEDs-1-Circle, Z, pCube->getVoxelFast(X-1, LEDs-1-Circle, Z));
     eb6:	87 e0       	ldi	r24, 0x07	; 7
     eb8:	58 2e       	mov	r5, r24
     eba:	51 1a       	sub	r5, r17
     ebc:	88 e0       	ldi	r24, 0x08	; 8
     ebe:	58 9e       	mul	r5, r24
     ec0:	40 01       	movw	r8, r0
     ec2:	11 24       	eor	r1, r1
     ec4:	e1 2c       	mov	r14, r1
     ec6:	f1 2c       	mov	r15, r1
		}
		if(TRANSFORMATION_ROTATION_COUNTERCLOCKWISE == Direction) {
			if(LEDCUBE_AXIS_Z == ShiftAxis) {
				for(byte Z = 0; Z < LEDs; Z++) {
					/* shift left, back, right, front */
					for(int8_t X = Circle; X < LEDs-1-Circle; X++) pCube->writeVoxelFast(X, Circle, Z, pCube->getVoxelFast(X+1, Circle, Z));
     ec8:	87 e0       	ldi	r24, 0x07	; 7
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	5c 01       	movw	r10, r24
     ece:	ac 18       	sub	r10, r12
     ed0:	bd 08       	sbc	r11, r13
     ed2:	3e 2c       	mov	r3, r14
     ed4:	41 2e       	mov	r4, r17
     ed6:	61 2f       	mov	r22, r17
     ed8:	86 2f       	mov	r24, r22
     eda:	06 2e       	mov	r0, r22
     edc:	00 0c       	add	r0, r0
     ede:	99 0b       	sbc	r25, r25
     ee0:	8a 15       	cp	r24, r10
     ee2:	9b 05       	cpc	r25, r11
     ee4:	ec f4       	brge	.+58     	; 0xf20 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x238>
     ee6:	22 24       	eor	r2, r2
     ee8:	23 94       	inc	r2
     eea:	26 0e       	add	r2, r22
     eec:	e8 81       	ld	r30, Y
     eee:	f9 81       	ldd	r31, Y+1	; 0x01
     ef0:	a2 81       	ldd	r26, Z+2	; 0x02
     ef2:	b3 81       	ldd	r27, Z+3	; 0x03
     ef4:	a6 0d       	add	r26, r6
     ef6:	b7 1d       	adc	r27, r7
     ef8:	ae 0d       	add	r26, r14
     efa:	bf 1d       	adc	r27, r15
     efc:	8c 91       	ld	r24, X
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2c       	mov	r0, r2
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x220>
     f04:	95 95       	asr	r25
     f06:	87 95       	ror	r24
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x21c>
     f0c:	08 2f       	mov	r16, r24
     f0e:	01 70       	andi	r16, 0x01	; 1
     f10:	23 2d       	mov	r18, r3
     f12:	41 2f       	mov	r20, r17
     f14:	84 81       	ldd	r24, Z+4	; 0x04
     f16:	95 81       	ldd	r25, Z+5	; 0x05
     f18:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
     f1c:	62 2d       	mov	r22, r2
     f1e:	dc cf       	rjmp	.-72     	; 0xed8 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1f0>
					for(int8_t Y = Circle; Y < LEDs-1-Circle; Y++) pCube->writeVoxelFast(LEDs-1-Circle, Y, Z, pCube->getVoxelFast(LEDs-1-Circle, Y+1, Z));
     f20:	84 2d       	mov	r24, r4
     f22:	04 2c       	mov	r0, r4
     f24:	00 0c       	add	r0, r0
     f26:	99 0b       	sbc	r25, r25
     f28:	8a 15       	cp	r24, r10
     f2a:	9b 05       	cpc	r25, r11
     f2c:	0c f5       	brge	.+66     	; 0xf70 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x288>
     f2e:	22 24       	eor	r2, r2
     f30:	23 94       	inc	r2
     f32:	24 0c       	add	r2, r4
     f34:	e8 81       	ld	r30, Y
     f36:	f9 81       	ldd	r31, Y+1	; 0x01
     f38:	a2 81       	ldd	r26, Z+2	; 0x02
     f3a:	b3 81       	ldd	r27, Z+3	; 0x03
     f3c:	88 e0       	ldi	r24, 0x08	; 8
     f3e:	28 9e       	mul	r2, r24
     f40:	a0 0d       	add	r26, r0
     f42:	b1 1d       	adc	r27, r1
     f44:	11 24       	eor	r1, r1
     f46:	ae 0d       	add	r26, r14
     f48:	bf 1d       	adc	r27, r15
     f4a:	8c 91       	ld	r24, X
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	05 2c       	mov	r0, r5
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x26e>
     f52:	95 95       	asr	r25
     f54:	87 95       	ror	r24
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x26a>
     f5a:	08 2f       	mov	r16, r24
     f5c:	01 70       	andi	r16, 0x01	; 1
     f5e:	23 2d       	mov	r18, r3
     f60:	44 2d       	mov	r20, r4
     f62:	65 2d       	mov	r22, r5
     f64:	84 81       	ldd	r24, Z+4	; 0x04
     f66:	95 81       	ldd	r25, Z+5	; 0x05
     f68:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
     f6c:	42 2c       	mov	r4, r2
     f6e:	d8 cf       	rjmp	.-80     	; 0xf20 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x238>
					for(int8_t X = LEDs-1-Circle; X > Circle; X--) pCube->writeVoxelFast(X, LEDs-1-Circle, Z, pCube->getVoxelFast(X-1, LEDs-1-Circle, Z));
     f70:	45 2c       	mov	r4, r5
     f72:	65 2d       	mov	r22, r5
     f74:	86 2f       	mov	r24, r22
     f76:	06 2e       	mov	r0, r22
     f78:	00 0c       	add	r0, r0
     f7a:	99 0b       	sbc	r25, r25
     f7c:	c8 16       	cp	r12, r24
     f7e:	d9 06       	cpc	r13, r25
     f80:	ec f4       	brge	.+58     	; 0xfbc <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x2d4>
     f82:	22 24       	eor	r2, r2
     f84:	2a 94       	dec	r2
     f86:	26 0e       	add	r2, r22
     f88:	e8 81       	ld	r30, Y
     f8a:	f9 81       	ldd	r31, Y+1	; 0x01
     f8c:	a2 81       	ldd	r26, Z+2	; 0x02
     f8e:	b3 81       	ldd	r27, Z+3	; 0x03
     f90:	a8 0d       	add	r26, r8
     f92:	b9 1d       	adc	r27, r9
     f94:	ae 0d       	add	r26, r14
     f96:	bf 1d       	adc	r27, r15
     f98:	8c 91       	ld	r24, X
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2c       	mov	r0, r2
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x2bc>
     fa0:	95 95       	asr	r25
     fa2:	87 95       	ror	r24
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x2b8>
     fa8:	08 2f       	mov	r16, r24
     faa:	01 70       	andi	r16, 0x01	; 1
     fac:	23 2d       	mov	r18, r3
     fae:	45 2d       	mov	r20, r5
     fb0:	84 81       	ldd	r24, Z+4	; 0x04
     fb2:	95 81       	ldd	r25, Z+5	; 0x05
     fb4:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
     fb8:	62 2d       	mov	r22, r2
     fba:	dc cf       	rjmp	.-72     	; 0xf74 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x28c>
					for(int8_t Y = LEDs-1-Circle; Y > Circle; Y--) pCube->writeVoxelFast(Circle, Y, Z, pCube->getVoxelFast(Circle, Y-1, Z));
     fbc:	84 2d       	mov	r24, r4
     fbe:	04 2c       	mov	r0, r4
     fc0:	00 0c       	add	r0, r0
     fc2:	99 0b       	sbc	r25, r25
     fc4:	c8 16       	cp	r12, r24
     fc6:	d9 06       	cpc	r13, r25
     fc8:	0c f5       	brge	.+66     	; 0x100c <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x324>
     fca:	22 24       	eor	r2, r2
     fcc:	2a 94       	dec	r2
     fce:	24 0c       	add	r2, r4
     fd0:	e8 81       	ld	r30, Y
     fd2:	f9 81       	ldd	r31, Y+1	; 0x01
     fd4:	a2 81       	ldd	r26, Z+2	; 0x02
     fd6:	b3 81       	ldd	r27, Z+3	; 0x03
     fd8:	88 e0       	ldi	r24, 0x08	; 8
     fda:	28 9e       	mul	r2, r24
     fdc:	a0 0d       	add	r26, r0
     fde:	b1 1d       	adc	r27, r1
     fe0:	11 24       	eor	r1, r1
     fe2:	ae 0d       	add	r26, r14
     fe4:	bf 1d       	adc	r27, r15
     fe6:	8c 91       	ld	r24, X
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0c 2c       	mov	r0, r12
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x30a>
     fee:	95 95       	asr	r25
     ff0:	87 95       	ror	r24
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x306>
     ff6:	08 2f       	mov	r16, r24
     ff8:	01 70       	andi	r16, 0x01	; 1
     ffa:	23 2d       	mov	r18, r3
     ffc:	44 2d       	mov	r20, r4
     ffe:	61 2f       	mov	r22, r17
    1000:	84 81       	ldd	r24, Z+4	; 0x04
    1002:	95 81       	ldd	r25, Z+5	; 0x05
    1004:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN7LedCube14writeVoxelFastEhhhb.isra.0>
    1008:	42 2c       	mov	r4, r2
    100a:	d8 cf       	rjmp	.-80     	; 0xfbc <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x2d4>
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	e8 1a       	sub	r14, r24
    1010:	f8 0a       	sbc	r15, r24
				}
			}
		}
		if(TRANSFORMATION_ROTATION_COUNTERCLOCKWISE == Direction) {
			if(LEDCUBE_AXIS_Z == ShiftAxis) {
				for(byte Z = 0; Z < LEDs; Z++) {
    1012:	88 e0       	ldi	r24, 0x08	; 8
    1014:	e8 16       	cp	r14, r24
    1016:	f1 04       	cpc	r15, r1
    1018:	09 f0       	breq	.+2      	; 0x101c <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x334>
    101a:	5b cf       	rjmp	.-330    	; 0xed2 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x1ea>
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x33a>
			}
		}
		return E_OK;
	} 
	else { 
		return E_NOT_OK;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <_ZN14Transformation11shiftCircleE15LedCubeAxisType35TransformationRotationDirectionTypeh+0x33c>
					for(int8_t X = LEDs-1-Circle; X > Circle; X--) pCube->writeVoxelFast(X, LEDs-1-Circle, Z, pCube->getVoxelFast(X-1, LEDs-1-Circle, Z));
					for(int8_t Y = LEDs-1-Circle; Y > Circle; Y--) pCube->writeVoxelFast(Circle, Y, Z, pCube->getVoxelFast(Circle, Y-1, Z));
				}
			}
		}
		return E_OK;
    1022:	80 e0       	ldi	r24, 0x00	; 0
	} 
	else { 
		return E_NOT_OK;
	}
} /* shiftCircle */
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	df 90       	pop	r13
    1032:	cf 90       	pop	r12
    1034:	bf 90       	pop	r11
    1036:	af 90       	pop	r10
    1038:	9f 90       	pop	r9
    103a:	8f 90       	pop	r8
    103c:	7f 90       	pop	r7
    103e:	6f 90       	pop	r6
    1040:	5f 90       	pop	r5
    1042:	4f 90       	pop	r4
    1044:	3f 90       	pop	r3
    1046:	2f 90       	pop	r2
    1048:	08 95       	ret

0000104a <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    104a:	08 95       	ret

0000104c <main>:

int main(void)
{
	init();
    104c:	0e 94 cc 08 	call	0x1198	; 0x1198 <init>

	initVariant();
    1050:	0e 94 25 08 	call	0x104a	; 0x104a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1054:	0e 94 ee 04 	call	0x9dc	; 0x9dc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1058:	c0 e0       	ldi	r28, 0x00	; 0
    105a:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    105c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <loop>
		if (serialEventRun) serialEventRun();
    1060:	20 97       	sbiw	r28, 0x00	; 0
    1062:	e1 f3       	breq	.-8      	; 0x105c <main+0x10>
    1064:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1068:	f9 cf       	rjmp	.-14     	; 0x105c <main+0x10>

0000106a <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
    1074:	2f 93       	push	r18
    1076:	3f 93       	push	r19
    1078:	8f 93       	push	r24
    107a:	9f 93       	push	r25
    107c:	af 93       	push	r26
    107e:	bf 93       	push	r27
    1080:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timer0_millis>
    1084:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timer0_millis+0x1>
    1088:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <timer0_millis+0x2>
    108c:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <timer0_millis+0x3>
    1090:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <timer0_fract>
    1094:	23 e0       	ldi	r18, 0x03	; 3
    1096:	23 0f       	add	r18, r19
    1098:	2d 37       	cpi	r18, 0x7D	; 125
    109a:	20 f4       	brcc	.+8      	; 0x10a4 <__vector_16+0x3a>
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	a1 1d       	adc	r26, r1
    10a0:	b1 1d       	adc	r27, r1
    10a2:	05 c0       	rjmp	.+10     	; 0x10ae <__vector_16+0x44>
    10a4:	26 e8       	ldi	r18, 0x86	; 134
    10a6:	23 0f       	add	r18, r19
    10a8:	02 96       	adiw	r24, 0x02	; 2
    10aa:	a1 1d       	adc	r26, r1
    10ac:	b1 1d       	adc	r27, r1
    10ae:	20 93 8d 01 	sts	0x018D, r18	; 0x80018d <timer0_fract>
    10b2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timer0_millis>
    10b6:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timer0_millis+0x1>
    10ba:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timer0_millis+0x2>
    10be:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timer0_millis+0x3>
    10c2:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <timer0_overflow_count>
    10c6:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <timer0_overflow_count+0x1>
    10ca:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <timer0_overflow_count+0x2>
    10ce:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <timer0_overflow_count+0x3>
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	a1 1d       	adc	r26, r1
    10d6:	b1 1d       	adc	r27, r1
    10d8:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <timer0_overflow_count>
    10dc:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <timer0_overflow_count+0x1>
    10e0:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <timer0_overflow_count+0x2>
    10e4:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <timer0_overflow_count+0x3>
    10e8:	bf 91       	pop	r27
    10ea:	af 91       	pop	r26
    10ec:	9f 91       	pop	r25
    10ee:	8f 91       	pop	r24
    10f0:	3f 91       	pop	r19
    10f2:	2f 91       	pop	r18
    10f4:	0f 90       	pop	r0
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	0f 90       	pop	r0
    10fa:	1f 90       	pop	r1
    10fc:	18 95       	reti

000010fe <micros>:
    10fe:	3f b7       	in	r19, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <timer0_overflow_count>
    1106:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <timer0_overflow_count+0x1>
    110a:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <timer0_overflow_count+0x2>
    110e:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <timer0_overflow_count+0x3>
    1112:	26 b5       	in	r18, 0x26	; 38
    1114:	a8 9b       	sbis	0x15, 0	; 21
    1116:	05 c0       	rjmp	.+10     	; 0x1122 <micros+0x24>
    1118:	2f 3f       	cpi	r18, 0xFF	; 255
    111a:	19 f0       	breq	.+6      	; 0x1122 <micros+0x24>
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	a1 1d       	adc	r26, r1
    1120:	b1 1d       	adc	r27, r1
    1122:	3f bf       	out	0x3f, r19	; 63
    1124:	ba 2f       	mov	r27, r26
    1126:	a9 2f       	mov	r26, r25
    1128:	98 2f       	mov	r25, r24
    112a:	88 27       	eor	r24, r24
    112c:	82 0f       	add	r24, r18
    112e:	91 1d       	adc	r25, r1
    1130:	a1 1d       	adc	r26, r1
    1132:	b1 1d       	adc	r27, r1
    1134:	bc 01       	movw	r22, r24
    1136:	cd 01       	movw	r24, r26
    1138:	42 e0       	ldi	r20, 0x02	; 2
    113a:	66 0f       	add	r22, r22
    113c:	77 1f       	adc	r23, r23
    113e:	88 1f       	adc	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	4a 95       	dec	r20
    1144:	d1 f7       	brne	.-12     	; 0x113a <micros+0x3c>
    1146:	08 95       	ret

00001148 <delay>:
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	6b 01       	movw	r12, r22
    1156:	7c 01       	movw	r14, r24
    1158:	0e 94 7f 08 	call	0x10fe	; 0x10fe <micros>
    115c:	eb 01       	movw	r28, r22
    115e:	c1 14       	cp	r12, r1
    1160:	d1 04       	cpc	r13, r1
    1162:	e1 04       	cpc	r14, r1
    1164:	f1 04       	cpc	r15, r1
    1166:	89 f0       	breq	.+34     	; 0x118a <delay+0x42>
    1168:	0e 94 9b 09 	call	0x1336	; 0x1336 <yield>
    116c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <micros>
    1170:	6c 1b       	sub	r22, r28
    1172:	7d 0b       	sbc	r23, r29
    1174:	68 3e       	cpi	r22, 0xE8	; 232
    1176:	73 40       	sbci	r23, 0x03	; 3
    1178:	90 f3       	brcs	.-28     	; 0x115e <delay+0x16>
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	c8 1a       	sub	r12, r24
    117e:	d1 08       	sbc	r13, r1
    1180:	e1 08       	sbc	r14, r1
    1182:	f1 08       	sbc	r15, r1
    1184:	c8 51       	subi	r28, 0x18	; 24
    1186:	dc 4f       	sbci	r29, 0xFC	; 252
    1188:	ea cf       	rjmp	.-44     	; 0x115e <delay+0x16>
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	df 90       	pop	r13
    1194:	cf 90       	pop	r12
    1196:	08 95       	ret

00001198 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1198:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    119a:	84 b5       	in	r24, 0x24	; 36
    119c:	82 60       	ori	r24, 0x02	; 2
    119e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    11a0:	84 b5       	in	r24, 0x24	; 36
    11a2:	81 60       	ori	r24, 0x01	; 1
    11a4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    11a6:	85 b5       	in	r24, 0x25	; 37
    11a8:	82 60       	ori	r24, 0x02	; 2
    11aa:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    11ac:	85 b5       	in	r24, 0x25	; 37
    11ae:	81 60       	ori	r24, 0x01	; 1
    11b0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    11b2:	ee e6       	ldi	r30, 0x6E	; 110
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	81 60       	ori	r24, 0x01	; 1
    11ba:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    11bc:	e1 e8       	ldi	r30, 0x81	; 129
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    11c2:	80 81       	ld	r24, Z
    11c4:	82 60       	ori	r24, 0x02	; 2
    11c6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    11c8:	80 81       	ld	r24, Z
    11ca:	81 60       	ori	r24, 0x01	; 1
    11cc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    11ce:	e0 e8       	ldi	r30, 0x80	; 128
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	81 60       	ori	r24, 0x01	; 1
    11d6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    11d8:	e1 eb       	ldi	r30, 0xB1	; 177
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	84 60       	ori	r24, 0x04	; 4
    11e0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    11e2:	e0 eb       	ldi	r30, 0xB0	; 176
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    11ec:	ea e7       	ldi	r30, 0x7A	; 122
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	84 60       	ori	r24, 0x04	; 4
    11f4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    11f6:	80 81       	ld	r24, Z
    11f8:	82 60       	ori	r24, 0x02	; 2
    11fa:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    11fc:	80 81       	ld	r24, Z
    11fe:	81 60       	ori	r24, 0x01	; 1
    1200:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1202:	80 81       	ld	r24, Z
    1204:	80 68       	ori	r24, 0x80	; 128
    1206:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1208:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    120c:	08 95       	ret

0000120e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    120e:	83 30       	cpi	r24, 0x03	; 3
    1210:	81 f0       	breq	.+32     	; 0x1232 <turnOffPWM+0x24>
    1212:	28 f4       	brcc	.+10     	; 0x121e <turnOffPWM+0x10>
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	99 f0       	breq	.+38     	; 0x123e <turnOffPWM+0x30>
    1218:	82 30       	cpi	r24, 0x02	; 2
    121a:	a1 f0       	breq	.+40     	; 0x1244 <turnOffPWM+0x36>
    121c:	08 95       	ret
    121e:	87 30       	cpi	r24, 0x07	; 7
    1220:	a9 f0       	breq	.+42     	; 0x124c <turnOffPWM+0x3e>
    1222:	88 30       	cpi	r24, 0x08	; 8
    1224:	b9 f0       	breq	.+46     	; 0x1254 <turnOffPWM+0x46>
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	d1 f4       	brne	.+52     	; 0x125e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    122a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    122e:	8f 7d       	andi	r24, 0xDF	; 223
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1232:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1236:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1238:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    123c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    123e:	84 b5       	in	r24, 0x24	; 36
    1240:	8f 77       	andi	r24, 0x7F	; 127
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1244:	84 b5       	in	r24, 0x24	; 36
    1246:	8f 7d       	andi	r24, 0xDF	; 223
    1248:	84 bd       	out	0x24, r24	; 36
    124a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    124c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1250:	8f 77       	andi	r24, 0x7F	; 127
    1252:	03 c0       	rjmp	.+6      	; 0x125a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1254:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1258:	8f 7d       	andi	r24, 0xDF	; 223
    125a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    125e:	08 95       	ret

00001260 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	fc 01       	movw	r30, r24
    1268:	e4 58       	subi	r30, 0x84	; 132
    126a:	f7 4f       	sbci	r31, 0xF7	; 247
    126c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    126e:	fc 01       	movw	r30, r24
    1270:	e0 57       	subi	r30, 0x70	; 112
    1272:	f7 4f       	sbci	r31, 0xF7	; 247
    1274:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1276:	88 23       	and	r24, r24
    1278:	61 f1       	breq	.+88     	; 0x12d2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	fc 01       	movw	r30, r24
    1282:	e2 55       	subi	r30, 0x52	; 82
    1284:	f7 4f       	sbci	r31, 0xF7	; 247
    1286:	c5 91       	lpm	r28, Z+
    1288:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    128a:	fc 01       	movw	r30, r24
    128c:	ec 55       	subi	r30, 0x5C	; 92
    128e:	f7 4f       	sbci	r31, 0xF7	; 247
    1290:	a5 91       	lpm	r26, Z+
    1292:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1294:	61 11       	cpse	r22, r1
    1296:	09 c0       	rjmp	.+18     	; 0x12aa <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1298:	9f b7       	in	r25, 0x3f	; 63
                cli();
    129a:	f8 94       	cli
		*reg &= ~bit;
    129c:	88 81       	ld	r24, Y
    129e:	20 95       	com	r18
    12a0:	82 23       	and	r24, r18
    12a2:	88 83       	st	Y, r24
		*out &= ~bit;
    12a4:	ec 91       	ld	r30, X
    12a6:	2e 23       	and	r18, r30
    12a8:	0b c0       	rjmp	.+22     	; 0x12c0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    12aa:	62 30       	cpi	r22, 0x02	; 2
    12ac:	61 f4       	brne	.+24     	; 0x12c6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    12ae:	9f b7       	in	r25, 0x3f	; 63
                cli();
    12b0:	f8 94       	cli
		*reg &= ~bit;
    12b2:	88 81       	ld	r24, Y
    12b4:	32 2f       	mov	r19, r18
    12b6:	30 95       	com	r19
    12b8:	83 23       	and	r24, r19
    12ba:	88 83       	st	Y, r24
		*out |= bit;
    12bc:	ec 91       	ld	r30, X
    12be:	2e 2b       	or	r18, r30
    12c0:	2c 93       	st	X, r18
		SREG = oldSREG;
    12c2:	9f bf       	out	0x3f, r25	; 63
    12c4:	06 c0       	rjmp	.+12     	; 0x12d2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    12c6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    12c8:	f8 94       	cli
		*reg |= bit;
    12ca:	e8 81       	ld	r30, Y
    12cc:	2e 2b       	or	r18, r30
    12ce:	28 83       	st	Y, r18
		SREG = oldSREG;
    12d0:	8f bf       	out	0x3f, r24	; 63
	}
}
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	08 95       	ret

000012d8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	f9 01       	movw	r30, r18
    12e4:	e8 59       	subi	r30, 0x98	; 152
    12e6:	f7 4f       	sbci	r31, 0xF7	; 247
    12e8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    12ea:	f9 01       	movw	r30, r18
    12ec:	e4 58       	subi	r30, 0x84	; 132
    12ee:	f7 4f       	sbci	r31, 0xF7	; 247
    12f0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    12f2:	f9 01       	movw	r30, r18
    12f4:	e0 57       	subi	r30, 0x70	; 112
    12f6:	f7 4f       	sbci	r31, 0xF7	; 247
    12f8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    12fa:	cc 23       	and	r28, r28
    12fc:	c1 f0       	breq	.+48     	; 0x132e <digitalWrite+0x56>
    12fe:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1300:	81 11       	cpse	r24, r1
    1302:	0e 94 07 09 	call	0x120e	; 0x120e <turnOffPWM>

	out = portOutputRegister(port);
    1306:	ec 2f       	mov	r30, r28
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	ee 0f       	add	r30, r30
    130c:	ff 1f       	adc	r31, r31
    130e:	ec 55       	subi	r30, 0x5C	; 92
    1310:	f7 4f       	sbci	r31, 0xF7	; 247
    1312:	a5 91       	lpm	r26, Z+
    1314:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1316:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1318:	f8 94       	cli

	if (val == LOW) {
    131a:	11 11       	cpse	r17, r1
    131c:	04 c0       	rjmp	.+8      	; 0x1326 <digitalWrite+0x4e>
		*out &= ~bit;
    131e:	8c 91       	ld	r24, X
    1320:	d0 95       	com	r29
    1322:	d8 23       	and	r29, r24
    1324:	02 c0       	rjmp	.+4      	; 0x132a <digitalWrite+0x52>
	} else {
		*out |= bit;
    1326:	ec 91       	ld	r30, X
    1328:	de 2b       	or	r29, r30
    132a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    132c:	9f bf       	out	0x3f, r25	; 63
}
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	08 95       	ret

00001336 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1336:	08 95       	ret

00001338 <__tablejump2__>:
    1338:	ee 0f       	add	r30, r30
    133a:	ff 1f       	adc	r31, r31
    133c:	05 90       	lpm	r0, Z+
    133e:	f4 91       	lpm	r31, Z
    1340:	e0 2d       	mov	r30, r0
    1342:	09 94       	ijmp

00001344 <__do_global_dtors>:
    1344:	14 e0       	ldi	r17, 0x04	; 4
    1346:	cd e5       	ldi	r28, 0x5D	; 93
    1348:	d4 e0       	ldi	r29, 0x04	; 4
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <__do_global_dtors+0x10>
    134c:	fe 01       	movw	r30, r28
    134e:	0e 94 9c 09 	call	0x1338	; 0x1338 <__tablejump2__>
    1352:	21 96       	adiw	r28, 0x01	; 1
    1354:	ce 35       	cpi	r28, 0x5E	; 94
    1356:	d1 07       	cpc	r29, r17
    1358:	c9 f7       	brne	.-14     	; 0x134c <__do_global_dtors+0x8>
    135a:	f8 94       	cli

0000135c <__stop_program>:
    135c:	ff cf       	rjmp	.-2      	; 0x135c <__stop_program>
>>>>>>> ...
