
LedCube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000091  00800100  00800100  000006e0  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000740  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f9e  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f0  00000000  00000000  000028c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d75  00000000  00000000  000031b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  00003f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a42  00000000  00000000  000042ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010e6  00000000  00000000  00004cee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00005dd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__dtors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_16>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	b8 00       	.word	0x00b8	; ????

000000ba <__ctors_end>:
  ba:	bc 00       	.word	0x00bc	; ????

000000bc <__dtors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d8 e0       	ldi	r29, 0x08	; 8
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a1 39       	cpi	r26, 0x91	; 145
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>

000000d8 <__do_global_ctors>:
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	cd e5       	ldi	r28, 0x5D	; 93
  dc:	d0 e0       	ldi	r29, 0x00	; 0
  de:	04 c0       	rjmp	.+8      	; 0xe8 <__do_global_ctors+0x10>
  e0:	21 97       	sbiw	r28, 0x01	; 1
  e2:	fe 01       	movw	r30, r28
  e4:	0e 94 23 03 	call	0x646	; 0x646 <__tablejump2__>
  e8:	cc 35       	cpi	r28, 0x5C	; 92
  ea:	d1 07       	cpc	r29, r17
  ec:	c9 f7       	brne	.-14     	; 0xe0 <__do_global_ctors+0x8>
  ee:	0e 94 ac 01 	call	0x358	; 0x358 <main>
  f2:	0c 94 29 03 	jmp	0x652	; 0x652 <__do_global_dtors>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <setup>:
#define SCK_74 11  // clock input

LedCube Cube;


void setup() {
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	Cube.init();
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7LedCube4initEv>
	pinMode(7, OUTPUT);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	87 e0       	ldi	r24, 0x07	; 7
 10c:	0e 94 b6 02 	call	0x56c	; 0x56c <pinMode>
	for(byte x = 0; x<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; x++) {
 110:	d0 e0       	ldi	r29, 0x00	; 0
#define SCK_74 11  // clock input

LedCube Cube;


void setup() {
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	10 e0       	ldi	r17, 0x00	; 0
	Cube.init();
	pinMode(7, OUTPUT);
	for(byte x = 0; x<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; x++) {
		for(byte y = 0; y<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; y++) {
			for(byte z = 0; z<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; z++) {
				Cube.setVoxel(x, y, z);
 116:	21 2f       	mov	r18, r17
 118:	4c 2f       	mov	r20, r28
 11a:	6d 2f       	mov	r22, r29
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN7LedCube8setVoxelEhhh>
void setup() {
	Cube.init();
	pinMode(7, OUTPUT);
	for(byte x = 0; x<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; x++) {
		for(byte y = 0; y<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; y++) {
			for(byte z = 0; z<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; z++) {
 124:	1f 5f       	subi	r17, 0xFF	; 255
 126:	18 30       	cpi	r17, 0x08	; 8
 128:	b1 f7       	brne	.-20     	; 0x116 <setup+0x1c>

void setup() {
	Cube.init();
	pinMode(7, OUTPUT);
	for(byte x = 0; x<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; x++) {
		for(byte y = 0; y<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; y++) {
 12a:	cf 5f       	subi	r28, 0xFF	; 255
 12c:	c8 30       	cpi	r28, 0x08	; 8
 12e:	91 f7       	brne	.-28     	; 0x114 <setup+0x1a>


void setup() {
	Cube.init();
	pinMode(7, OUTPUT);
	for(byte x = 0; x<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; x++) {
 130:	df 5f       	subi	r29, 0xFF	; 255
 132:	d8 30       	cpi	r29, 0x08	; 8
 134:	71 f7       	brne	.-36     	; 0x112 <setup+0x18>
			for(byte z = 0; z<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; z++) {
				Cube.setVoxel(x, y, z);
			}
		}
	}
	Cube.setNextFrameReady();
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN7LedCube17setNextFrameReadyEv>
	Cube.setNextFrameTimeElapsed();
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	91 e0       	ldi	r25, 0x01	; 1
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
				Cube.setVoxel(x, y, z);
			}
		}
	}
	Cube.setNextFrameReady();
	Cube.setNextFrameTimeElapsed();
 148:	0c 94 2a 01 	jmp	0x254	; 0x254 <_ZN7LedCube23setNextFrameTimeElapsedEv>

0000014c <loop>:
}

void loop()
{
	delay(500);
 14c:	64 ef       	ldi	r22, 0xF4	; 244
 14e:	71 e0       	ldi	r23, 0x01	; 1
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 2a 02 	call	0x454	; 0x454 <delay>
	digitalWrite(7, STD_ON);
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	87 e0       	ldi	r24, 0x07	; 7
 15c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <digitalWrite>
	Cube.task();
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 80 01 	call	0x300	; 0x300 <_ZN7LedCube4taskEv>
	digitalWrite(7, STD_OFF);
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	87 e0       	ldi	r24, 0x07	; 7
 16c:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <digitalWrite>

00000170 <_GLOBAL__sub_I_Cube>:

#define SER_74 13  // serial input
#define RCK_74 12  // storage input
#define SCK_74 11  // clock input

LedCube Cube;
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0c 94 c0 00 	jmp	0x180	; 0x180 <_ZN7LedCubeC1Ev>

00000178 <_GLOBAL__sub_D_Cube>:
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_ZN7LedCubeD1Ev>

00000180 <_ZN7LedCubeC1Ev>:
        *Value = bitRead(CurrentFrame[Y][Z], X);
        return E_OK;
    } else {
        return E_NOT_OK;
    }
} /* getVoxel */
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	fc 01       	movw	r30, r24
 186:	10 82       	st	Z, r1
 188:	11 82       	std	Z+1, r1	; 0x01
 18a:	dc 01       	movw	r26, r24
 18c:	aa 57       	subi	r26, 0x7A	; 122
 18e:	bf 4f       	sbci	r27, 0xFF	; 255
 190:	1c 92       	st	X, r1
 192:	11 96       	adiw	r26, 0x01	; 1
 194:	1c 92       	st	X, r1
 196:	ec 01       	movw	r28, r24
 198:	26 96       	adiw	r28, 0x06	; 6
 19a:	d3 83       	std	Z+3, r29	; 0x03
 19c:	c2 83       	std	Z+2, r28	; 0x02
 19e:	a1 54       	subi	r26, 0x41	; 65
 1a0:	b1 09       	sbc	r27, r1
 1a2:	b5 83       	std	Z+5, r27	; 0x05
 1a4:	a4 83       	std	Z+4, r26	; 0x04
 1a6:	80 e4       	ldi	r24, 0x40	; 64
 1a8:	fe 01       	movw	r30, r28
 1aa:	98 2f       	mov	r25, r24
 1ac:	11 92       	st	Z+, r1
 1ae:	9a 95       	dec	r25
 1b0:	e9 f7       	brne	.-6      	; 0x1ac <_ZN7LedCubeC1Ev+0x2c>
 1b2:	fd 01       	movw	r30, r26
 1b4:	11 92       	st	Z+, r1
 1b6:	8a 95       	dec	r24
 1b8:	e9 f7       	brne	.-6      	; 0x1b4 <_ZN7LedCubeC1Ev+0x34>
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <_ZN7LedCubeD1Ev>:
 1c0:	08 95       	ret

000001c2 <_ZN7LedCube9clearCubeEv>:
 1c2:	2d 98       	cbi	0x05, 5	; 5
 1c4:	88 e4       	ldi	r24, 0x48	; 72
 1c6:	2b 9a       	sbi	0x05, 3	; 5
 1c8:	2b 98       	cbi	0x05, 3	; 5
 1ca:	81 50       	subi	r24, 0x01	; 1
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <_ZN7LedCube9clearCubeEv+0x4>
 1ce:	2c 9a       	sbi	0x05, 4	; 5
 1d0:	2c 98       	cbi	0x05, 4	; 5
 1d2:	08 95       	ret

000001d4 <_ZN7LedCube4initEv>:
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	ec 01       	movw	r28, r24
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	89 83       	std	Y+1, r24	; 0x01
 1de:	ce 01       	movw	r24, r28
 1e0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN7LedCube9clearCubeEv>
 1e4:	25 9a       	sbi	0x04, 5	; 4
 1e6:	23 9a       	sbi	0x04, 3	; 4
 1e8:	24 9a       	sbi	0x04, 4	; 4
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	89 83       	std	Y+1, r24	; 0x01
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <_ZN7LedCube8setVoxelEhhh>:
 1f4:	68 30       	cpi	r22, 0x08	; 8
 1f6:	00 f5       	brcc	.+64     	; 0x238 <_ZN7LedCube8setVoxelEhhh+0x44>
 1f8:	48 30       	cpi	r20, 0x08	; 8
 1fa:	f0 f4       	brcc	.+60     	; 0x238 <_ZN7LedCube8setVoxelEhhh+0x44>
 1fc:	28 30       	cpi	r18, 0x08	; 8
 1fe:	e0 f4       	brcc	.+56     	; 0x238 <_ZN7LedCube8setVoxelEhhh+0x44>
 200:	dc 01       	movw	r26, r24
 202:	14 96       	adiw	r26, 0x04	; 4
 204:	ed 91       	ld	r30, X+
 206:	fc 91       	ld	r31, X
 208:	15 97       	sbiw	r26, 0x05	; 5
 20a:	b8 e0       	ldi	r27, 0x08	; 8
 20c:	4b 9f       	mul	r20, r27
 20e:	e0 0d       	add	r30, r0
 210:	f1 1d       	adc	r31, r1
 212:	11 24       	eor	r1, r1
 214:	e2 0f       	add	r30, r18
 216:	f1 1d       	adc	r31, r1
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	a0 e0       	ldi	r26, 0x00	; 0
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	04 c0       	rjmp	.+8      	; 0x22a <_ZN7LedCube8setVoxelEhhh+0x36>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	aa 1f       	adc	r26, r26
 228:	bb 1f       	adc	r27, r27
 22a:	6a 95       	dec	r22
 22c:	d2 f7       	brpl	.-12     	; 0x222 <_ZN7LedCube8setVoxelEhhh+0x2e>
 22e:	20 81       	ld	r18, Z
 230:	82 2b       	or	r24, r18
 232:	80 83       	st	Z, r24
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	08 95       	ret

0000023c <_ZN7LedCube17setNextFrameReadyEv>:
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::setNextFrameReady()
{
    if(State == LEDCUBE_STATE_RUNNING) {
 23c:	fc 01       	movw	r30, r24
 23e:	21 81       	ldd	r18, Z+1	; 0x01
 240:	23 30       	cpi	r18, 0x03	; 3
 242:	31 f4       	brne	.+12     	; 0x250 <_ZN7LedCube17setNextFrameReadyEv+0x14>
        NextFrameReady = true;
 244:	ea 57       	subi	r30, 0x7A	; 122
 246:	ff 4f       	sbci	r31, 0xFF	; 255
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 83       	st	Z, r24
        return E_OK;
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	08 95       	ret
    } else {
        return E_NOT_OK;
 250:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 252:	08 95       	ret

00000254 <_ZN7LedCube23setNextFrameTimeElapsedEv>:
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::setNextFrameTimeElapsed()
{
    if(State == LEDCUBE_STATE_RUNNING) {
 254:	fc 01       	movw	r30, r24
 256:	21 81       	ldd	r18, Z+1	; 0x01
 258:	23 30       	cpi	r18, 0x03	; 3
 25a:	31 f4       	brne	.+12     	; 0x268 <_ZN7LedCube23setNextFrameTimeElapsedEv+0x14>
        NextFrameTimeElapsed = true;
 25c:	e9 57       	subi	r30, 0x79	; 121
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 83       	st	Z, r24
        return E_OK;
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	08 95       	ret
    } else {
        return E_NOT_OK;
 268:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 26a:	08 95       	ret

0000026c <_ZN7LedCube8sendDataEh>:
 *
 *  \param[in]      Data    data (Byte) to send
 *  \return         -
 *****************************************************************************************************************************************************/
void LedCube::sendData(byte Data)
{
 26c:	87 e0       	ldi	r24, 0x07	; 7
 26e:	90 e0       	ldi	r25, 0x00	; 0
    for (byte i = 0; i < 8; i++) {
        // LSB First
        //digitalWrite(DataInPin, !!(Data & (1 << i)));
        // MSB First
        digitalWriteFast(LEDCUBE_DATA_IN_PIN, !!(Data & (1 << (7 - i))));
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	9b 01       	movw	r18, r22
 274:	08 2e       	mov	r0, r24
 276:	02 c0       	rjmp	.+4      	; 0x27c <_ZN7LedCube8sendDataEh+0x10>
 278:	35 95       	asr	r19
 27a:	27 95       	ror	r18
 27c:	0a 94       	dec	r0
 27e:	e2 f7       	brpl	.-8      	; 0x278 <_ZN7LedCube8sendDataEh+0xc>
 280:	20 ff       	sbrs	r18, 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <_ZN7LedCube8sendDataEh+0x1c>
 284:	2d 9a       	sbi	0x05, 5	; 5
 286:	01 c0       	rjmp	.+2      	; 0x28a <_ZN7LedCube8sendDataEh+0x1e>
 288:	2d 98       	cbi	0x05, 5	; 5
        // toggle clock pin
        digitalWriteFast(LEDCUBE_CLOCK_PIN, HIGH);
 28a:	2b 9a       	sbi	0x05, 3	; 5
        digitalWriteFast(LEDCUBE_CLOCK_PIN, LOW);
 28c:	2b 98       	cbi	0x05, 3	; 5
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	80 f7       	brcc	.-32     	; 0x272 <_ZN7LedCube8sendDataEh+0x6>
    }
} /* sendData */
 292:	08 95       	ret

00000294 <_ZN7LedCube9showLayerEh>:
 *  \param[in]      Layer       layer which should be shown on the cube
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showLayer(byte Layer)
{
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
    stdReturnType ReturnValue = E_NOT_OK;
    
    if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
 2a0:	68 30       	cpi	r22, 0x08	; 8
 2a2:	30 f5       	brcc	.+76     	; 0x2f0 <_ZN7LedCube9showLayerEh+0x5c>
 2a4:	ec 01       	movw	r28, r24
        /* put on given layer */
        sendData(1 << Layer);
 2a6:	06 2f       	mov	r16, r22
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	9c 01       	movw	r18, r24
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <_ZN7LedCube9showLayerEh+0x22>
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <_ZN7LedCube9showLayerEh+0x1e>
 2ba:	b9 01       	movw	r22, r18
 2bc:	ce 01       	movw	r24, r28
 2be:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN7LedCube8sendDataEh>
 2c2:	e1 2c       	mov	r14, r1
 2c4:	f1 2c       	mov	r15, r1
        /* send the layer data to the shift registers */
        for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
            sendData(CurrentFrame[Y][Layer]);
 2c6:	ea 81       	ldd	r30, Y+2	; 0x02
 2c8:	fb 81       	ldd	r31, Y+3	; 0x03
 2ca:	ee 0d       	add	r30, r14
 2cc:	ff 1d       	adc	r31, r15
 2ce:	e0 0f       	add	r30, r16
 2d0:	f1 1f       	adc	r31, r17
 2d2:	60 81       	ld	r22, Z
 2d4:	ce 01       	movw	r24, r28
 2d6:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN7LedCube8sendDataEh>
 2da:	38 e0       	ldi	r19, 0x08	; 8
 2dc:	e3 0e       	add	r14, r19
 2de:	f1 1c       	adc	r15, r1
    
    if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
        /* put on given layer */
        sendData(1 << Layer);
        /* send the layer data to the shift registers */
        for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
 2e0:	80 e4       	ldi	r24, 0x40	; 64
 2e2:	e8 16       	cp	r14, r24
 2e4:	f1 04       	cpc	r15, r1
 2e6:	79 f7       	brne	.-34     	; 0x2c6 <_ZN7LedCube9showLayerEh+0x32>
            sendData(CurrentFrame[Y][Layer]);
        }
        // toggle storage pin
        digitalWriteFast(LEDCUBE_STORAGE_PIN, HIGH);
 2e8:	2c 9a       	sbi	0x05, 4	; 5
        digitalWriteFast(LEDCUBE_STORAGE_PIN, LOW);
 2ea:	2c 98       	cbi	0x05, 4	; 5
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <_ZN7LedCube9showLayerEh+0x5e>
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showLayer(byte Layer)
{
    stdReturnType ReturnValue = E_NOT_OK;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
        digitalWriteFast(LEDCUBE_STORAGE_PIN, LOW);

        ReturnValue = E_OK;
    }
    return ReturnValue;
} /* showLayer */
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	08 95       	ret

00000300 <_ZN7LedCube4taskEv>:
 *                  has to be called periodically
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
void LedCube::task()
{
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	fc 01       	movw	r30, r24
    if(State == LEDCUBE_STATE_RUNNING) {
 306:	81 81       	ldd	r24, Z+1	; 0x01
 308:	83 30       	cpi	r24, 0x03	; 3
 30a:	11 f5       	brne	.+68     	; 0x350 <_ZN7LedCube4taskEv+0x50>
        if(CurrentLayer >= LEDCUBE_NUMBER_OF_LAYERS) {
 30c:	80 81       	ld	r24, Z
 30e:	88 30       	cpi	r24, 0x08	; 8
 310:	b8 f0       	brcs	.+46     	; 0x340 <_ZN7LedCube4taskEv+0x40>
            CurrentLayer = 0;
 312:	10 82       	st	Z, r1
			/* is next frame ready to show? */
			if(NextFrameReady && NextFrameTimeElapsed) { 
 314:	ef 01       	movw	r28, r30
 316:	ca 57       	subi	r28, 0x7A	; 122
 318:	df 4f       	sbci	r29, 0xFF	; 255
 31a:	88 81       	ld	r24, Y
 31c:	88 23       	and	r24, r24
 31e:	81 f0       	breq	.+32     	; 0x340 <_ZN7LedCube4taskEv+0x40>
 320:	df 01       	movw	r26, r30
 322:	a9 57       	subi	r26, 0x79	; 121
 324:	bf 4f       	sbci	r27, 0xFF	; 255
 326:	8c 91       	ld	r24, X
 328:	88 23       	and	r24, r24
 32a:	51 f0       	breq	.+20     	; 0x340 <_ZN7LedCube4taskEv+0x40>
 *****************************************************************************************************************************************************/
void LedCube::switchBufferPointer()
{
        byte (*pTmp)[LEDCUBE_NUMBER_OF_LEDS_PER_SIDE];

        pTmp = CurrentFrame;
 32c:	82 81       	ldd	r24, Z+2	; 0x02
 32e:	93 81       	ldd	r25, Z+3	; 0x03
        CurrentFrame = NextFrame;
 330:	24 81       	ldd	r18, Z+4	; 0x04
 332:	35 81       	ldd	r19, Z+5	; 0x05
 334:	33 83       	std	Z+3, r19	; 0x03
 336:	22 83       	std	Z+2, r18	; 0x02
        NextFrame = pTmp;
 338:	95 83       	std	Z+5, r25	; 0x05
 33a:	84 83       	std	Z+4, r24	; 0x04
        if(CurrentLayer >= LEDCUBE_NUMBER_OF_LAYERS) {
            CurrentLayer = 0;
			/* is next frame ready to show? */
			if(NextFrameReady && NextFrameTimeElapsed) { 
				showNextFrame();
				NextFrameReady = false;
 33c:	18 82       	st	Y, r1
				NextFrameTimeElapsed = false;
 33e:	1c 92       	st	X, r1
 340:	ef 01       	movw	r28, r30
			}
        }
        showLayer(CurrentLayer);
 342:	60 81       	ld	r22, Z
 344:	cf 01       	movw	r24, r30
 346:	0e 94 4a 01 	call	0x294	; 0x294 <_ZN7LedCube9showLayerEh>
        CurrentLayer++;
 34a:	88 81       	ld	r24, Y
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	88 83       	st	Y, r24
    }
} /* task */
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <initVariant>:
 356:	08 95       	ret

00000358 <main>:
 358:	0e 94 52 02 	call	0x4a4	; 0x4a4 <init>
 35c:	0e 94 ab 01 	call	0x356	; 0x356 <initVariant>
 360:	0e 94 7d 00 	call	0xfa	; 0xfa <setup>
 364:	c0 e0       	ldi	r28, 0x00	; 0
 366:	d0 e0       	ldi	r29, 0x00	; 0
 368:	0e 94 a6 00 	call	0x14c	; 0x14c <loop>
 36c:	20 97       	sbiw	r28, 0x00	; 0
 36e:	e1 f3       	breq	.-8      	; 0x368 <main+0x10>
 370:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 374:	f9 cf       	rjmp	.-14     	; 0x368 <main+0x10>

00000376 <__vector_16>:
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	2f 93       	push	r18
 382:	3f 93       	push	r19
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <timer0_millis>
 390:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <timer0_millis+0x1>
 394:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <timer0_millis+0x2>
 398:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <timer0_millis+0x3>
 39c:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <timer0_fract>
 3a0:	23 e0       	ldi	r18, 0x03	; 3
 3a2:	23 0f       	add	r18, r19
 3a4:	2d 37       	cpi	r18, 0x7D	; 125
 3a6:	20 f4       	brcc	.+8      	; 0x3b0 <__vector_16+0x3a>
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	a1 1d       	adc	r26, r1
 3ac:	b1 1d       	adc	r27, r1
 3ae:	05 c0       	rjmp	.+10     	; 0x3ba <__vector_16+0x44>
 3b0:	26 e8       	ldi	r18, 0x86	; 134
 3b2:	23 0f       	add	r18, r19
 3b4:	02 96       	adiw	r24, 0x02	; 2
 3b6:	a1 1d       	adc	r26, r1
 3b8:	b1 1d       	adc	r27, r1
 3ba:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <timer0_fract>
 3be:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <timer0_millis>
 3c2:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <timer0_millis+0x1>
 3c6:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <timer0_millis+0x2>
 3ca:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <timer0_millis+0x3>
 3ce:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <timer0_overflow_count>
 3d2:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <timer0_overflow_count+0x1>
 3d6:	a0 91 8f 01 	lds	r26, 0x018F	; 0x80018f <timer0_overflow_count+0x2>
 3da:	b0 91 90 01 	lds	r27, 0x0190	; 0x800190 <timer0_overflow_count+0x3>
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	a1 1d       	adc	r26, r1
 3e2:	b1 1d       	adc	r27, r1
 3e4:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <timer0_overflow_count>
 3e8:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <timer0_overflow_count+0x1>
 3ec:	a0 93 8f 01 	sts	0x018F, r26	; 0x80018f <timer0_overflow_count+0x2>
 3f0:	b0 93 90 01 	sts	0x0190, r27	; 0x800190 <timer0_overflow_count+0x3>
 3f4:	bf 91       	pop	r27
 3f6:	af 91       	pop	r26
 3f8:	9f 91       	pop	r25
 3fa:	8f 91       	pop	r24
 3fc:	3f 91       	pop	r19
 3fe:	2f 91       	pop	r18
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	1f 90       	pop	r1
 408:	18 95       	reti

0000040a <micros>:
 40a:	3f b7       	in	r19, 0x3f	; 63
 40c:	f8 94       	cli
 40e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <timer0_overflow_count>
 412:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <timer0_overflow_count+0x1>
 416:	a0 91 8f 01 	lds	r26, 0x018F	; 0x80018f <timer0_overflow_count+0x2>
 41a:	b0 91 90 01 	lds	r27, 0x0190	; 0x800190 <timer0_overflow_count+0x3>
 41e:	26 b5       	in	r18, 0x26	; 38
 420:	a8 9b       	sbis	0x15, 0	; 21
 422:	05 c0       	rjmp	.+10     	; 0x42e <micros+0x24>
 424:	2f 3f       	cpi	r18, 0xFF	; 255
 426:	19 f0       	breq	.+6      	; 0x42e <micros+0x24>
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	a1 1d       	adc	r26, r1
 42c:	b1 1d       	adc	r27, r1
 42e:	3f bf       	out	0x3f, r19	; 63
 430:	ba 2f       	mov	r27, r26
 432:	a9 2f       	mov	r26, r25
 434:	98 2f       	mov	r25, r24
 436:	88 27       	eor	r24, r24
 438:	82 0f       	add	r24, r18
 43a:	91 1d       	adc	r25, r1
 43c:	a1 1d       	adc	r26, r1
 43e:	b1 1d       	adc	r27, r1
 440:	bc 01       	movw	r22, r24
 442:	cd 01       	movw	r24, r26
 444:	42 e0       	ldi	r20, 0x02	; 2
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	88 1f       	adc	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	4a 95       	dec	r20
 450:	d1 f7       	brne	.-12     	; 0x446 <micros+0x3c>
 452:	08 95       	ret

00000454 <delay>:
 454:	cf 92       	push	r12
 456:	df 92       	push	r13
 458:	ef 92       	push	r14
 45a:	ff 92       	push	r15
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	6b 01       	movw	r12, r22
 462:	7c 01       	movw	r14, r24
 464:	0e 94 05 02 	call	0x40a	; 0x40a <micros>
 468:	eb 01       	movw	r28, r22
 46a:	c1 14       	cp	r12, r1
 46c:	d1 04       	cpc	r13, r1
 46e:	e1 04       	cpc	r14, r1
 470:	f1 04       	cpc	r15, r1
 472:	89 f0       	breq	.+34     	; 0x496 <delay+0x42>
 474:	0e 94 22 03 	call	0x644	; 0x644 <yield>
 478:	0e 94 05 02 	call	0x40a	; 0x40a <micros>
 47c:	6c 1b       	sub	r22, r28
 47e:	7d 0b       	sbc	r23, r29
 480:	68 3e       	cpi	r22, 0xE8	; 232
 482:	73 40       	sbci	r23, 0x03	; 3
 484:	90 f3       	brcs	.-28     	; 0x46a <delay+0x16>
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	c8 1a       	sub	r12, r24
 48a:	d1 08       	sbc	r13, r1
 48c:	e1 08       	sbc	r14, r1
 48e:	f1 08       	sbc	r15, r1
 490:	c8 51       	subi	r28, 0x18	; 24
 492:	dc 4f       	sbci	r29, 0xFC	; 252
 494:	ea cf       	rjmp	.-44     	; 0x46a <delay+0x16>
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	ff 90       	pop	r15
 49c:	ef 90       	pop	r14
 49e:	df 90       	pop	r13
 4a0:	cf 90       	pop	r12
 4a2:	08 95       	ret

000004a4 <init>:
 4a4:	78 94       	sei
 4a6:	84 b5       	in	r24, 0x24	; 36
 4a8:	82 60       	ori	r24, 0x02	; 2
 4aa:	84 bd       	out	0x24, r24	; 36
 4ac:	84 b5       	in	r24, 0x24	; 36
 4ae:	81 60       	ori	r24, 0x01	; 1
 4b0:	84 bd       	out	0x24, r24	; 36
 4b2:	85 b5       	in	r24, 0x25	; 37
 4b4:	82 60       	ori	r24, 0x02	; 2
 4b6:	85 bd       	out	0x25, r24	; 37
 4b8:	85 b5       	in	r24, 0x25	; 37
 4ba:	81 60       	ori	r24, 0x01	; 1
 4bc:	85 bd       	out	0x25, r24	; 37
 4be:	ee e6       	ldi	r30, 0x6E	; 110
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	81 60       	ori	r24, 0x01	; 1
 4c6:	80 83       	st	Z, r24
 4c8:	e1 e8       	ldi	r30, 0x81	; 129
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	10 82       	st	Z, r1
 4ce:	80 81       	ld	r24, Z
 4d0:	82 60       	ori	r24, 0x02	; 2
 4d2:	80 83       	st	Z, r24
 4d4:	80 81       	ld	r24, Z
 4d6:	81 60       	ori	r24, 0x01	; 1
 4d8:	80 83       	st	Z, r24
 4da:	e0 e8       	ldi	r30, 0x80	; 128
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	80 81       	ld	r24, Z
 4e0:	81 60       	ori	r24, 0x01	; 1
 4e2:	80 83       	st	Z, r24
 4e4:	e1 eb       	ldi	r30, 0xB1	; 177
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	84 60       	ori	r24, 0x04	; 4
 4ec:	80 83       	st	Z, r24
 4ee:	e0 eb       	ldi	r30, 0xB0	; 176
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	81 60       	ori	r24, 0x01	; 1
 4f6:	80 83       	st	Z, r24
 4f8:	ea e7       	ldi	r30, 0x7A	; 122
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	84 60       	ori	r24, 0x04	; 4
 500:	80 83       	st	Z, r24
 502:	80 81       	ld	r24, Z
 504:	82 60       	ori	r24, 0x02	; 2
 506:	80 83       	st	Z, r24
 508:	80 81       	ld	r24, Z
 50a:	81 60       	ori	r24, 0x01	; 1
 50c:	80 83       	st	Z, r24
 50e:	80 81       	ld	r24, Z
 510:	80 68       	ori	r24, 0x80	; 128
 512:	80 83       	st	Z, r24
 514:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 518:	08 95       	ret

0000051a <turnOffPWM>:
 51a:	83 30       	cpi	r24, 0x03	; 3
 51c:	81 f0       	breq	.+32     	; 0x53e <turnOffPWM+0x24>
 51e:	28 f4       	brcc	.+10     	; 0x52a <turnOffPWM+0x10>
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	99 f0       	breq	.+38     	; 0x54a <turnOffPWM+0x30>
 524:	82 30       	cpi	r24, 0x02	; 2
 526:	a1 f0       	breq	.+40     	; 0x550 <turnOffPWM+0x36>
 528:	08 95       	ret
 52a:	87 30       	cpi	r24, 0x07	; 7
 52c:	a9 f0       	breq	.+42     	; 0x558 <turnOffPWM+0x3e>
 52e:	88 30       	cpi	r24, 0x08	; 8
 530:	b9 f0       	breq	.+46     	; 0x560 <turnOffPWM+0x46>
 532:	84 30       	cpi	r24, 0x04	; 4
 534:	d1 f4       	brne	.+52     	; 0x56a <turnOffPWM+0x50>
 536:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 53a:	8f 7d       	andi	r24, 0xDF	; 223
 53c:	03 c0       	rjmp	.+6      	; 0x544 <turnOffPWM+0x2a>
 53e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 542:	8f 77       	andi	r24, 0x7F	; 127
 544:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 548:	08 95       	ret
 54a:	84 b5       	in	r24, 0x24	; 36
 54c:	8f 77       	andi	r24, 0x7F	; 127
 54e:	02 c0       	rjmp	.+4      	; 0x554 <turnOffPWM+0x3a>
 550:	84 b5       	in	r24, 0x24	; 36
 552:	8f 7d       	andi	r24, 0xDF	; 223
 554:	84 bd       	out	0x24, r24	; 36
 556:	08 95       	ret
 558:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 55c:	8f 77       	andi	r24, 0x7F	; 127
 55e:	03 c0       	rjmp	.+6      	; 0x566 <turnOffPWM+0x4c>
 560:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 564:	8f 7d       	andi	r24, 0xDF	; 223
 566:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 56a:	08 95       	ret

0000056c <pinMode>:
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	fc 01       	movw	r30, r24
 574:	e4 58       	subi	r30, 0x84	; 132
 576:	ff 4f       	sbci	r31, 0xFF	; 255
 578:	24 91       	lpm	r18, Z
 57a:	fc 01       	movw	r30, r24
 57c:	e0 57       	subi	r30, 0x70	; 112
 57e:	ff 4f       	sbci	r31, 0xFF	; 255
 580:	84 91       	lpm	r24, Z
 582:	88 23       	and	r24, r24
 584:	61 f1       	breq	.+88     	; 0x5de <pinMode+0x72>
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	fc 01       	movw	r30, r24
 58e:	e2 55       	subi	r30, 0x52	; 82
 590:	ff 4f       	sbci	r31, 0xFF	; 255
 592:	c5 91       	lpm	r28, Z+
 594:	d4 91       	lpm	r29, Z
 596:	fc 01       	movw	r30, r24
 598:	ec 55       	subi	r30, 0x5C	; 92
 59a:	ff 4f       	sbci	r31, 0xFF	; 255
 59c:	a5 91       	lpm	r26, Z+
 59e:	b4 91       	lpm	r27, Z
 5a0:	61 11       	cpse	r22, r1
 5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <pinMode+0x4a>
 5a4:	9f b7       	in	r25, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	88 81       	ld	r24, Y
 5aa:	20 95       	com	r18
 5ac:	82 23       	and	r24, r18
 5ae:	88 83       	st	Y, r24
 5b0:	ec 91       	ld	r30, X
 5b2:	2e 23       	and	r18, r30
 5b4:	0b c0       	rjmp	.+22     	; 0x5cc <pinMode+0x60>
 5b6:	62 30       	cpi	r22, 0x02	; 2
 5b8:	61 f4       	brne	.+24     	; 0x5d2 <pinMode+0x66>
 5ba:	9f b7       	in	r25, 0x3f	; 63
 5bc:	f8 94       	cli
 5be:	38 81       	ld	r19, Y
 5c0:	82 2f       	mov	r24, r18
 5c2:	80 95       	com	r24
 5c4:	83 23       	and	r24, r19
 5c6:	88 83       	st	Y, r24
 5c8:	ec 91       	ld	r30, X
 5ca:	2e 2b       	or	r18, r30
 5cc:	2c 93       	st	X, r18
 5ce:	9f bf       	out	0x3f, r25	; 63
 5d0:	06 c0       	rjmp	.+12     	; 0x5de <pinMode+0x72>
 5d2:	8f b7       	in	r24, 0x3f	; 63
 5d4:	f8 94       	cli
 5d6:	e8 81       	ld	r30, Y
 5d8:	2e 2b       	or	r18, r30
 5da:	28 83       	st	Y, r18
 5dc:	8f bf       	out	0x3f, r24	; 63
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

000005e4 <digitalWrite>:
 5e4:	1f 93       	push	r17
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	28 2f       	mov	r18, r24
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	f9 01       	movw	r30, r18
 5f0:	e8 59       	subi	r30, 0x98	; 152
 5f2:	ff 4f       	sbci	r31, 0xFF	; 255
 5f4:	84 91       	lpm	r24, Z
 5f6:	f9 01       	movw	r30, r18
 5f8:	e4 58       	subi	r30, 0x84	; 132
 5fa:	ff 4f       	sbci	r31, 0xFF	; 255
 5fc:	d4 91       	lpm	r29, Z
 5fe:	f9 01       	movw	r30, r18
 600:	e0 57       	subi	r30, 0x70	; 112
 602:	ff 4f       	sbci	r31, 0xFF	; 255
 604:	c4 91       	lpm	r28, Z
 606:	cc 23       	and	r28, r28
 608:	c9 f0       	breq	.+50     	; 0x63c <digitalWrite+0x58>
 60a:	16 2f       	mov	r17, r22
 60c:	81 11       	cpse	r24, r1
 60e:	0e 94 8d 02 	call	0x51a	; 0x51a <turnOffPWM>
 612:	ec 2f       	mov	r30, r28
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	ee 0f       	add	r30, r30
 618:	ff 1f       	adc	r31, r31
 61a:	ec 55       	subi	r30, 0x5C	; 92
 61c:	ff 4f       	sbci	r31, 0xFF	; 255
 61e:	a5 91       	lpm	r26, Z+
 620:	b4 91       	lpm	r27, Z
 622:	8f b7       	in	r24, 0x3f	; 63
 624:	f8 94       	cli
 626:	11 11       	cpse	r17, r1
 628:	05 c0       	rjmp	.+10     	; 0x634 <digitalWrite+0x50>
 62a:	9c 91       	ld	r25, X
 62c:	ed 2f       	mov	r30, r29
 62e:	e0 95       	com	r30
 630:	e9 23       	and	r30, r25
 632:	02 c0       	rjmp	.+4      	; 0x638 <digitalWrite+0x54>
 634:	ec 91       	ld	r30, X
 636:	ed 2b       	or	r30, r29
 638:	ec 93       	st	X, r30
 63a:	8f bf       	out	0x3f, r24	; 63
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	1f 91       	pop	r17
 642:	08 95       	ret

00000644 <yield>:
 644:	08 95       	ret

00000646 <__tablejump2__>:
 646:	ee 0f       	add	r30, r30
 648:	ff 1f       	adc	r31, r31
 64a:	05 90       	lpm	r0, Z+
 64c:	f4 91       	lpm	r31, Z
 64e:	e0 2d       	mov	r30, r0
 650:	09 94       	ijmp

00000652 <__do_global_dtors>:
 652:	10 e0       	ldi	r17, 0x00	; 0
 654:	cd e5       	ldi	r28, 0x5D	; 93
 656:	d0 e0       	ldi	r29, 0x00	; 0
 658:	04 c0       	rjmp	.+8      	; 0x662 <__do_global_dtors+0x10>
 65a:	fe 01       	movw	r30, r28
 65c:	0e 94 23 03 	call	0x646	; 0x646 <__tablejump2__>
 660:	21 96       	adiw	r28, 0x01	; 1
 662:	ce 35       	cpi	r28, 0x5E	; 94
 664:	d1 07       	cpc	r29, r17
 666:	c9 f7       	brne	.-14     	; 0x65a <__do_global_dtors+0x8>
 668:	f8 94       	cli

0000066a <__stop_program>:
 66a:	ff cf       	rjmp	.-2      	; 0x66a <__stop_program>
