
LedCube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000060c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000091  00800100  00800100  00000680  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e0a  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000910  00000000  00000000  0000268a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000caa  00000000  00000000  00002f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00003c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c9  00000000  00000000  00003f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fc5  00000000  00000000  0000495d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005922  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__dtors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_16>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	b4 00       	.word	0x00b4	; ????

000000ba <__ctors_end>:
  ba:	b8 00       	.word	0x00b8	; ????

000000bc <__dtors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d8 e0       	ldi	r29, 0x08	; 8
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a1 39       	cpi	r26, 0x91	; 145
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>

000000d8 <__do_global_ctors>:
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	cd e5       	ldi	r28, 0x5D	; 93
  dc:	d0 e0       	ldi	r29, 0x00	; 0
  de:	04 c0       	rjmp	.+8      	; 0xe8 <__do_global_ctors+0x10>
  e0:	21 97       	sbiw	r28, 0x01	; 1
  e2:	fe 01       	movw	r30, r28
  e4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__tablejump2__>
  e8:	cc 35       	cpi	r28, 0x5C	; 92
  ea:	d1 07       	cpc	r29, r17
  ec:	c9 f7       	brne	.-14     	; 0xe0 <__do_global_ctors+0x8>
  ee:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  f2:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__do_global_dtors>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <setup>:
#define SCK_74 11  // clock input

LedCube Cube;


void setup() {
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	Cube.init();
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN7LedCube4initEv>
	pinMode(7, OUTPUT);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	87 e0       	ldi	r24, 0x07	; 7
 10c:	0e 94 86 02 	call	0x50c	; 0x50c <pinMode>
	for(byte x = 0; x<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; x++) {
 110:	d0 e0       	ldi	r29, 0x00	; 0
#define SCK_74 11  // clock input

LedCube Cube;


void setup() {
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	10 e0       	ldi	r17, 0x00	; 0
	Cube.init();
	pinMode(7, OUTPUT);
	for(byte x = 0; x<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; x++) {
		for(byte y = 0; y<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; y++) {
			for(byte z = 0; z<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; z++) {
				Cube.setVoxel(x, y, z);
 116:	21 2f       	mov	r18, r17
 118:	4c 2f       	mov	r20, r28
 11a:	6d 2f       	mov	r22, r29
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_ZN7LedCube8setVoxelEhhh>
void setup() {
	Cube.init();
	pinMode(7, OUTPUT);
	for(byte x = 0; x<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; x++) {
		for(byte y = 0; y<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; y++) {
			for(byte z = 0; z<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; z++) {
 124:	1f 5f       	subi	r17, 0xFF	; 255
 126:	18 30       	cpi	r17, 0x08	; 8
 128:	b1 f7       	brne	.-20     	; 0x116 <setup+0x1c>

void setup() {
	Cube.init();
	pinMode(7, OUTPUT);
	for(byte x = 0; x<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; x++) {
		for(byte y = 0; y<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; y++) {
 12a:	cf 5f       	subi	r28, 0xFF	; 255
 12c:	c8 30       	cpi	r28, 0x08	; 8
 12e:	91 f7       	brne	.-28     	; 0x114 <setup+0x1a>


void setup() {
	Cube.init();
	pinMode(7, OUTPUT);
	for(byte x = 0; x<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; x++) {
 130:	df 5f       	subi	r29, 0xFF	; 255
 132:	d8 30       	cpi	r29, 0x08	; 8
 134:	71 f7       	brne	.-36     	; 0x112 <setup+0x18>
			for(byte z = 0; z<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; z++) {
				Cube.setVoxel(x, y, z);
			}
		}
	}
	Cube.setNextFrameReady();
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	91 e0       	ldi	r25, 0x01	; 1
	//Cube.showNextFrame();
}
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
			for(byte z = 0; z<LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; z++) {
				Cube.setVoxel(x, y, z);
			}
		}
	}
	Cube.setNextFrameReady();
 140:	0c 94 15 01 	jmp	0x22a	; 0x22a <_ZN7LedCube17setNextFrameReadyEv>

00000144 <loop>:
	//Cube.showNextFrame();
}

void loop()
{
	delay(500);
 144:	64 ef       	ldi	r22, 0xF4	; 244
 146:	71 e0       	ldi	r23, 0x01	; 1
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <delay>
	digitalWrite(7, STD_ON);
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	87 e0       	ldi	r24, 0x07	; 7
 154:	0e 94 c2 02 	call	0x584	; 0x584 <digitalWrite>
	Cube.task();
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 67 01 	call	0x2ce	; 0x2ce <_ZN7LedCube4taskEv>
	digitalWrite(7, STD_OFF);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	87 e0       	ldi	r24, 0x07	; 7
 164:	0c 94 c2 02 	jmp	0x584	; 0x584 <digitalWrite>

00000168 <_GLOBAL__sub_I_Cube>:

#define SER_74 13  // serial input
#define RCK_74 12  // storage input
#define SCK_74 11  // clock input

LedCube Cube;
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0c 94 bc 00 	jmp	0x178	; 0x178 <_ZN7LedCubeC1Ev>

00000170 <_GLOBAL__sub_D_Cube>:
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_ZN7LedCubeD1Ev>

00000178 <_ZN7LedCubeC1Ev>:
        *Value = bitRead(CurrentFrame[Y][Z], X);
        return E_OK;
    } else {
        return E_NOT_OK;
    }
} /* getVoxel */
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	fc 01       	movw	r30, r24
 17e:	12 82       	std	Z+2, r1	; 0x02
 180:	13 82       	std	Z+3, r1	; 0x03
 182:	ec 01       	movw	r28, r24
 184:	28 96       	adiw	r28, 0x08	; 8
 186:	d5 83       	std	Z+5, r29	; 0x05
 188:	c4 83       	std	Z+4, r28	; 0x04
 18a:	dc 01       	movw	r26, r24
 18c:	a8 5b       	subi	r26, 0xB8	; 184
 18e:	bf 4f       	sbci	r27, 0xFF	; 255
 190:	b7 83       	std	Z+7, r27	; 0x07
 192:	a6 83       	std	Z+6, r26	; 0x06
 194:	80 e4       	ldi	r24, 0x40	; 64
 196:	fe 01       	movw	r30, r28
 198:	98 2f       	mov	r25, r24
 19a:	11 92       	st	Z+, r1
 19c:	9a 95       	dec	r25
 19e:	e9 f7       	brne	.-6      	; 0x19a <_ZN7LedCubeC1Ev+0x22>
 1a0:	fd 01       	movw	r30, r26
 1a2:	11 92       	st	Z+, r1
 1a4:	8a 95       	dec	r24
 1a6:	e9 f7       	brne	.-6      	; 0x1a2 <_ZN7LedCubeC1Ev+0x2a>
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <_ZN7LedCubeD1Ev>:
 1ae:	08 95       	ret

000001b0 <_ZN7LedCube9clearCubeEv>:
 1b0:	2d 98       	cbi	0x05, 5	; 5
 1b2:	88 e4       	ldi	r24, 0x48	; 72
 1b4:	2b 9a       	sbi	0x05, 3	; 5
 1b6:	2b 98       	cbi	0x05, 3	; 5
 1b8:	81 50       	subi	r24, 0x01	; 1
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <_ZN7LedCube9clearCubeEv+0x4>
 1bc:	2c 9a       	sbi	0x05, 4	; 5
 1be:	2c 98       	cbi	0x05, 4	; 5
 1c0:	08 95       	ret

000001c2 <_ZN7LedCube4initEv>:
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	8b 83       	std	Y+3, r24	; 0x03
 1cc:	ce 01       	movw	r24, r28
 1ce:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_ZN7LedCube9clearCubeEv>
 1d2:	25 9a       	sbi	0x04, 5	; 4
 1d4:	23 9a       	sbi	0x04, 3	; 4
 1d6:	24 9a       	sbi	0x04, 4	; 4
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	8b 83       	std	Y+3, r24	; 0x03
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <_ZN7LedCube8setVoxelEhhh>:
 1e2:	68 30       	cpi	r22, 0x08	; 8
 1e4:	00 f5       	brcc	.+64     	; 0x226 <_ZN7LedCube8setVoxelEhhh+0x44>
 1e6:	48 30       	cpi	r20, 0x08	; 8
 1e8:	f0 f4       	brcc	.+60     	; 0x226 <_ZN7LedCube8setVoxelEhhh+0x44>
 1ea:	28 30       	cpi	r18, 0x08	; 8
 1ec:	e0 f4       	brcc	.+56     	; 0x226 <_ZN7LedCube8setVoxelEhhh+0x44>
 1ee:	dc 01       	movw	r26, r24
 1f0:	16 96       	adiw	r26, 0x06	; 6
 1f2:	ed 91       	ld	r30, X+
 1f4:	fc 91       	ld	r31, X
 1f6:	17 97       	sbiw	r26, 0x07	; 7
 1f8:	b8 e0       	ldi	r27, 0x08	; 8
 1fa:	4b 9f       	mul	r20, r27
 1fc:	e0 0d       	add	r30, r0
 1fe:	f1 1d       	adc	r31, r1
 200:	11 24       	eor	r1, r1
 202:	e2 0f       	add	r30, r18
 204:	f1 1d       	adc	r31, r1
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	04 c0       	rjmp	.+8      	; 0x218 <_ZN7LedCube8setVoxelEhhh+0x36>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	aa 1f       	adc	r26, r26
 216:	bb 1f       	adc	r27, r27
 218:	6a 95       	dec	r22
 21a:	d2 f7       	brpl	.-12     	; 0x210 <_ZN7LedCube8setVoxelEhhh+0x2e>
 21c:	20 81       	ld	r18, Z
 21e:	82 2b       	or	r24, r18
 220:	80 83       	st	Z, r24
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	08 95       	ret

0000022a <_ZN7LedCube17setNextFrameReadyEv>:
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::setNextFrameReady()
{
    if(State == LEDCUBE_STATE_RUNNING) {
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	fc 01       	movw	r30, r24
 22e:	83 81       	ldd	r24, Z+3	; 0x03
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	09 f4       	brne	.+2      	; 0x236 <_ZN7LedCube17setNextFrameReadyEv+0xc>
 234:	20 e0       	ldi	r18, 0x00	; 0
        //State = LEDCUBE_STATE_NEXT_FRAME_READY;
        return E_OK;
    } else {
        return E_NOT_OK;
    }
}
 236:	82 2f       	mov	r24, r18
 238:	08 95       	ret

0000023a <_ZN7LedCube8sendDataEh>:
 *
 *  \param[in]      Data    data (Byte) to send
 *  \return         -
 *****************************************************************************************************************************************************/
void LedCube::sendData(byte Data)
{
 23a:	87 e0       	ldi	r24, 0x07	; 7
 23c:	90 e0       	ldi	r25, 0x00	; 0
    for (byte i = 0; i < 8; i++) {
        // LSB First
        //digitalWrite(DataInPin, !!(Data & (1 << i)));
        // MSB First
        digitalWriteFast(LEDCUBE_DATA_IN_PIN, !!(Data & (1 << (7 - i))));
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	9b 01       	movw	r18, r22
 242:	08 2e       	mov	r0, r24
 244:	02 c0       	rjmp	.+4      	; 0x24a <_ZN7LedCube8sendDataEh+0x10>
 246:	35 95       	asr	r19
 248:	27 95       	ror	r18
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <_ZN7LedCube8sendDataEh+0xc>
 24e:	20 ff       	sbrs	r18, 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <_ZN7LedCube8sendDataEh+0x1c>
 252:	2d 9a       	sbi	0x05, 5	; 5
 254:	01 c0       	rjmp	.+2      	; 0x258 <_ZN7LedCube8sendDataEh+0x1e>
 256:	2d 98       	cbi	0x05, 5	; 5
        // toggle clock pin
        digitalWriteFast(LEDCUBE_CLOCK_PIN, HIGH);
 258:	2b 9a       	sbi	0x05, 3	; 5
        digitalWriteFast(LEDCUBE_CLOCK_PIN, LOW);
 25a:	2b 98       	cbi	0x05, 3	; 5
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	80 f7       	brcc	.-32     	; 0x240 <_ZN7LedCube8sendDataEh+0x6>
    }
} /* sendData */
 260:	08 95       	ret

00000262 <_ZN7LedCube9showLayerEh>:
 *  \param[in]      Layer       layer which should be shown on the cube
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showLayer(byte Layer)
{
 262:	ef 92       	push	r14
 264:	ff 92       	push	r15
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
    stdReturnType ReturnValue = E_NOT_OK;
    
    if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
 26e:	68 30       	cpi	r22, 0x08	; 8
 270:	30 f5       	brcc	.+76     	; 0x2be <_ZN7LedCube9showLayerEh+0x5c>
 272:	ec 01       	movw	r28, r24
        /* put on given layer */
        sendData(1 << Layer);
 274:	06 2f       	mov	r16, r22
 276:	10 e0       	ldi	r17, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	9c 01       	movw	r18, r24
 27e:	02 c0       	rjmp	.+4      	; 0x284 <_ZN7LedCube9showLayerEh+0x22>
 280:	22 0f       	add	r18, r18
 282:	33 1f       	adc	r19, r19
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <_ZN7LedCube9showLayerEh+0x1e>
 288:	b9 01       	movw	r22, r18
 28a:	ce 01       	movw	r24, r28
 28c:	0e 94 1d 01 	call	0x23a	; 0x23a <_ZN7LedCube8sendDataEh>
 290:	e1 2c       	mov	r14, r1
 292:	f1 2c       	mov	r15, r1
        /* send the layer data to the shift registers */
        for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
            sendData(CurrentFrame[Y][Layer]);
 294:	ec 81       	ldd	r30, Y+4	; 0x04
 296:	fd 81       	ldd	r31, Y+5	; 0x05
 298:	ee 0d       	add	r30, r14
 29a:	ff 1d       	adc	r31, r15
 29c:	e0 0f       	add	r30, r16
 29e:	f1 1f       	adc	r31, r17
 2a0:	60 81       	ld	r22, Z
 2a2:	ce 01       	movw	r24, r28
 2a4:	0e 94 1d 01 	call	0x23a	; 0x23a <_ZN7LedCube8sendDataEh>
 2a8:	38 e0       	ldi	r19, 0x08	; 8
 2aa:	e3 0e       	add	r14, r19
 2ac:	f1 1c       	adc	r15, r1
    
    if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
        /* put on given layer */
        sendData(1 << Layer);
        /* send the layer data to the shift registers */
        for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
 2ae:	80 e4       	ldi	r24, 0x40	; 64
 2b0:	e8 16       	cp	r14, r24
 2b2:	f1 04       	cpc	r15, r1
 2b4:	79 f7       	brne	.-34     	; 0x294 <_ZN7LedCube9showLayerEh+0x32>
            sendData(CurrentFrame[Y][Layer]);
        }
        // toggle storage pin
        digitalWriteFast(LEDCUBE_STORAGE_PIN, HIGH);
 2b6:	2c 9a       	sbi	0x05, 4	; 5
        digitalWriteFast(LEDCUBE_STORAGE_PIN, LOW);
 2b8:	2c 98       	cbi	0x05, 4	; 5
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <_ZN7LedCube9showLayerEh+0x5e>
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showLayer(byte Layer)
{
    stdReturnType ReturnValue = E_NOT_OK;
 2be:	81 e0       	ldi	r24, 0x01	; 1
        digitalWriteFast(LEDCUBE_STORAGE_PIN, LOW);

        ReturnValue = E_OK;
    }
    return ReturnValue;
} /* showLayer */
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	ff 90       	pop	r15
 2ca:	ef 90       	pop	r14
 2cc:	08 95       	ret

000002ce <_ZN7LedCube4taskEv>:
 *                  has to be called periodically
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
void LedCube::task()
{
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	ec 01       	movw	r28, r24
    if(State == LEDCUBE_STATE_RUNNING) {
 2d4:	8b 81       	ldd	r24, Y+3	; 0x03
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	59 f4       	brne	.+22     	; 0x2f0 <_ZN7LedCube4taskEv+0x22>
        if(CurrentLayer >= LEDCUBE_NUMBER_OF_LAYERS) {
 2da:	8a 81       	ldd	r24, Y+2	; 0x02
 2dc:	88 30       	cpi	r24, 0x08	; 8
 2de:	08 f0       	brcs	.+2      	; 0x2e2 <_ZN7LedCube4taskEv+0x14>
            CurrentLayer = 0;
 2e0:	1a 82       	std	Y+2, r1	; 0x02
			//if(State == LEDCUBE_STATE_NEXT_FRAME_READY) showNextFrame();
        }
        showLayer(CurrentLayer);
 2e2:	6a 81       	ldd	r22, Y+2	; 0x02
 2e4:	ce 01       	movw	r24, r28
 2e6:	0e 94 31 01 	call	0x262	; 0x262 <_ZN7LedCube9showLayerEh>
        CurrentLayer++;
 2ea:	8a 81       	ldd	r24, Y+2	; 0x02
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	8a 83       	std	Y+2, r24	; 0x02
    }
} /* task */
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 2f6:	08 95       	ret

000002f8 <main>:

int main(void)
{
	init();
 2f8:	0e 94 22 02 	call	0x444	; 0x444 <init>

	initVariant();
 2fc:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 300:	0e 94 7d 00 	call	0xfa	; 0xfa <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 304:	c0 e0       	ldi	r28, 0x00	; 0
 306:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 308:	0e 94 a2 00 	call	0x144	; 0x144 <loop>
		if (serialEventRun) serialEventRun();
 30c:	20 97       	sbiw	r28, 0x00	; 0
 30e:	e1 f3       	breq	.-8      	; 0x308 <main+0x10>
 310:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 314:	f9 cf       	rjmp	.-14     	; 0x308 <main+0x10>

00000316 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	af 93       	push	r26
 32a:	bf 93       	push	r27
 32c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <timer0_millis>
 330:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <timer0_millis+0x1>
 334:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <timer0_millis+0x2>
 338:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <timer0_millis+0x3>
 33c:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <timer0_fract>
 340:	23 e0       	ldi	r18, 0x03	; 3
 342:	23 0f       	add	r18, r19
 344:	2d 37       	cpi	r18, 0x7D	; 125
 346:	20 f4       	brcc	.+8      	; 0x350 <__vector_16+0x3a>
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	a1 1d       	adc	r26, r1
 34c:	b1 1d       	adc	r27, r1
 34e:	05 c0       	rjmp	.+10     	; 0x35a <__vector_16+0x44>
 350:	26 e8       	ldi	r18, 0x86	; 134
 352:	23 0f       	add	r18, r19
 354:	02 96       	adiw	r24, 0x02	; 2
 356:	a1 1d       	adc	r26, r1
 358:	b1 1d       	adc	r27, r1
 35a:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <timer0_fract>
 35e:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <timer0_millis>
 362:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <timer0_millis+0x1>
 366:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <timer0_millis+0x2>
 36a:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <timer0_millis+0x3>
 36e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <timer0_overflow_count>
 372:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <timer0_overflow_count+0x1>
 376:	a0 91 8f 01 	lds	r26, 0x018F	; 0x80018f <timer0_overflow_count+0x2>
 37a:	b0 91 90 01 	lds	r27, 0x0190	; 0x800190 <timer0_overflow_count+0x3>
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	a1 1d       	adc	r26, r1
 382:	b1 1d       	adc	r27, r1
 384:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <timer0_overflow_count>
 388:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <timer0_overflow_count+0x1>
 38c:	a0 93 8f 01 	sts	0x018F, r26	; 0x80018f <timer0_overflow_count+0x2>
 390:	b0 93 90 01 	sts	0x0190, r27	; 0x800190 <timer0_overflow_count+0x3>
 394:	bf 91       	pop	r27
 396:	af 91       	pop	r26
 398:	9f 91       	pop	r25
 39a:	8f 91       	pop	r24
 39c:	3f 91       	pop	r19
 39e:	2f 91       	pop	r18
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <micros>:
 3aa:	3f b7       	in	r19, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <timer0_overflow_count>
 3b2:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <timer0_overflow_count+0x1>
 3b6:	a0 91 8f 01 	lds	r26, 0x018F	; 0x80018f <timer0_overflow_count+0x2>
 3ba:	b0 91 90 01 	lds	r27, 0x0190	; 0x800190 <timer0_overflow_count+0x3>
 3be:	26 b5       	in	r18, 0x26	; 38
 3c0:	a8 9b       	sbis	0x15, 0	; 21
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <micros+0x24>
 3c4:	2f 3f       	cpi	r18, 0xFF	; 255
 3c6:	19 f0       	breq	.+6      	; 0x3ce <micros+0x24>
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	a1 1d       	adc	r26, r1
 3cc:	b1 1d       	adc	r27, r1
 3ce:	3f bf       	out	0x3f, r19	; 63
 3d0:	ba 2f       	mov	r27, r26
 3d2:	a9 2f       	mov	r26, r25
 3d4:	98 2f       	mov	r25, r24
 3d6:	88 27       	eor	r24, r24
 3d8:	82 0f       	add	r24, r18
 3da:	91 1d       	adc	r25, r1
 3dc:	a1 1d       	adc	r26, r1
 3de:	b1 1d       	adc	r27, r1
 3e0:	bc 01       	movw	r22, r24
 3e2:	cd 01       	movw	r24, r26
 3e4:	42 e0       	ldi	r20, 0x02	; 2
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	88 1f       	adc	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	4a 95       	dec	r20
 3f0:	d1 f7       	brne	.-12     	; 0x3e6 <micros+0x3c>
 3f2:	08 95       	ret

000003f4 <delay>:
 3f4:	cf 92       	push	r12
 3f6:	df 92       	push	r13
 3f8:	ef 92       	push	r14
 3fa:	ff 92       	push	r15
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	6b 01       	movw	r12, r22
 402:	7c 01       	movw	r14, r24
 404:	0e 94 d5 01 	call	0x3aa	; 0x3aa <micros>
 408:	eb 01       	movw	r28, r22
 40a:	c1 14       	cp	r12, r1
 40c:	d1 04       	cpc	r13, r1
 40e:	e1 04       	cpc	r14, r1
 410:	f1 04       	cpc	r15, r1
 412:	89 f0       	breq	.+34     	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 414:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <yield>
 418:	0e 94 d5 01 	call	0x3aa	; 0x3aa <micros>
 41c:	6c 1b       	sub	r22, r28
 41e:	7d 0b       	sbc	r23, r29
 420:	68 3e       	cpi	r22, 0xE8	; 232
 422:	73 40       	sbci	r23, 0x03	; 3
 424:	90 f3       	brcs	.-28     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	c8 1a       	sub	r12, r24
 42a:	d1 08       	sbc	r13, r1
 42c:	e1 08       	sbc	r14, r1
 42e:	f1 08       	sbc	r15, r1
 430:	c8 51       	subi	r28, 0x18	; 24
 432:	dc 4f       	sbci	r29, 0xFC	; 252
 434:	ea cf       	rjmp	.-44     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	ff 90       	pop	r15
 43c:	ef 90       	pop	r14
 43e:	df 90       	pop	r13
 440:	cf 90       	pop	r12
 442:	08 95       	ret

00000444 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 444:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 446:	84 b5       	in	r24, 0x24	; 36
 448:	82 60       	ori	r24, 0x02	; 2
 44a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 44c:	84 b5       	in	r24, 0x24	; 36
 44e:	81 60       	ori	r24, 0x01	; 1
 450:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 452:	85 b5       	in	r24, 0x25	; 37
 454:	82 60       	ori	r24, 0x02	; 2
 456:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 458:	85 b5       	in	r24, 0x25	; 37
 45a:	81 60       	ori	r24, 0x01	; 1
 45c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 45e:	ee e6       	ldi	r30, 0x6E	; 110
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	81 60       	ori	r24, 0x01	; 1
 466:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 468:	e1 e8       	ldi	r30, 0x81	; 129
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 46e:	80 81       	ld	r24, Z
 470:	82 60       	ori	r24, 0x02	; 2
 472:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 474:	80 81       	ld	r24, Z
 476:	81 60       	ori	r24, 0x01	; 1
 478:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 47a:	e0 e8       	ldi	r30, 0x80	; 128
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	81 60       	ori	r24, 0x01	; 1
 482:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 484:	e1 eb       	ldi	r30, 0xB1	; 177
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	84 60       	ori	r24, 0x04	; 4
 48c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 48e:	e0 eb       	ldi	r30, 0xB0	; 176
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	81 60       	ori	r24, 0x01	; 1
 496:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 498:	ea e7       	ldi	r30, 0x7A	; 122
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	84 60       	ori	r24, 0x04	; 4
 4a0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 4a2:	80 81       	ld	r24, Z
 4a4:	82 60       	ori	r24, 0x02	; 2
 4a6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 4a8:	80 81       	ld	r24, Z
 4aa:	81 60       	ori	r24, 0x01	; 1
 4ac:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 4ae:	80 81       	ld	r24, Z
 4b0:	80 68       	ori	r24, 0x80	; 128
 4b2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 4b4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4b8:	08 95       	ret

000004ba <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	81 f0       	breq	.+32     	; 0x4de <turnOffPWM+0x24>
 4be:	28 f4       	brcc	.+10     	; 0x4ca <turnOffPWM+0x10>
 4c0:	81 30       	cpi	r24, 0x01	; 1
 4c2:	99 f0       	breq	.+38     	; 0x4ea <turnOffPWM+0x30>
 4c4:	82 30       	cpi	r24, 0x02	; 2
 4c6:	a1 f0       	breq	.+40     	; 0x4f0 <turnOffPWM+0x36>
 4c8:	08 95       	ret
 4ca:	87 30       	cpi	r24, 0x07	; 7
 4cc:	a9 f0       	breq	.+42     	; 0x4f8 <turnOffPWM+0x3e>
 4ce:	88 30       	cpi	r24, 0x08	; 8
 4d0:	b9 f0       	breq	.+46     	; 0x500 <turnOffPWM+0x46>
 4d2:	84 30       	cpi	r24, 0x04	; 4
 4d4:	d1 f4       	brne	.+52     	; 0x50a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4d6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4da:	8f 7d       	andi	r24, 0xDF	; 223
 4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 4de:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4e2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4e4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4e8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 4ea:	84 b5       	in	r24, 0x24	; 36
 4ec:	8f 77       	andi	r24, 0x7F	; 127
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 4f0:	84 b5       	in	r24, 0x24	; 36
 4f2:	8f 7d       	andi	r24, 0xDF	; 223
 4f4:	84 bd       	out	0x24, r24	; 36
 4f6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 4f8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4fc:	8f 77       	andi	r24, 0x7F	; 127
 4fe:	03 c0       	rjmp	.+6      	; 0x506 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 500:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 504:	8f 7d       	andi	r24, 0xDF	; 223
 506:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 50a:	08 95       	ret

0000050c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	fc 01       	movw	r30, r24
 514:	e4 58       	subi	r30, 0x84	; 132
 516:	ff 4f       	sbci	r31, 0xFF	; 255
 518:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 51a:	fc 01       	movw	r30, r24
 51c:	e0 57       	subi	r30, 0x70	; 112
 51e:	ff 4f       	sbci	r31, 0xFF	; 255
 520:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 522:	88 23       	and	r24, r24
 524:	61 f1       	breq	.+88     	; 0x57e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	fc 01       	movw	r30, r24
 52e:	e2 55       	subi	r30, 0x52	; 82
 530:	ff 4f       	sbci	r31, 0xFF	; 255
 532:	c5 91       	lpm	r28, Z+
 534:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 536:	fc 01       	movw	r30, r24
 538:	ec 55       	subi	r30, 0x5C	; 92
 53a:	ff 4f       	sbci	r31, 0xFF	; 255
 53c:	a5 91       	lpm	r26, Z+
 53e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 540:	61 11       	cpse	r22, r1
 542:	09 c0       	rjmp	.+18     	; 0x556 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 544:	9f b7       	in	r25, 0x3f	; 63
                cli();
 546:	f8 94       	cli
		*reg &= ~bit;
 548:	88 81       	ld	r24, Y
 54a:	20 95       	com	r18
 54c:	82 23       	and	r24, r18
 54e:	88 83       	st	Y, r24
		*out &= ~bit;
 550:	ec 91       	ld	r30, X
 552:	2e 23       	and	r18, r30
 554:	0b c0       	rjmp	.+22     	; 0x56c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 556:	62 30       	cpi	r22, 0x02	; 2
 558:	61 f4       	brne	.+24     	; 0x572 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 55a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 55c:	f8 94       	cli
		*reg &= ~bit;
 55e:	38 81       	ld	r19, Y
 560:	82 2f       	mov	r24, r18
 562:	80 95       	com	r24
 564:	83 23       	and	r24, r19
 566:	88 83       	st	Y, r24
		*out |= bit;
 568:	ec 91       	ld	r30, X
 56a:	2e 2b       	or	r18, r30
 56c:	2c 93       	st	X, r18
		SREG = oldSREG;
 56e:	9f bf       	out	0x3f, r25	; 63
 570:	06 c0       	rjmp	.+12     	; 0x57e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 572:	8f b7       	in	r24, 0x3f	; 63
                cli();
 574:	f8 94       	cli
		*reg |= bit;
 576:	e8 81       	ld	r30, Y
 578:	2e 2b       	or	r18, r30
 57a:	28 83       	st	Y, r18
		SREG = oldSREG;
 57c:	8f bf       	out	0x3f, r24	; 63
	}
}
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	08 95       	ret

00000584 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 58a:	28 2f       	mov	r18, r24
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	f9 01       	movw	r30, r18
 590:	e8 59       	subi	r30, 0x98	; 152
 592:	ff 4f       	sbci	r31, 0xFF	; 255
 594:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 596:	f9 01       	movw	r30, r18
 598:	e4 58       	subi	r30, 0x84	; 132
 59a:	ff 4f       	sbci	r31, 0xFF	; 255
 59c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 59e:	f9 01       	movw	r30, r18
 5a0:	e0 57       	subi	r30, 0x70	; 112
 5a2:	ff 4f       	sbci	r31, 0xFF	; 255
 5a4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 5a6:	cc 23       	and	r28, r28
 5a8:	c9 f0       	breq	.+50     	; 0x5dc <digitalWrite+0x58>
 5aa:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 5ac:	81 11       	cpse	r24, r1
 5ae:	0e 94 5d 02 	call	0x4ba	; 0x4ba <turnOffPWM>

	out = portOutputRegister(port);
 5b2:	ec 2f       	mov	r30, r28
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	ee 0f       	add	r30, r30
 5b8:	ff 1f       	adc	r31, r31
 5ba:	ec 55       	subi	r30, 0x5C	; 92
 5bc:	ff 4f       	sbci	r31, 0xFF	; 255
 5be:	a5 91       	lpm	r26, Z+
 5c0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 5c2:	8f b7       	in	r24, 0x3f	; 63
	cli();
 5c4:	f8 94       	cli

	if (val == LOW) {
 5c6:	11 11       	cpse	r17, r1
 5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <digitalWrite+0x50>
		*out &= ~bit;
 5ca:	9c 91       	ld	r25, X
 5cc:	ed 2f       	mov	r30, r29
 5ce:	e0 95       	com	r30
 5d0:	e9 23       	and	r30, r25
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <digitalWrite+0x54>
	} else {
		*out |= bit;
 5d4:	ec 91       	ld	r30, X
 5d6:	ed 2b       	or	r30, r29
 5d8:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 5da:	8f bf       	out	0x3f, r24	; 63
}
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	1f 91       	pop	r17
 5e2:	08 95       	ret

000005e4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 5e4:	08 95       	ret

000005e6 <__tablejump2__>:
 5e6:	ee 0f       	add	r30, r30
 5e8:	ff 1f       	adc	r31, r31
 5ea:	05 90       	lpm	r0, Z+
 5ec:	f4 91       	lpm	r31, Z
 5ee:	e0 2d       	mov	r30, r0
 5f0:	09 94       	ijmp

000005f2 <__do_global_dtors>:
 5f2:	10 e0       	ldi	r17, 0x00	; 0
 5f4:	cd e5       	ldi	r28, 0x5D	; 93
 5f6:	d0 e0       	ldi	r29, 0x00	; 0
 5f8:	04 c0       	rjmp	.+8      	; 0x602 <__do_global_dtors+0x10>
 5fa:	fe 01       	movw	r30, r28
 5fc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__tablejump2__>
 600:	21 96       	adiw	r28, 0x01	; 1
 602:	ce 35       	cpi	r28, 0x5E	; 94
 604:	d1 07       	cpc	r29, r17
 606:	c9 f7       	brne	.-14     	; 0x5fa <__do_global_dtors+0x8>
 608:	f8 94       	cli

0000060a <__stop_program>:
 60a:	ff cf       	rjmp	.-2      	; 0x60a <__stop_program>
