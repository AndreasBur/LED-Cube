
LedCube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000055e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800100  00800100  000005d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001802  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000864  00000000  00000000  00001f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a44  00000000  00000000  000027fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00003240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b9  00000000  00000000  000034f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b4c  00000000  00000000  00003cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000047f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__dtors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_16>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	97 00       	.word	0x0097	; ????

000000ba <__ctors_end>:
  ba:	9e 00       	.word	0x009e	; ????

000000bc <__dtors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d8 e0       	ldi	r29, 0x08	; 8
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a2 39       	cpi	r26, 0x92	; 146
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>

000000d8 <__do_global_ctors>:
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	cd e5       	ldi	r28, 0x5D	; 93
  dc:	d0 e0       	ldi	r29, 0x00	; 0
  de:	04 c0       	rjmp	.+8      	; 0xe8 <__do_global_ctors+0x10>
  e0:	21 97       	sbiw	r28, 0x01	; 1
  e2:	fe 01       	movw	r30, r28
  e4:	0e 94 9c 02 	call	0x538	; 0x538 <__tablejump2__>
  e8:	cc 35       	cpi	r28, 0x5C	; 92
  ea:	d1 07       	cpc	r29, r17
  ec:	c9 f7       	brne	.-14     	; 0xe0 <__do_global_ctors+0x8>
  ee:	0e 94 25 01 	call	0x24a	; 0x24a <main>
  f2:	0c 94 a2 02 	jmp	0x544	; 0x544 <__do_global_dtors>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <setup>:

LedCube Cube(SER_74, SCK_74, RCK_74);

void setup() {
	// put your setup code here, to run once:
	pinMode(SER_74, OUTPUT);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	8d e0       	ldi	r24, 0x0D	; 13
  fe:	0e 94 2f 02 	call	0x45e	; 0x45e <pinMode>
	pinMode(RCK_74, OUTPUT);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	8c e0       	ldi	r24, 0x0C	; 12
 106:	0e 94 2f 02 	call	0x45e	; 0x45e <pinMode>
	pinMode(SCK_74, OUTPUT);
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	8b e0       	ldi	r24, 0x0B	; 11
 10e:	0e 94 2f 02 	call	0x45e	; 0x45e <pinMode>
	digitalWrite(RCK_74, LOW);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	8c e0       	ldi	r24, 0x0C	; 12
 116:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <digitalWrite>

0000011a <loop>:
}

void loop() {
	delay(500);
 11a:	64 ef       	ldi	r22, 0xF4	; 244
 11c:	71 e0       	ldi	r23, 0x01	; 1
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 a3 01 	call	0x346	; 0x346 <delay>
	Cube.task();
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	0c 94 14 01 	jmp	0x228	; 0x228 <_ZN7LedCube4taskEv>

0000012e <_GLOBAL__sub_I_Cube>:

#define SER_74 13  // serial input
#define RCK_74 12  // storage input
#define SCK_74 11  // clock input

LedCube Cube(SER_74, SCK_74, RCK_74);
 12e:	2c e0       	ldi	r18, 0x0C	; 12
 130:	4b e0       	ldi	r20, 0x0B	; 11
 132:	6d e0       	ldi	r22, 0x0D	; 13
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0c 94 a2 00 	jmp	0x144	; 0x144 <_ZN7LedCubeC1Ehhh>

0000013c <_GLOBAL__sub_D_Cube>:
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0c 94 a8 00 	jmp	0x150	; 0x150 <_ZN7LedCubeD1Ev>

00000144 <_ZN7LedCubeC1Ehhh>:
 *  \param[in]      
 *  \param[in]      
 *  \param[in]      
 *  \return         -
 *****************************************************************************************************************************************************/
LedCube::LedCube(byte sDataInPin, byte sClockPin, byte sStoragePin)
 144:	fc 01       	movw	r30, r24
{
	DataInPin = sDataInPin;
 146:	60 83       	st	Z, r22
	ClockPin = sClockPin;
 148:	41 83       	std	Z+1, r20	; 0x01
	StoragePin = sStoragePin;
 14a:	22 83       	std	Z+2, r18	; 0x02
	CurrentLayer = 0;
 14c:	13 82       	std	Z+3, r1	; 0x03
 14e:	08 95       	ret

00000150 <_ZN7LedCubeD1Ev>:


/******************************************************************************************************************************************************
  DESTRUCTOR OF LedCube
******************************************************************************************************************************************************/
LedCube::~LedCube()
 150:	08 95       	ret

00000152 <_ZN7LedCube8sendDataEh>:
 *  \param[in]      
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
void LedCube::sendData(byte Data)
{
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	8c 01       	movw	r16, r24
 160:	c0 e0       	ldi	r28, 0x00	; 0
 162:	d0 e0       	ldi	r29, 0x00	; 0
	for (byte i = 0; i < 8; i++) {
		// LSB First
		digitalWriteFast(DataInPin, !!(Data & (1 << i)));
 164:	e6 2e       	mov	r14, r22
 166:	f1 2c       	mov	r15, r1
 168:	b7 01       	movw	r22, r14
 16a:	0c 2e       	mov	r0, r28
 16c:	02 c0       	rjmp	.+4      	; 0x172 <_ZN7LedCube8sendDataEh+0x20>
 16e:	75 95       	asr	r23
 170:	67 95       	ror	r22
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <_ZN7LedCube8sendDataEh+0x1c>
 176:	61 70       	andi	r22, 0x01	; 1
 178:	77 27       	eor	r23, r23
 17a:	f8 01       	movw	r30, r16
 17c:	80 81       	ld	r24, Z
 17e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <digitalWrite>
		// MSB First
		//digitalWrite(DataInPin, !!(Data & (1 << (7 - i))));
		
		digitalWriteFast(ClockPin, HIGH);
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	f8 01       	movw	r30, r16
 186:	81 81       	ldd	r24, Z+1	; 0x01
 188:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <digitalWrite>
		digitalWriteFast(ClockPin, LOW);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	f8 01       	movw	r30, r16
 190:	81 81       	ldd	r24, Z+1	; 0x01
 192:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <digitalWrite>
 196:	21 96       	adiw	r28, 0x01	; 1
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
void LedCube::sendData(byte Data)
{
	for (byte i = 0; i < 8; i++) {
 198:	c8 30       	cpi	r28, 0x08	; 8
 19a:	d1 05       	cpc	r29, r1
 19c:	29 f7       	brne	.-54     	; 0x168 <_ZN7LedCube8sendDataEh+0x16>
		//digitalWrite(DataInPin, !!(Data & (1 << (7 - i))));
		
		digitalWriteFast(ClockPin, HIGH);
		digitalWriteFast(ClockPin, LOW);
	}
} /* sendData */
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	08 95       	ret

000001ac <_ZN7LedCube9showLayerEh>:
 *  \param[in]      
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showLayer(byte Layer)
{
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
	stdReturnType ReturnValue = E_NOT_OK;
	
	if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
 1b8:	68 30       	cpi	r22, 0x08	; 8
 1ba:	70 f5       	brcc	.+92     	; 0x218 <_ZN7LedCube9showLayerEh+0x6c>
 1bc:	ec 01       	movw	r28, r24
		/* put on given layer */
		sendData(1 << (Layer - 1));
 1be:	06 2f       	mov	r16, r22
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	c8 01       	movw	r24, r16
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <_ZN7LedCube9showLayerEh+0x22>
 1cc:	66 0f       	add	r22, r22
 1ce:	8a 95       	dec	r24
 1d0:	ea f7       	brpl	.-6      	; 0x1cc <_ZN7LedCube9showLayerEh+0x20>
 1d2:	ce 01       	movw	r24, r28
 1d4:	0e 94 a9 00 	call	0x152	; 0x152 <_ZN7LedCube8sendDataEh>
 1d8:	e1 2c       	mov	r14, r1
 1da:	f1 2c       	mov	r15, r1
		//sendData(1 << Layer);
		
		for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
			sendData(CurrentFrame[Y][Layer]);
 1dc:	ec 81       	ldd	r30, Y+4	; 0x04
 1de:	fd 81       	ldd	r31, Y+5	; 0x05
 1e0:	ee 0d       	add	r30, r14
 1e2:	ff 1d       	adc	r31, r15
 1e4:	01 90       	ld	r0, Z+
 1e6:	f0 81       	ld	r31, Z
 1e8:	e0 2d       	mov	r30, r0
 1ea:	e0 0f       	add	r30, r16
 1ec:	f1 1f       	adc	r31, r17
 1ee:	60 81       	ld	r22, Z
 1f0:	ce 01       	movw	r24, r28
 1f2:	0e 94 a9 00 	call	0x152	; 0x152 <_ZN7LedCube8sendDataEh>
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	e8 0e       	add	r14, r24
 1fa:	f1 1c       	adc	r15, r1
	if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
		/* put on given layer */
		sendData(1 << (Layer - 1));
		//sendData(1 << Layer);
		
		for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	e8 16       	cp	r14, r24
 200:	f1 04       	cpc	r15, r1
 202:	61 f7       	brne	.-40     	; 0x1dc <_ZN7LedCube9showLayerEh+0x30>

		//for(byte j = (LEDCUBE_NUMBER_OF_LAYERS * Layer) - 1; j >= LEDCUBE_NUMBER_OF_LAYERS * (Layer - 1); j--) {
			//sendData(CubeBuffer[j]);
		//}

		digitalWriteFast(StoragePin, HIGH);
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	8a 81       	ldd	r24, Y+2	; 0x02
 208:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <digitalWrite>
		digitalWriteFast(StoragePin, LOW);
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	8a 81       	ldd	r24, Y+2	; 0x02
 210:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <digitalWrite>
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	01 c0       	rjmp	.+2      	; 0x21a <_ZN7LedCube9showLayerEh+0x6e>
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showLayer(byte Layer)
{
	stdReturnType ReturnValue = E_NOT_OK;
 218:	81 e0       	ldi	r24, 0x01	; 1
		digitalWriteFast(StoragePin, LOW);

		ReturnValue = E_OK;
	}
	return ReturnValue;
} /* showLayer */
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	08 95       	ret

00000228 <_ZN7LedCube4taskEv>:
 *  \param[in]      
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
void LedCube::task()
{
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
	if(CurrentLayer >= LEDCUBE_NUMBER_OF_LAYERS) {
 22e:	6b 81       	ldd	r22, Y+3	; 0x03
 230:	68 30       	cpi	r22, 0x08	; 8
 232:	10 f0       	brcs	.+4      	; 0x238 <_ZN7LedCube4taskEv+0x10>
		CurrentLayer = 0;
 234:	1b 82       	std	Y+3, r1	; 0x03
 236:	05 c0       	rjmp	.+10     	; 0x242 <_ZN7LedCube4taskEv+0x1a>
	} else {
		showLayer(CurrentLayer);
 238:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN7LedCube9showLayerEh>
		CurrentLayer++;
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	8f 5f       	subi	r24, 0xFF	; 255
 240:	8b 83       	std	Y+3, r24	; 0x03
	}
} /* task */
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 248:	08 95       	ret

0000024a <main>:

int main(void)
{
	init();
 24a:	0e 94 cb 01 	call	0x396	; 0x396 <init>

	initVariant();
 24e:	0e 94 24 01 	call	0x248	; 0x248 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 252:	0e 94 7d 00 	call	0xfa	; 0xfa <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 256:	c0 e0       	ldi	r28, 0x00	; 0
 258:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 25a:	0e 94 8d 00 	call	0x11a	; 0x11a <loop>
		if (serialEventRun) serialEventRun();
 25e:	20 97       	sbiw	r28, 0x00	; 0
 260:	e1 f3       	breq	.-8      	; 0x25a <main+0x10>
 262:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 266:	f9 cf       	rjmp	.-14     	; 0x25a <main+0x10>

00000268 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	2f 93       	push	r18
 274:	3f 93       	push	r19
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
 27a:	af 93       	push	r26
 27c:	bf 93       	push	r27
 27e:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <timer0_millis>
 282:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <timer0_millis+0x1>
 286:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <timer0_millis+0x2>
 28a:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <timer0_millis+0x3>
 28e:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <timer0_fract>
 292:	23 e0       	ldi	r18, 0x03	; 3
 294:	23 0f       	add	r18, r19
 296:	2d 37       	cpi	r18, 0x7D	; 125
 298:	20 f4       	brcc	.+8      	; 0x2a2 <__vector_16+0x3a>
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	a1 1d       	adc	r26, r1
 29e:	b1 1d       	adc	r27, r1
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <__vector_16+0x44>
 2a2:	26 e8       	ldi	r18, 0x86	; 134
 2a4:	23 0f       	add	r18, r19
 2a6:	02 96       	adiw	r24, 0x02	; 2
 2a8:	a1 1d       	adc	r26, r1
 2aa:	b1 1d       	adc	r27, r1
 2ac:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <timer0_fract>
 2b0:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <timer0_millis>
 2b4:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <timer0_millis+0x1>
 2b8:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <timer0_millis+0x2>
 2bc:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <timer0_millis+0x3>
 2c0:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timer0_overflow_count>
 2c4:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timer0_overflow_count+0x1>
 2c8:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <timer0_overflow_count+0x2>
 2cc:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <timer0_overflow_count+0x3>
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	a1 1d       	adc	r26, r1
 2d4:	b1 1d       	adc	r27, r1
 2d6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timer0_overflow_count>
 2da:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timer0_overflow_count+0x1>
 2de:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timer0_overflow_count+0x2>
 2e2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timer0_overflow_count+0x3>
 2e6:	bf 91       	pop	r27
 2e8:	af 91       	pop	r26
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	3f 91       	pop	r19
 2f0:	2f 91       	pop	r18
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <micros>:
 2fc:	3f b7       	in	r19, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timer0_overflow_count>
 304:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timer0_overflow_count+0x1>
 308:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <timer0_overflow_count+0x2>
 30c:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <timer0_overflow_count+0x3>
 310:	26 b5       	in	r18, 0x26	; 38
 312:	a8 9b       	sbis	0x15, 0	; 21
 314:	05 c0       	rjmp	.+10     	; 0x320 <micros+0x24>
 316:	2f 3f       	cpi	r18, 0xFF	; 255
 318:	19 f0       	breq	.+6      	; 0x320 <micros+0x24>
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	a1 1d       	adc	r26, r1
 31e:	b1 1d       	adc	r27, r1
 320:	3f bf       	out	0x3f, r19	; 63
 322:	ba 2f       	mov	r27, r26
 324:	a9 2f       	mov	r26, r25
 326:	98 2f       	mov	r25, r24
 328:	88 27       	eor	r24, r24
 32a:	82 0f       	add	r24, r18
 32c:	91 1d       	adc	r25, r1
 32e:	a1 1d       	adc	r26, r1
 330:	b1 1d       	adc	r27, r1
 332:	bc 01       	movw	r22, r24
 334:	cd 01       	movw	r24, r26
 336:	42 e0       	ldi	r20, 0x02	; 2
 338:	66 0f       	add	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	88 1f       	adc	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	4a 95       	dec	r20
 342:	d1 f7       	brne	.-12     	; 0x338 <micros+0x3c>
 344:	08 95       	ret

00000346 <delay>:
 346:	cf 92       	push	r12
 348:	df 92       	push	r13
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	6b 01       	movw	r12, r22
 354:	7c 01       	movw	r14, r24
 356:	0e 94 7e 01 	call	0x2fc	; 0x2fc <micros>
 35a:	eb 01       	movw	r28, r22
 35c:	c1 14       	cp	r12, r1
 35e:	d1 04       	cpc	r13, r1
 360:	e1 04       	cpc	r14, r1
 362:	f1 04       	cpc	r15, r1
 364:	89 f0       	breq	.+34     	; 0x388 <delay+0x42>
 366:	0e 94 9b 02 	call	0x536	; 0x536 <yield>
 36a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <micros>
 36e:	6c 1b       	sub	r22, r28
 370:	7d 0b       	sbc	r23, r29
 372:	68 3e       	cpi	r22, 0xE8	; 232
 374:	73 40       	sbci	r23, 0x03	; 3
 376:	90 f3       	brcs	.-28     	; 0x35c <delay+0x16>
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	c8 1a       	sub	r12, r24
 37c:	d1 08       	sbc	r13, r1
 37e:	e1 08       	sbc	r14, r1
 380:	f1 08       	sbc	r15, r1
 382:	c8 51       	subi	r28, 0x18	; 24
 384:	dc 4f       	sbci	r29, 0xFC	; 252
 386:	ea cf       	rjmp	.-44     	; 0x35c <delay+0x16>
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	ff 90       	pop	r15
 38e:	ef 90       	pop	r14
 390:	df 90       	pop	r13
 392:	cf 90       	pop	r12
 394:	08 95       	ret

00000396 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 396:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 398:	84 b5       	in	r24, 0x24	; 36
 39a:	82 60       	ori	r24, 0x02	; 2
 39c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 39e:	84 b5       	in	r24, 0x24	; 36
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 3a4:	85 b5       	in	r24, 0x25	; 37
 3a6:	82 60       	ori	r24, 0x02	; 2
 3a8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 3aa:	85 b5       	in	r24, 0x25	; 37
 3ac:	81 60       	ori	r24, 0x01	; 1
 3ae:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 3b0:	ee e6       	ldi	r30, 0x6E	; 110
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	81 60       	ori	r24, 0x01	; 1
 3b8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 3ba:	e1 e8       	ldi	r30, 0x81	; 129
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 3c0:	80 81       	ld	r24, Z
 3c2:	82 60       	ori	r24, 0x02	; 2
 3c4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 3c6:	80 81       	ld	r24, Z
 3c8:	81 60       	ori	r24, 0x01	; 1
 3ca:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 3cc:	e0 e8       	ldi	r30, 0x80	; 128
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	81 60       	ori	r24, 0x01	; 1
 3d4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 3d6:	e1 eb       	ldi	r30, 0xB1	; 177
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	84 60       	ori	r24, 0x04	; 4
 3de:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 3e0:	e0 eb       	ldi	r30, 0xB0	; 176
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	81 60       	ori	r24, 0x01	; 1
 3e8:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 3ea:	ea e7       	ldi	r30, 0x7A	; 122
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	84 60       	ori	r24, 0x04	; 4
 3f2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 3f4:	80 81       	ld	r24, Z
 3f6:	82 60       	ori	r24, 0x02	; 2
 3f8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 3fa:	80 81       	ld	r24, Z
 3fc:	81 60       	ori	r24, 0x01	; 1
 3fe:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 400:	80 81       	ld	r24, Z
 402:	80 68       	ori	r24, 0x80	; 128
 404:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 406:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 40a:	08 95       	ret

0000040c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 40c:	83 30       	cpi	r24, 0x03	; 3
 40e:	81 f0       	breq	.+32     	; 0x430 <turnOffPWM+0x24>
 410:	28 f4       	brcc	.+10     	; 0x41c <turnOffPWM+0x10>
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	99 f0       	breq	.+38     	; 0x43c <turnOffPWM+0x30>
 416:	82 30       	cpi	r24, 0x02	; 2
 418:	a1 f0       	breq	.+40     	; 0x442 <turnOffPWM+0x36>
 41a:	08 95       	ret
 41c:	87 30       	cpi	r24, 0x07	; 7
 41e:	a9 f0       	breq	.+42     	; 0x44a <turnOffPWM+0x3e>
 420:	88 30       	cpi	r24, 0x08	; 8
 422:	b9 f0       	breq	.+46     	; 0x452 <turnOffPWM+0x46>
 424:	84 30       	cpi	r24, 0x04	; 4
 426:	d1 f4       	brne	.+52     	; 0x45c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 428:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 42c:	8f 7d       	andi	r24, 0xDF	; 223
 42e:	03 c0       	rjmp	.+6      	; 0x436 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 430:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 434:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 436:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 43a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 43c:	84 b5       	in	r24, 0x24	; 36
 43e:	8f 77       	andi	r24, 0x7F	; 127
 440:	02 c0       	rjmp	.+4      	; 0x446 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 442:	84 b5       	in	r24, 0x24	; 36
 444:	8f 7d       	andi	r24, 0xDF	; 223
 446:	84 bd       	out	0x24, r24	; 36
 448:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 44a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 44e:	8f 77       	andi	r24, 0x7F	; 127
 450:	03 c0       	rjmp	.+6      	; 0x458 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 452:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 456:	8f 7d       	andi	r24, 0xDF	; 223
 458:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 45c:	08 95       	ret

0000045e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	fc 01       	movw	r30, r24
 466:	e4 58       	subi	r30, 0x84	; 132
 468:	ff 4f       	sbci	r31, 0xFF	; 255
 46a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 46c:	fc 01       	movw	r30, r24
 46e:	e0 57       	subi	r30, 0x70	; 112
 470:	ff 4f       	sbci	r31, 0xFF	; 255
 472:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 474:	88 23       	and	r24, r24
 476:	61 f1       	breq	.+88     	; 0x4d0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	fc 01       	movw	r30, r24
 480:	e2 55       	subi	r30, 0x52	; 82
 482:	ff 4f       	sbci	r31, 0xFF	; 255
 484:	c5 91       	lpm	r28, Z+
 486:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 488:	fc 01       	movw	r30, r24
 48a:	ec 55       	subi	r30, 0x5C	; 92
 48c:	ff 4f       	sbci	r31, 0xFF	; 255
 48e:	a5 91       	lpm	r26, Z+
 490:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 492:	61 11       	cpse	r22, r1
 494:	09 c0       	rjmp	.+18     	; 0x4a8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 496:	9f b7       	in	r25, 0x3f	; 63
                cli();
 498:	f8 94       	cli
		*reg &= ~bit;
 49a:	88 81       	ld	r24, Y
 49c:	20 95       	com	r18
 49e:	82 23       	and	r24, r18
 4a0:	88 83       	st	Y, r24
		*out &= ~bit;
 4a2:	ec 91       	ld	r30, X
 4a4:	2e 23       	and	r18, r30
 4a6:	0b c0       	rjmp	.+22     	; 0x4be <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 4a8:	62 30       	cpi	r22, 0x02	; 2
 4aa:	61 f4       	brne	.+24     	; 0x4c4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 4ac:	9f b7       	in	r25, 0x3f	; 63
                cli();
 4ae:	f8 94       	cli
		*reg &= ~bit;
 4b0:	38 81       	ld	r19, Y
 4b2:	82 2f       	mov	r24, r18
 4b4:	80 95       	com	r24
 4b6:	83 23       	and	r24, r19
 4b8:	88 83       	st	Y, r24
		*out |= bit;
 4ba:	ec 91       	ld	r30, X
 4bc:	2e 2b       	or	r18, r30
 4be:	2c 93       	st	X, r18
		SREG = oldSREG;
 4c0:	9f bf       	out	0x3f, r25	; 63
 4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 4c4:	8f b7       	in	r24, 0x3f	; 63
                cli();
 4c6:	f8 94       	cli
		*reg |= bit;
 4c8:	e8 81       	ld	r30, Y
 4ca:	2e 2b       	or	r18, r30
 4cc:	28 83       	st	Y, r18
		SREG = oldSREG;
 4ce:	8f bf       	out	0x3f, r24	; 63
	}
}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 4d6:	1f 93       	push	r17
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 4dc:	28 2f       	mov	r18, r24
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	f9 01       	movw	r30, r18
 4e2:	e8 59       	subi	r30, 0x98	; 152
 4e4:	ff 4f       	sbci	r31, 0xFF	; 255
 4e6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 4e8:	f9 01       	movw	r30, r18
 4ea:	e4 58       	subi	r30, 0x84	; 132
 4ec:	ff 4f       	sbci	r31, 0xFF	; 255
 4ee:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 4f0:	f9 01       	movw	r30, r18
 4f2:	e0 57       	subi	r30, 0x70	; 112
 4f4:	ff 4f       	sbci	r31, 0xFF	; 255
 4f6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 4f8:	cc 23       	and	r28, r28
 4fa:	c9 f0       	breq	.+50     	; 0x52e <digitalWrite+0x58>
 4fc:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 4fe:	81 11       	cpse	r24, r1
 500:	0e 94 06 02 	call	0x40c	; 0x40c <turnOffPWM>

	out = portOutputRegister(port);
 504:	ec 2f       	mov	r30, r28
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	ee 0f       	add	r30, r30
 50a:	ff 1f       	adc	r31, r31
 50c:	ec 55       	subi	r30, 0x5C	; 92
 50e:	ff 4f       	sbci	r31, 0xFF	; 255
 510:	a5 91       	lpm	r26, Z+
 512:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 514:	8f b7       	in	r24, 0x3f	; 63
	cli();
 516:	f8 94       	cli

	if (val == LOW) {
 518:	11 11       	cpse	r17, r1
 51a:	05 c0       	rjmp	.+10     	; 0x526 <digitalWrite+0x50>
		*out &= ~bit;
 51c:	9c 91       	ld	r25, X
 51e:	ed 2f       	mov	r30, r29
 520:	e0 95       	com	r30
 522:	e9 23       	and	r30, r25
 524:	02 c0       	rjmp	.+4      	; 0x52a <digitalWrite+0x54>
	} else {
		*out |= bit;
 526:	ec 91       	ld	r30, X
 528:	ed 2b       	or	r30, r29
 52a:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 52c:	8f bf       	out	0x3f, r24	; 63
}
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	1f 91       	pop	r17
 534:	08 95       	ret

00000536 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 536:	08 95       	ret

00000538 <__tablejump2__>:
 538:	ee 0f       	add	r30, r30
 53a:	ff 1f       	adc	r31, r31
 53c:	05 90       	lpm	r0, Z+
 53e:	f4 91       	lpm	r31, Z
 540:	e0 2d       	mov	r30, r0
 542:	09 94       	ijmp

00000544 <__do_global_dtors>:
 544:	10 e0       	ldi	r17, 0x00	; 0
 546:	cd e5       	ldi	r28, 0x5D	; 93
 548:	d0 e0       	ldi	r29, 0x00	; 0
 54a:	04 c0       	rjmp	.+8      	; 0x554 <__do_global_dtors+0x10>
 54c:	fe 01       	movw	r30, r28
 54e:	0e 94 9c 02 	call	0x538	; 0x538 <__tablejump2__>
 552:	21 96       	adiw	r28, 0x01	; 1
 554:	ce 35       	cpi	r28, 0x5E	; 94
 556:	d1 07       	cpc	r29, r17
 558:	c9 f7       	brne	.-14     	; 0x54c <__do_global_dtors+0x8>
 55a:	f8 94       	cli

0000055c <__stop_program>:
 55c:	ff cf       	rjmp	.-2      	; 0x55c <__stop_program>
