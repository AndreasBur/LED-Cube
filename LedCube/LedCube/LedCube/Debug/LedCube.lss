
LedCube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000065e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800100  00800100  0000065e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000065e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001db9  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f1  00000000  00000000  00002619  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c6c  00000000  00000000  00002f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000370  00000000  00000000  00003b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000995  00000000  00000000  00003ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000107f  00000000  00000000  0000487d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000058fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__dtors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_16>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	8b 00       	.word	0x008b	; ????

000000ba <__ctors_end>:
  ba:	92 00       	.word	0x0092	; ????

000000bc <__dtors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d8 e0       	ldi	r29, 0x08	; 8
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a2 39       	cpi	r26, 0x92	; 146
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>

000000d8 <__do_global_ctors>:
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	cd e5       	ldi	r28, 0x5D	; 93
  dc:	d0 e0       	ldi	r29, 0x00	; 0
  de:	04 c0       	rjmp	.+8      	; 0xe8 <__do_global_ctors+0x10>
  e0:	21 97       	sbiw	r28, 0x01	; 1
  e2:	fe 01       	movw	r30, r28
  e4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__tablejump2__>
  e8:	cc 35       	cpi	r28, 0x5C	; 92
  ea:	d1 07       	cpc	r29, r17
  ec:	c9 f7       	brne	.-14     	; 0xe0 <__do_global_ctors+0x8>
  ee:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
  f2:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__do_global_dtors>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <setup>:

LedCube Cube(SER_74, SCK_74, RCK_74);


void setup() {
	Cube.init();
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_ZN7LedCube4initEv>

00000102 <loop>:
}

void loop() {
	delay(500);
 102:	64 ef       	ldi	r22, 0xF4	; 244
 104:	71 e0       	ldi	r23, 0x01	; 1
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <delay>
	Cube.task();
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_ZN7LedCube4taskEv>

00000116 <_GLOBAL__sub_I_Cube>:

#define SER_74 13  // serial input
#define RCK_74 12  // storage input
#define SCK_74 11  // clock input

LedCube Cube(SER_74, SCK_74, RCK_74);
 116:	2c e0       	ldi	r18, 0x0C	; 12
 118:	4b e0       	ldi	r20, 0x0B	; 11
 11a:	6d e0       	ldi	r22, 0x0D	; 13
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0c 94 96 00 	jmp	0x12c	; 0x12c <_ZN7LedCubeC1Ehhh>

00000124 <_GLOBAL__sub_D_Cube>:
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0c 94 b4 00 	jmp	0x168	; 0x168 <_ZN7LedCubeD1Ev>

0000012c <_ZN7LedCubeC1Ehhh>:
		State = LEDCUBE_STATE_SHOW_FRAME;
		return E_OK;
	} else {
		return E_NOT_OK;
	}
}
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	fc 01       	movw	r30, r24
 132:	60 83       	st	Z, r22
 134:	41 83       	std	Z+1, r20	; 0x01
 136:	22 83       	std	Z+2, r18	; 0x02
 138:	13 82       	std	Z+3, r1	; 0x03
 13a:	14 82       	std	Z+4, r1	; 0x04
 13c:	ec 01       	movw	r28, r24
 13e:	29 96       	adiw	r28, 0x09	; 9
 140:	d6 83       	std	Z+6, r29	; 0x06
 142:	c5 83       	std	Z+5, r28	; 0x05
 144:	dc 01       	movw	r26, r24
 146:	a7 5b       	subi	r26, 0xB7	; 183
 148:	bf 4f       	sbci	r27, 0xFF	; 255
 14a:	b0 87       	std	Z+8, r27	; 0x08
 14c:	a7 83       	std	Z+7, r26	; 0x07
 14e:	80 e4       	ldi	r24, 0x40	; 64
 150:	fe 01       	movw	r30, r28
 152:	98 2f       	mov	r25, r24
 154:	11 92       	st	Z+, r1
 156:	9a 95       	dec	r25
 158:	e9 f7       	brne	.-6      	; 0x154 <_ZN7LedCubeC1Ehhh+0x28>
 15a:	fd 01       	movw	r30, r26
 15c:	11 92       	st	Z+, r1
 15e:	8a 95       	dec	r24
 160:	e9 f7       	brne	.-6      	; 0x15c <_ZN7LedCubeC1Ehhh+0x30>
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <_ZN7LedCubeD1Ev>:
 168:	08 95       	ret

0000016a <_ZN7LedCube9clearCubeEv>:
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	88 81       	ld	r24, Y
 176:	0e 94 b1 02 	call	0x562	; 0x562 <digitalWrite>
 17a:	18 e4       	ldi	r17, 0x48	; 72
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	0e 94 b1 02 	call	0x562	; 0x562 <digitalWrite>
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	0e 94 b1 02 	call	0x562	; 0x562 <digitalWrite>
 18c:	11 50       	subi	r17, 0x01	; 1
 18e:	b1 f7       	brne	.-20     	; 0x17c <_ZN7LedCube9clearCubeEv+0x12>
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	0e 94 b1 02 	call	0x562	; 0x562 <digitalWrite>
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0c 94 b1 02 	jmp	0x562	; 0x562 <digitalWrite>

000001a6 <_ZN7LedCube4initEv>:
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ec 01       	movw	r28, r24
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	8c 83       	std	Y+4, r24	; 0x04
 1b0:	ce 01       	movw	r24, r28
 1b2:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN7LedCube9clearCubeEv>
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	88 81       	ld	r24, Y
 1ba:	0e 94 75 02 	call	0x4ea	; 0x4ea <pinMode>
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	0e 94 75 02 	call	0x4ea	; 0x4ea <pinMode>
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	0e 94 75 02 	call	0x4ea	; 0x4ea <pinMode>
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	8c 83       	std	Y+4, r24	; 0x04
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <_ZN7LedCube8sendDataEh>:
 *
 *  \param[in]      Data	data (Byte) to send
 *  \return         -
 *****************************************************************************************************************************************************/
void LedCube::sendData(byte Data)
{
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	8c 01       	movw	r16, r24
 1e6:	c0 e0       	ldi	r28, 0x00	; 0
 1e8:	d0 e0       	ldi	r29, 0x00	; 0
	for (byte i = 0; i < 8; i++) {
		// LSB First
		digitalWriteFast(DataInPin, !!(Data & (1 << i)));
 1ea:	e6 2e       	mov	r14, r22
 1ec:	f1 2c       	mov	r15, r1
 1ee:	b7 01       	movw	r22, r14
 1f0:	0c 2e       	mov	r0, r28
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <_ZN7LedCube8sendDataEh+0x20>
 1f4:	75 95       	asr	r23
 1f6:	67 95       	ror	r22
 1f8:	0a 94       	dec	r0
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <_ZN7LedCube8sendDataEh+0x1c>
 1fc:	61 70       	andi	r22, 0x01	; 1
 1fe:	77 27       	eor	r23, r23
 200:	f8 01       	movw	r30, r16
 202:	80 81       	ld	r24, Z
 204:	0e 94 b1 02 	call	0x562	; 0x562 <digitalWrite>
		// MSB First
		//digitalWrite(DataInPin, !!(Data & (1 << (7 - i))));
		// toggle clock pin
		digitalWriteFast(ClockPin, HIGH);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	f8 01       	movw	r30, r16
 20c:	81 81       	ldd	r24, Z+1	; 0x01
 20e:	0e 94 b1 02 	call	0x562	; 0x562 <digitalWrite>
		digitalWriteFast(ClockPin, LOW);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	f8 01       	movw	r30, r16
 216:	81 81       	ldd	r24, Z+1	; 0x01
 218:	0e 94 b1 02 	call	0x562	; 0x562 <digitalWrite>
 21c:	21 96       	adiw	r28, 0x01	; 1
 *  \param[in]      Data	data (Byte) to send
 *  \return         -
 *****************************************************************************************************************************************************/
void LedCube::sendData(byte Data)
{
	for (byte i = 0; i < 8; i++) {
 21e:	c8 30       	cpi	r28, 0x08	; 8
 220:	d1 05       	cpc	r29, r1
 222:	29 f7       	brne	.-54     	; 0x1ee <_ZN7LedCube8sendDataEh+0x16>
		//digitalWrite(DataInPin, !!(Data & (1 << (7 - i))));
		// toggle clock pin
		digitalWriteFast(ClockPin, HIGH);
		digitalWriteFast(ClockPin, LOW);
	}
} /* sendData */
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	ff 90       	pop	r15
 22e:	ef 90       	pop	r14
 230:	08 95       	ret

00000232 <_ZN7LedCube9showLayerEh>:
 *  \param[in]      Layer		layer which should be shown on the cube
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showLayer(byte Layer)
{
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
	stdReturnType ReturnValue = E_NOT_OK;
	
	if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
 23e:	68 30       	cpi	r22, 0x08	; 8
 240:	58 f5       	brcc	.+86     	; 0x298 <_ZN7LedCube9showLayerEh+0x66>
 242:	ec 01       	movw	r28, r24
		/* put on given layer */
		sendData(1 << (Layer - 1));
 244:	06 2f       	mov	r16, r22
 246:	10 e0       	ldi	r17, 0x00	; 0
 248:	c8 01       	movw	r24, r16
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	01 c0       	rjmp	.+2      	; 0x254 <_ZN7LedCube9showLayerEh+0x22>
 252:	66 0f       	add	r22, r22
 254:	8a 95       	dec	r24
 256:	ea f7       	brpl	.-6      	; 0x252 <_ZN7LedCube9showLayerEh+0x20>
 258:	ce 01       	movw	r24, r28
 25a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_ZN7LedCube8sendDataEh>
 25e:	e1 2c       	mov	r14, r1
 260:	f1 2c       	mov	r15, r1
		//sendData(1 << Layer);
		/* send the layer data to the shift registers */
		for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
			sendData(CurrentFrame[Y][Layer]);
 262:	ed 81       	ldd	r30, Y+5	; 0x05
 264:	fe 81       	ldd	r31, Y+6	; 0x06
 266:	ee 0d       	add	r30, r14
 268:	ff 1d       	adc	r31, r15
 26a:	e0 0f       	add	r30, r16
 26c:	f1 1f       	adc	r31, r17
 26e:	60 81       	ld	r22, Z
 270:	ce 01       	movw	r24, r28
 272:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_ZN7LedCube8sendDataEh>
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	e8 0e       	add	r14, r24
 27a:	f1 1c       	adc	r15, r1
	if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
		/* put on given layer */
		sendData(1 << (Layer - 1));
		//sendData(1 << Layer);
		/* send the layer data to the shift registers */
		for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
 27c:	80 e4       	ldi	r24, 0x40	; 64
 27e:	e8 16       	cp	r14, r24
 280:	f1 04       	cpc	r15, r1
 282:	79 f7       	brne	.-34     	; 0x262 <_ZN7LedCube9showLayerEh+0x30>
			sendData(CurrentFrame[Y][Layer]);
		}
		// toggle storage pin
		digitalWriteFast(StoragePin, HIGH);
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	8a 81       	ldd	r24, Y+2	; 0x02
 288:	0e 94 b1 02 	call	0x562	; 0x562 <digitalWrite>
		digitalWriteFast(StoragePin, LOW);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	0e 94 b1 02 	call	0x562	; 0x562 <digitalWrite>
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	01 c0       	rjmp	.+2      	; 0x29a <_ZN7LedCube9showLayerEh+0x68>
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showLayer(byte Layer)
{
	stdReturnType ReturnValue = E_NOT_OK;
 298:	81 e0       	ldi	r24, 0x01	; 1
		digitalWriteFast(StoragePin, LOW);

		ReturnValue = E_OK;
	}
	return ReturnValue;
} /* showLayer */
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	08 95       	ret

000002a8 <_ZN7LedCube4taskEv>:
 *					has to be called periodically
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
void LedCube::task()
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	fc 01       	movw	r30, r24
	if(State == LEDCUBE_STATE_SHOW_FRAME || State == LEDCUBE_STATE_NEXT_FRAME_READY) {
 2ae:	84 81       	ldd	r24, Z+4	; 0x04
 2b0:	82 50       	subi	r24, 0x02	; 2
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	60 f4       	brcc	.+24     	; 0x2ce <_ZN7LedCube4taskEv+0x26>
		if(CurrentLayer >= LEDCUBE_NUMBER_OF_LAYERS) {
 2b6:	63 81       	ldd	r22, Z+3	; 0x03
 2b8:	68 30       	cpi	r22, 0x08	; 8
 2ba:	10 f0       	brcs	.+4      	; 0x2c0 <_ZN7LedCube4taskEv+0x18>
			CurrentLayer = 0;
 2bc:	13 82       	std	Z+3, r1	; 0x03
 2be:	07 c0       	rjmp	.+14     	; 0x2ce <_ZN7LedCube4taskEv+0x26>
 2c0:	ef 01       	movw	r28, r30
		} else {
			showLayer(CurrentLayer);
 2c2:	cf 01       	movw	r24, r30
 2c4:	0e 94 19 01 	call	0x232	; 0x232 <_ZN7LedCube9showLayerEh>
			CurrentLayer++;
 2c8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
 2cc:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
} /* task */
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 2d4:	08 95       	ret

000002d6 <main>:

int main(void)
{
	init();
 2d6:	0e 94 11 02 	call	0x422	; 0x422 <init>

	initVariant();
 2da:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 2de:	0e 94 7d 00 	call	0xfa	; 0xfa <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 2e2:	c0 e0       	ldi	r28, 0x00	; 0
 2e4:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 2e6:	0e 94 81 00 	call	0x102	; 0x102 <loop>
		if (serialEventRun) serialEventRun();
 2ea:	20 97       	sbiw	r28, 0x00	; 0
 2ec:	e1 f3       	breq	.-8      	; 0x2e6 <main+0x10>
 2ee:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 2f2:	f9 cf       	rjmp	.-14     	; 0x2e6 <main+0x10>

000002f4 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
 30a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <timer0_millis>
 30e:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <timer0_millis+0x1>
 312:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <timer0_millis+0x2>
 316:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <timer0_millis+0x3>
 31a:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <timer0_fract>
 31e:	23 e0       	ldi	r18, 0x03	; 3
 320:	23 0f       	add	r18, r19
 322:	2d 37       	cpi	r18, 0x7D	; 125
 324:	20 f4       	brcc	.+8      	; 0x32e <__vector_16+0x3a>
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	a1 1d       	adc	r26, r1
 32a:	b1 1d       	adc	r27, r1
 32c:	05 c0       	rjmp	.+10     	; 0x338 <__vector_16+0x44>
 32e:	26 e8       	ldi	r18, 0x86	; 134
 330:	23 0f       	add	r18, r19
 332:	02 96       	adiw	r24, 0x02	; 2
 334:	a1 1d       	adc	r26, r1
 336:	b1 1d       	adc	r27, r1
 338:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <timer0_fract>
 33c:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <timer0_millis>
 340:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <timer0_millis+0x1>
 344:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <timer0_millis+0x2>
 348:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <timer0_millis+0x3>
 34c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timer0_overflow_count>
 350:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timer0_overflow_count+0x1>
 354:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <timer0_overflow_count+0x2>
 358:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <timer0_overflow_count+0x3>
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	a1 1d       	adc	r26, r1
 360:	b1 1d       	adc	r27, r1
 362:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timer0_overflow_count>
 366:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timer0_overflow_count+0x1>
 36a:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timer0_overflow_count+0x2>
 36e:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timer0_overflow_count+0x3>
 372:	bf 91       	pop	r27
 374:	af 91       	pop	r26
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <micros>:
 388:	3f b7       	in	r19, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timer0_overflow_count>
 390:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timer0_overflow_count+0x1>
 394:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <timer0_overflow_count+0x2>
 398:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <timer0_overflow_count+0x3>
 39c:	26 b5       	in	r18, 0x26	; 38
 39e:	a8 9b       	sbis	0x15, 0	; 21
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <micros+0x24>
 3a2:	2f 3f       	cpi	r18, 0xFF	; 255
 3a4:	19 f0       	breq	.+6      	; 0x3ac <micros+0x24>
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	a1 1d       	adc	r26, r1
 3aa:	b1 1d       	adc	r27, r1
 3ac:	3f bf       	out	0x3f, r19	; 63
 3ae:	ba 2f       	mov	r27, r26
 3b0:	a9 2f       	mov	r26, r25
 3b2:	98 2f       	mov	r25, r24
 3b4:	88 27       	eor	r24, r24
 3b6:	82 0f       	add	r24, r18
 3b8:	91 1d       	adc	r25, r1
 3ba:	a1 1d       	adc	r26, r1
 3bc:	b1 1d       	adc	r27, r1
 3be:	bc 01       	movw	r22, r24
 3c0:	cd 01       	movw	r24, r26
 3c2:	42 e0       	ldi	r20, 0x02	; 2
 3c4:	66 0f       	add	r22, r22
 3c6:	77 1f       	adc	r23, r23
 3c8:	88 1f       	adc	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	4a 95       	dec	r20
 3ce:	d1 f7       	brne	.-12     	; 0x3c4 <micros+0x3c>
 3d0:	08 95       	ret

000003d2 <delay>:
 3d2:	cf 92       	push	r12
 3d4:	df 92       	push	r13
 3d6:	ef 92       	push	r14
 3d8:	ff 92       	push	r15
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	6b 01       	movw	r12, r22
 3e0:	7c 01       	movw	r14, r24
 3e2:	0e 94 c4 01 	call	0x388	; 0x388 <micros>
 3e6:	eb 01       	movw	r28, r22
 3e8:	c1 14       	cp	r12, r1
 3ea:	d1 04       	cpc	r13, r1
 3ec:	e1 04       	cpc	r14, r1
 3ee:	f1 04       	cpc	r15, r1
 3f0:	89 f0       	breq	.+34     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
 3f2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <yield>
 3f6:	0e 94 c4 01 	call	0x388	; 0x388 <micros>
 3fa:	6c 1b       	sub	r22, r28
 3fc:	7d 0b       	sbc	r23, r29
 3fe:	68 3e       	cpi	r22, 0xE8	; 232
 400:	73 40       	sbci	r23, 0x03	; 3
 402:	90 f3       	brcs	.-28     	; 0x3e8 <delay+0x16>
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	c8 1a       	sub	r12, r24
 408:	d1 08       	sbc	r13, r1
 40a:	e1 08       	sbc	r14, r1
 40c:	f1 08       	sbc	r15, r1
 40e:	c8 51       	subi	r28, 0x18	; 24
 410:	dc 4f       	sbci	r29, 0xFC	; 252
 412:	ea cf       	rjmp	.-44     	; 0x3e8 <delay+0x16>
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	ff 90       	pop	r15
 41a:	ef 90       	pop	r14
 41c:	df 90       	pop	r13
 41e:	cf 90       	pop	r12
 420:	08 95       	ret

00000422 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 422:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 424:	84 b5       	in	r24, 0x24	; 36
 426:	82 60       	ori	r24, 0x02	; 2
 428:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 42a:	84 b5       	in	r24, 0x24	; 36
 42c:	81 60       	ori	r24, 0x01	; 1
 42e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 430:	85 b5       	in	r24, 0x25	; 37
 432:	82 60       	ori	r24, 0x02	; 2
 434:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 436:	85 b5       	in	r24, 0x25	; 37
 438:	81 60       	ori	r24, 0x01	; 1
 43a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 43c:	ee e6       	ldi	r30, 0x6E	; 110
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	81 60       	ori	r24, 0x01	; 1
 444:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 446:	e1 e8       	ldi	r30, 0x81	; 129
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 44c:	80 81       	ld	r24, Z
 44e:	82 60       	ori	r24, 0x02	; 2
 450:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 452:	80 81       	ld	r24, Z
 454:	81 60       	ori	r24, 0x01	; 1
 456:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 458:	e0 e8       	ldi	r30, 0x80	; 128
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 462:	e1 eb       	ldi	r30, 0xB1	; 177
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	84 60       	ori	r24, 0x04	; 4
 46a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 46c:	e0 eb       	ldi	r30, 0xB0	; 176
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	81 60       	ori	r24, 0x01	; 1
 474:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 476:	ea e7       	ldi	r30, 0x7A	; 122
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	84 60       	ori	r24, 0x04	; 4
 47e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 480:	80 81       	ld	r24, Z
 482:	82 60       	ori	r24, 0x02	; 2
 484:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 486:	80 81       	ld	r24, Z
 488:	81 60       	ori	r24, 0x01	; 1
 48a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 48c:	80 81       	ld	r24, Z
 48e:	80 68       	ori	r24, 0x80	; 128
 490:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 492:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 496:	08 95       	ret

00000498 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 498:	83 30       	cpi	r24, 0x03	; 3
 49a:	81 f0       	breq	.+32     	; 0x4bc <turnOffPWM+0x24>
 49c:	28 f4       	brcc	.+10     	; 0x4a8 <turnOffPWM+0x10>
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	99 f0       	breq	.+38     	; 0x4c8 <turnOffPWM+0x30>
 4a2:	82 30       	cpi	r24, 0x02	; 2
 4a4:	a1 f0       	breq	.+40     	; 0x4ce <turnOffPWM+0x36>
 4a6:	08 95       	ret
 4a8:	87 30       	cpi	r24, 0x07	; 7
 4aa:	a9 f0       	breq	.+42     	; 0x4d6 <turnOffPWM+0x3e>
 4ac:	88 30       	cpi	r24, 0x08	; 8
 4ae:	b9 f0       	breq	.+46     	; 0x4de <turnOffPWM+0x46>
 4b0:	84 30       	cpi	r24, 0x04	; 4
 4b2:	d1 f4       	brne	.+52     	; 0x4e8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4b4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4b8:	8f 7d       	andi	r24, 0xDF	; 223
 4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 4bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4c0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4c6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 4c8:	84 b5       	in	r24, 0x24	; 36
 4ca:	8f 77       	andi	r24, 0x7F	; 127
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 4ce:	84 b5       	in	r24, 0x24	; 36
 4d0:	8f 7d       	andi	r24, 0xDF	; 223
 4d2:	84 bd       	out	0x24, r24	; 36
 4d4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 4d6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4da:	8f 77       	andi	r24, 0x7F	; 127
 4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 4de:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4e2:	8f 7d       	andi	r24, 0xDF	; 223
 4e4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4e8:	08 95       	ret

000004ea <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	fc 01       	movw	r30, r24
 4f2:	e4 58       	subi	r30, 0x84	; 132
 4f4:	ff 4f       	sbci	r31, 0xFF	; 255
 4f6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 4f8:	fc 01       	movw	r30, r24
 4fa:	e0 57       	subi	r30, 0x70	; 112
 4fc:	ff 4f       	sbci	r31, 0xFF	; 255
 4fe:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 500:	88 23       	and	r24, r24
 502:	61 f1       	breq	.+88     	; 0x55c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	fc 01       	movw	r30, r24
 50c:	e2 55       	subi	r30, 0x52	; 82
 50e:	ff 4f       	sbci	r31, 0xFF	; 255
 510:	c5 91       	lpm	r28, Z+
 512:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 514:	fc 01       	movw	r30, r24
 516:	ec 55       	subi	r30, 0x5C	; 92
 518:	ff 4f       	sbci	r31, 0xFF	; 255
 51a:	a5 91       	lpm	r26, Z+
 51c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 51e:	61 11       	cpse	r22, r1
 520:	09 c0       	rjmp	.+18     	; 0x534 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 522:	9f b7       	in	r25, 0x3f	; 63
                cli();
 524:	f8 94       	cli
		*reg &= ~bit;
 526:	88 81       	ld	r24, Y
 528:	20 95       	com	r18
 52a:	82 23       	and	r24, r18
 52c:	88 83       	st	Y, r24
		*out &= ~bit;
 52e:	ec 91       	ld	r30, X
 530:	2e 23       	and	r18, r30
 532:	0b c0       	rjmp	.+22     	; 0x54a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 534:	62 30       	cpi	r22, 0x02	; 2
 536:	61 f4       	brne	.+24     	; 0x550 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 538:	9f b7       	in	r25, 0x3f	; 63
                cli();
 53a:	f8 94       	cli
		*reg &= ~bit;
 53c:	38 81       	ld	r19, Y
 53e:	82 2f       	mov	r24, r18
 540:	80 95       	com	r24
 542:	83 23       	and	r24, r19
 544:	88 83       	st	Y, r24
		*out |= bit;
 546:	ec 91       	ld	r30, X
 548:	2e 2b       	or	r18, r30
 54a:	2c 93       	st	X, r18
		SREG = oldSREG;
 54c:	9f bf       	out	0x3f, r25	; 63
 54e:	06 c0       	rjmp	.+12     	; 0x55c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 550:	8f b7       	in	r24, 0x3f	; 63
                cli();
 552:	f8 94       	cli
		*reg |= bit;
 554:	e8 81       	ld	r30, Y
 556:	2e 2b       	or	r18, r30
 558:	28 83       	st	Y, r18
		SREG = oldSREG;
 55a:	8f bf       	out	0x3f, r24	; 63
	}
}
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 562:	1f 93       	push	r17
 564:	cf 93       	push	r28
 566:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 568:	28 2f       	mov	r18, r24
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	f9 01       	movw	r30, r18
 56e:	e8 59       	subi	r30, 0x98	; 152
 570:	ff 4f       	sbci	r31, 0xFF	; 255
 572:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 574:	f9 01       	movw	r30, r18
 576:	e4 58       	subi	r30, 0x84	; 132
 578:	ff 4f       	sbci	r31, 0xFF	; 255
 57a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 57c:	f9 01       	movw	r30, r18
 57e:	e0 57       	subi	r30, 0x70	; 112
 580:	ff 4f       	sbci	r31, 0xFF	; 255
 582:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 584:	cc 23       	and	r28, r28
 586:	c9 f0       	breq	.+50     	; 0x5ba <digitalWrite+0x58>
 588:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 58a:	81 11       	cpse	r24, r1
 58c:	0e 94 4c 02 	call	0x498	; 0x498 <turnOffPWM>

	out = portOutputRegister(port);
 590:	ec 2f       	mov	r30, r28
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	ee 0f       	add	r30, r30
 596:	ff 1f       	adc	r31, r31
 598:	ec 55       	subi	r30, 0x5C	; 92
 59a:	ff 4f       	sbci	r31, 0xFF	; 255
 59c:	a5 91       	lpm	r26, Z+
 59e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 5a0:	8f b7       	in	r24, 0x3f	; 63
	cli();
 5a2:	f8 94       	cli

	if (val == LOW) {
 5a4:	11 11       	cpse	r17, r1
 5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <digitalWrite+0x50>
		*out &= ~bit;
 5a8:	9c 91       	ld	r25, X
 5aa:	ed 2f       	mov	r30, r29
 5ac:	e0 95       	com	r30
 5ae:	e9 23       	and	r30, r25
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <digitalWrite+0x54>
	} else {
		*out |= bit;
 5b2:	ec 91       	ld	r30, X
 5b4:	ed 2b       	or	r30, r29
 5b6:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 5b8:	8f bf       	out	0x3f, r24	; 63
}
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	1f 91       	pop	r17
 5c0:	08 95       	ret

000005c2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 5c2:	08 95       	ret

000005c4 <__tablejump2__>:
 5c4:	ee 0f       	add	r30, r30
 5c6:	ff 1f       	adc	r31, r31
 5c8:	05 90       	lpm	r0, Z+
 5ca:	f4 91       	lpm	r31, Z
 5cc:	e0 2d       	mov	r30, r0
 5ce:	09 94       	ijmp

000005d0 <__do_global_dtors>:
 5d0:	10 e0       	ldi	r17, 0x00	; 0
 5d2:	cd e5       	ldi	r28, 0x5D	; 93
 5d4:	d0 e0       	ldi	r29, 0x00	; 0
 5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <__do_global_dtors+0x10>
 5d8:	fe 01       	movw	r30, r28
 5da:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__tablejump2__>
 5de:	21 96       	adiw	r28, 0x01	; 1
 5e0:	ce 35       	cpi	r28, 0x5E	; 94
 5e2:	d1 07       	cpc	r29, r17
 5e4:	c9 f7       	brne	.-14     	; 0x5d8 <__do_global_dtors+0x8>
 5e6:	f8 94       	cli

000005e8 <__stop_program>:
 5e8:	ff cf       	rjmp	.-2      	; 0x5e8 <__stop_program>
