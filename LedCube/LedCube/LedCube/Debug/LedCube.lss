
LedCube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000648  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800100  00800100  000006bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001de5  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f1  00000000  00000000  000026a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c72  00000000  00000000  00002f92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000370  00000000  00000000  00003c04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000995  00000000  00000000  00003f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000107f  00000000  00000000  00004909  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005988  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__dtors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_16>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	92 00       	.word	0x0092	; ????

000000ba <__ctors_end>:
  ba:	99 00       	.word	0x0099	; ????

000000bc <__dtors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d8 e0       	ldi	r29, 0x08	; 8
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a2 39       	cpi	r26, 0x92	; 146
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>

000000d8 <__do_global_ctors>:
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	cd e5       	ldi	r28, 0x5D	; 93
  dc:	d0 e0       	ldi	r29, 0x00	; 0
  de:	04 c0       	rjmp	.+8      	; 0xe8 <__do_global_ctors+0x10>
  e0:	21 97       	sbiw	r28, 0x01	; 1
  e2:	fe 01       	movw	r30, r28
  e4:	0e 94 11 03 	call	0x622	; 0x622 <__tablejump2__>
  e8:	cc 35       	cpi	r28, 0x5C	; 92
  ea:	d1 07       	cpc	r29, r17
  ec:	c9 f7       	brne	.-14     	; 0xe0 <__do_global_ctors+0x8>
  ee:	0e 94 9a 01 	call	0x334	; 0x334 <main>
  f2:	0c 94 17 03 	jmp	0x62e	; 0x62e <__do_global_dtors>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <setup>:

LedCube Cube(SER_74, SCK_74, RCK_74);


void setup() {
	Cube.init();
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_ZN7LedCube4initEv>
	Cube.setVoxel(0, 0, 0);
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_ZN7LedCube8setVoxelEhhh>

00000110 <loop>:
}

void loop() {
	delay(500);
 110:	64 ef       	ldi	r22, 0xF4	; 244
 112:	71 e0       	ldi	r23, 0x01	; 1
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 18 02 	call	0x430	; 0x430 <delay>
	Cube.task();
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0c 94 83 01 	jmp	0x306	; 0x306 <_ZN7LedCube4taskEv>

00000124 <_GLOBAL__sub_I_Cube>:

#define SER_74 13  // serial input
#define RCK_74 12  // storage input
#define SCK_74 11  // clock input

LedCube Cube(SER_74, SCK_74, RCK_74);
 124:	2c e0       	ldi	r18, 0x0C	; 12
 126:	4b e0       	ldi	r20, 0x0B	; 11
 128:	6d e0       	ldi	r22, 0x0D	; 13
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_ZN7LedCubeC1Ehhh>

00000132 <_GLOBAL__sub_D_Cube>:
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0c 94 bb 00 	jmp	0x176	; 0x176 <_ZN7LedCubeD1Ev>

0000013a <_ZN7LedCubeC1Ehhh>:
		State = LEDCUBE_STATE_SHOW_FRAME;
		return E_OK;
	} else {
		return E_NOT_OK;
	}
}
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	fc 01       	movw	r30, r24
 140:	60 83       	st	Z, r22
 142:	41 83       	std	Z+1, r20	; 0x01
 144:	22 83       	std	Z+2, r18	; 0x02
 146:	13 82       	std	Z+3, r1	; 0x03
 148:	14 82       	std	Z+4, r1	; 0x04
 14a:	ec 01       	movw	r28, r24
 14c:	29 96       	adiw	r28, 0x09	; 9
 14e:	d6 83       	std	Z+6, r29	; 0x06
 150:	c5 83       	std	Z+5, r28	; 0x05
 152:	dc 01       	movw	r26, r24
 154:	a7 5b       	subi	r26, 0xB7	; 183
 156:	bf 4f       	sbci	r27, 0xFF	; 255
 158:	b0 87       	std	Z+8, r27	; 0x08
 15a:	a7 83       	std	Z+7, r26	; 0x07
 15c:	80 e4       	ldi	r24, 0x40	; 64
 15e:	fe 01       	movw	r30, r28
 160:	98 2f       	mov	r25, r24
 162:	11 92       	st	Z+, r1
 164:	9a 95       	dec	r25
 166:	e9 f7       	brne	.-6      	; 0x162 <_ZN7LedCubeC1Ehhh+0x28>
 168:	fd 01       	movw	r30, r26
 16a:	11 92       	st	Z+, r1
 16c:	8a 95       	dec	r24
 16e:	e9 f7       	brne	.-6      	; 0x16a <_ZN7LedCubeC1Ehhh+0x30>
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <_ZN7LedCubeD1Ev>:
 176:	08 95       	ret

00000178 <_ZN7LedCube9clearCubeEv>:
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ec 01       	movw	r28, r24
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	88 81       	ld	r24, Y
 184:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <digitalWrite>
 188:	18 e4       	ldi	r17, 0x48	; 72
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <digitalWrite>
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <digitalWrite>
 19a:	11 50       	subi	r17, 0x01	; 1
 19c:	b1 f7       	brne	.-20     	; 0x18a <_ZN7LedCube9clearCubeEv+0x12>
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	8a 81       	ldd	r24, Y+2	; 0x02
 1a2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <digitalWrite>
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	8a 81       	ldd	r24, Y+2	; 0x02
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <digitalWrite>

000001b4 <_ZN7LedCube4initEv>:
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	8c 83       	std	Y+4, r24	; 0x04
 1be:	ce 01       	movw	r24, r28
 1c0:	0e 94 bc 00 	call	0x178	; 0x178 <_ZN7LedCube9clearCubeEv>
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	88 81       	ld	r24, Y
 1c8:	0e 94 a4 02 	call	0x548	; 0x548 <pinMode>
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	0e 94 a4 02 	call	0x548	; 0x548 <pinMode>
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	0e 94 a4 02 	call	0x548	; 0x548 <pinMode>
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	8c 83       	std	Y+4, r24	; 0x04
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <_ZN7LedCube8setVoxelEhhh>:
 1e6:	68 30       	cpi	r22, 0x08	; 8
 1e8:	20 f5       	brcc	.+72     	; 0x232 <_ZN7LedCube8setVoxelEhhh+0x4c>
 1ea:	48 30       	cpi	r20, 0x08	; 8
 1ec:	10 f5       	brcc	.+68     	; 0x232 <_ZN7LedCube8setVoxelEhhh+0x4c>
 1ee:	28 30       	cpi	r18, 0x08	; 8
 1f0:	00 f5       	brcc	.+64     	; 0x232 <_ZN7LedCube8setVoxelEhhh+0x4c>
 1f2:	dc 01       	movw	r26, r24
 1f4:	17 96       	adiw	r26, 0x07	; 7
 1f6:	ed 91       	ld	r30, X+
 1f8:	fc 91       	ld	r31, X
 1fa:	18 97       	sbiw	r26, 0x08	; 8
 1fc:	b8 e0       	ldi	r27, 0x08	; 8
 1fe:	4b 9f       	mul	r20, r27
 200:	e0 0d       	add	r30, r0
 202:	f1 1d       	adc	r31, r1
 204:	11 24       	eor	r1, r1
 206:	e2 0f       	add	r30, r18
 208:	f1 1d       	adc	r31, r1
 20a:	28 e0       	ldi	r18, 0x08	; 8
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	26 1b       	sub	r18, r22
 210:	31 09       	sbc	r19, r1
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	04 c0       	rjmp	.+8      	; 0x224 <_ZN7LedCube8setVoxelEhhh+0x3e>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	aa 1f       	adc	r26, r26
 222:	bb 1f       	adc	r27, r27
 224:	2a 95       	dec	r18
 226:	d2 f7       	brpl	.-12     	; 0x21c <_ZN7LedCube8setVoxelEhhh+0x36>
 228:	20 81       	ld	r18, Z
 22a:	82 2b       	or	r24, r18
 22c:	80 83       	st	Z, r24
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	08 95       	ret
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	08 95       	ret

00000236 <_ZN7LedCube8sendDataEh>:
 *
 *  \param[in]      Data	data (Byte) to send
 *  \return         -
 *****************************************************************************************************************************************************/
void LedCube::sendData(byte Data)
{
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	8c 01       	movw	r16, r24
 244:	c0 e0       	ldi	r28, 0x00	; 0
 246:	d0 e0       	ldi	r29, 0x00	; 0
	for (byte i = 0; i < 8; i++) {
		// LSB First
		digitalWriteFast(DataInPin, !!(Data & (1 << i)));
 248:	e6 2e       	mov	r14, r22
 24a:	f1 2c       	mov	r15, r1
 24c:	b7 01       	movw	r22, r14
 24e:	0c 2e       	mov	r0, r28
 250:	02 c0       	rjmp	.+4      	; 0x256 <_ZN7LedCube8sendDataEh+0x20>
 252:	75 95       	asr	r23
 254:	67 95       	ror	r22
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <_ZN7LedCube8sendDataEh+0x1c>
 25a:	61 70       	andi	r22, 0x01	; 1
 25c:	77 27       	eor	r23, r23
 25e:	f8 01       	movw	r30, r16
 260:	80 81       	ld	r24, Z
 262:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <digitalWrite>
		// MSB First
		//digitalWrite(DataInPin, !!(Data & (1 << (7 - i))));
		// toggle clock pin
		digitalWriteFast(ClockPin, HIGH);
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	f8 01       	movw	r30, r16
 26a:	81 81       	ldd	r24, Z+1	; 0x01
 26c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <digitalWrite>
		digitalWriteFast(ClockPin, LOW);
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	f8 01       	movw	r30, r16
 274:	81 81       	ldd	r24, Z+1	; 0x01
 276:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <digitalWrite>
 27a:	21 96       	adiw	r28, 0x01	; 1
 *  \param[in]      Data	data (Byte) to send
 *  \return         -
 *****************************************************************************************************************************************************/
void LedCube::sendData(byte Data)
{
	for (byte i = 0; i < 8; i++) {
 27c:	c8 30       	cpi	r28, 0x08	; 8
 27e:	d1 05       	cpc	r29, r1
 280:	29 f7       	brne	.-54     	; 0x24c <_ZN7LedCube8sendDataEh+0x16>
		//digitalWrite(DataInPin, !!(Data & (1 << (7 - i))));
		// toggle clock pin
		digitalWriteFast(ClockPin, HIGH);
		digitalWriteFast(ClockPin, LOW);
	}
} /* sendData */
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	ff 90       	pop	r15
 28c:	ef 90       	pop	r14
 28e:	08 95       	ret

00000290 <_ZN7LedCube9showLayerEh>:
 *  \param[in]      Layer		layer which should be shown on the cube
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showLayer(byte Layer)
{
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
	stdReturnType ReturnValue = E_NOT_OK;
	
	if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
 29c:	68 30       	cpi	r22, 0x08	; 8
 29e:	58 f5       	brcc	.+86     	; 0x2f6 <_ZN7LedCube9showLayerEh+0x66>
 2a0:	ec 01       	movw	r28, r24
		/* put on given layer */
		sendData(1 << (Layer - 1));
 2a2:	06 2f       	mov	r16, r22
 2a4:	10 e0       	ldi	r17, 0x00	; 0
 2a6:	c8 01       	movw	r24, r16
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <_ZN7LedCube9showLayerEh+0x22>
 2b0:	66 0f       	add	r22, r22
 2b2:	8a 95       	dec	r24
 2b4:	ea f7       	brpl	.-6      	; 0x2b0 <_ZN7LedCube9showLayerEh+0x20>
 2b6:	ce 01       	movw	r24, r28
 2b8:	0e 94 1b 01 	call	0x236	; 0x236 <_ZN7LedCube8sendDataEh>
 2bc:	e1 2c       	mov	r14, r1
 2be:	f1 2c       	mov	r15, r1
		//sendData(1 << Layer);
		/* send the layer data to the shift registers */
		for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
			sendData(CurrentFrame[Y][Layer]);
 2c0:	ed 81       	ldd	r30, Y+5	; 0x05
 2c2:	fe 81       	ldd	r31, Y+6	; 0x06
 2c4:	ee 0d       	add	r30, r14
 2c6:	ff 1d       	adc	r31, r15
 2c8:	e0 0f       	add	r30, r16
 2ca:	f1 1f       	adc	r31, r17
 2cc:	60 81       	ld	r22, Z
 2ce:	ce 01       	movw	r24, r28
 2d0:	0e 94 1b 01 	call	0x236	; 0x236 <_ZN7LedCube8sendDataEh>
 2d4:	88 e0       	ldi	r24, 0x08	; 8
 2d6:	e8 0e       	add	r14, r24
 2d8:	f1 1c       	adc	r15, r1
	if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
		/* put on given layer */
		sendData(1 << (Layer - 1));
		//sendData(1 << Layer);
		/* send the layer data to the shift registers */
		for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
 2da:	80 e4       	ldi	r24, 0x40	; 64
 2dc:	e8 16       	cp	r14, r24
 2de:	f1 04       	cpc	r15, r1
 2e0:	79 f7       	brne	.-34     	; 0x2c0 <_ZN7LedCube9showLayerEh+0x30>
			sendData(CurrentFrame[Y][Layer]);
		}
		// toggle storage pin
		digitalWriteFast(StoragePin, HIGH);
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	8a 81       	ldd	r24, Y+2	; 0x02
 2e6:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <digitalWrite>
		digitalWriteFast(StoragePin, LOW);
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	8a 81       	ldd	r24, Y+2	; 0x02
 2ee:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <digitalWrite>
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <_ZN7LedCube9showLayerEh+0x68>
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showLayer(byte Layer)
{
	stdReturnType ReturnValue = E_NOT_OK;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
		digitalWriteFast(StoragePin, LOW);

		ReturnValue = E_OK;
	}
	return ReturnValue;
} /* showLayer */
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	ff 90       	pop	r15
 302:	ef 90       	pop	r14
 304:	08 95       	ret

00000306 <_ZN7LedCube4taskEv>:
 *					has to be called periodically
 *                  
 *  \return         -
 *****************************************************************************************************************************************************/
void LedCube::task()
{
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	fc 01       	movw	r30, r24
	if(State == LEDCUBE_STATE_SHOW_FRAME || State == LEDCUBE_STATE_NEXT_FRAME_READY) {
 30c:	84 81       	ldd	r24, Z+4	; 0x04
 30e:	82 50       	subi	r24, 0x02	; 2
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	60 f4       	brcc	.+24     	; 0x32c <_ZN7LedCube4taskEv+0x26>
		if(CurrentLayer >= LEDCUBE_NUMBER_OF_LAYERS) {
 314:	63 81       	ldd	r22, Z+3	; 0x03
 316:	68 30       	cpi	r22, 0x08	; 8
 318:	10 f0       	brcs	.+4      	; 0x31e <_ZN7LedCube4taskEv+0x18>
			CurrentLayer = 0;
 31a:	13 82       	std	Z+3, r1	; 0x03
 31c:	07 c0       	rjmp	.+14     	; 0x32c <_ZN7LedCube4taskEv+0x26>
 31e:	ef 01       	movw	r28, r30
		} else {
			showLayer(CurrentLayer);
 320:	cf 01       	movw	r24, r30
 322:	0e 94 48 01 	call	0x290	; 0x290 <_ZN7LedCube9showLayerEh>
			CurrentLayer++;
 326:	8b 81       	ldd	r24, Y+3	; 0x03
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
} /* task */
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 332:	08 95       	ret

00000334 <main>:

int main(void)
{
	init();
 334:	0e 94 40 02 	call	0x480	; 0x480 <init>

	initVariant();
 338:	0e 94 99 01 	call	0x332	; 0x332 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 33c:	0e 94 7d 00 	call	0xfa	; 0xfa <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 340:	c0 e0       	ldi	r28, 0x00	; 0
 342:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 344:	0e 94 88 00 	call	0x110	; 0x110 <loop>
		if (serialEventRun) serialEventRun();
 348:	20 97       	sbiw	r28, 0x00	; 0
 34a:	e1 f3       	breq	.-8      	; 0x344 <main+0x10>
 34c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 350:	f9 cf       	rjmp	.-14     	; 0x344 <main+0x10>

00000352 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	2f 93       	push	r18
 35e:	3f 93       	push	r19
 360:	8f 93       	push	r24
 362:	9f 93       	push	r25
 364:	af 93       	push	r26
 366:	bf 93       	push	r27
 368:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <timer0_millis>
 36c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <timer0_millis+0x1>
 370:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <timer0_millis+0x2>
 374:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <timer0_millis+0x3>
 378:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <timer0_fract>
 37c:	23 e0       	ldi	r18, 0x03	; 3
 37e:	23 0f       	add	r18, r19
 380:	2d 37       	cpi	r18, 0x7D	; 125
 382:	20 f4       	brcc	.+8      	; 0x38c <__vector_16+0x3a>
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	a1 1d       	adc	r26, r1
 388:	b1 1d       	adc	r27, r1
 38a:	05 c0       	rjmp	.+10     	; 0x396 <__vector_16+0x44>
 38c:	26 e8       	ldi	r18, 0x86	; 134
 38e:	23 0f       	add	r18, r19
 390:	02 96       	adiw	r24, 0x02	; 2
 392:	a1 1d       	adc	r26, r1
 394:	b1 1d       	adc	r27, r1
 396:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <timer0_fract>
 39a:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <timer0_millis>
 39e:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <timer0_millis+0x1>
 3a2:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <timer0_millis+0x2>
 3a6:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <timer0_millis+0x3>
 3aa:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timer0_overflow_count>
 3ae:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timer0_overflow_count+0x1>
 3b2:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <timer0_overflow_count+0x2>
 3b6:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <timer0_overflow_count+0x3>
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	a1 1d       	adc	r26, r1
 3be:	b1 1d       	adc	r27, r1
 3c0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timer0_overflow_count>
 3c4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timer0_overflow_count+0x1>
 3c8:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timer0_overflow_count+0x2>
 3cc:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timer0_overflow_count+0x3>
 3d0:	bf 91       	pop	r27
 3d2:	af 91       	pop	r26
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	3f 91       	pop	r19
 3da:	2f 91       	pop	r18
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <micros>:
 3e6:	3f b7       	in	r19, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timer0_overflow_count>
 3ee:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timer0_overflow_count+0x1>
 3f2:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <timer0_overflow_count+0x2>
 3f6:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <timer0_overflow_count+0x3>
 3fa:	26 b5       	in	r18, 0x26	; 38
 3fc:	a8 9b       	sbis	0x15, 0	; 21
 3fe:	05 c0       	rjmp	.+10     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 400:	2f 3f       	cpi	r18, 0xFF	; 255
 402:	19 f0       	breq	.+6      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	a1 1d       	adc	r26, r1
 408:	b1 1d       	adc	r27, r1
 40a:	3f bf       	out	0x3f, r19	; 63
 40c:	ba 2f       	mov	r27, r26
 40e:	a9 2f       	mov	r26, r25
 410:	98 2f       	mov	r25, r24
 412:	88 27       	eor	r24, r24
 414:	82 0f       	add	r24, r18
 416:	91 1d       	adc	r25, r1
 418:	a1 1d       	adc	r26, r1
 41a:	b1 1d       	adc	r27, r1
 41c:	bc 01       	movw	r22, r24
 41e:	cd 01       	movw	r24, r26
 420:	42 e0       	ldi	r20, 0x02	; 2
 422:	66 0f       	add	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	88 1f       	adc	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	4a 95       	dec	r20
 42c:	d1 f7       	brne	.-12     	; 0x422 <__FUSE_REGION_LENGTH__+0x22>
 42e:	08 95       	ret

00000430 <delay>:
 430:	cf 92       	push	r12
 432:	df 92       	push	r13
 434:	ef 92       	push	r14
 436:	ff 92       	push	r15
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	6b 01       	movw	r12, r22
 43e:	7c 01       	movw	r14, r24
 440:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <micros>
 444:	eb 01       	movw	r28, r22
 446:	c1 14       	cp	r12, r1
 448:	d1 04       	cpc	r13, r1
 44a:	e1 04       	cpc	r14, r1
 44c:	f1 04       	cpc	r15, r1
 44e:	89 f0       	breq	.+34     	; 0x472 <delay+0x42>
 450:	0e 94 10 03 	call	0x620	; 0x620 <yield>
 454:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <micros>
 458:	6c 1b       	sub	r22, r28
 45a:	7d 0b       	sbc	r23, r29
 45c:	68 3e       	cpi	r22, 0xE8	; 232
 45e:	73 40       	sbci	r23, 0x03	; 3
 460:	90 f3       	brcs	.-28     	; 0x446 <delay+0x16>
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	c8 1a       	sub	r12, r24
 466:	d1 08       	sbc	r13, r1
 468:	e1 08       	sbc	r14, r1
 46a:	f1 08       	sbc	r15, r1
 46c:	c8 51       	subi	r28, 0x18	; 24
 46e:	dc 4f       	sbci	r29, 0xFC	; 252
 470:	ea cf       	rjmp	.-44     	; 0x446 <delay+0x16>
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	ff 90       	pop	r15
 478:	ef 90       	pop	r14
 47a:	df 90       	pop	r13
 47c:	cf 90       	pop	r12
 47e:	08 95       	ret

00000480 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 480:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 482:	84 b5       	in	r24, 0x24	; 36
 484:	82 60       	ori	r24, 0x02	; 2
 486:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 488:	84 b5       	in	r24, 0x24	; 36
 48a:	81 60       	ori	r24, 0x01	; 1
 48c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 48e:	85 b5       	in	r24, 0x25	; 37
 490:	82 60       	ori	r24, 0x02	; 2
 492:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 494:	85 b5       	in	r24, 0x25	; 37
 496:	81 60       	ori	r24, 0x01	; 1
 498:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 49a:	ee e6       	ldi	r30, 0x6E	; 110
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	81 60       	ori	r24, 0x01	; 1
 4a2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 4a4:	e1 e8       	ldi	r30, 0x81	; 129
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 4aa:	80 81       	ld	r24, Z
 4ac:	82 60       	ori	r24, 0x02	; 2
 4ae:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 4b0:	80 81       	ld	r24, Z
 4b2:	81 60       	ori	r24, 0x01	; 1
 4b4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 4b6:	e0 e8       	ldi	r30, 0x80	; 128
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	81 60       	ori	r24, 0x01	; 1
 4be:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 4c0:	e1 eb       	ldi	r30, 0xB1	; 177
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	84 60       	ori	r24, 0x04	; 4
 4c8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 4ca:	e0 eb       	ldi	r30, 0xB0	; 176
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	81 60       	ori	r24, 0x01	; 1
 4d2:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 4d4:	ea e7       	ldi	r30, 0x7A	; 122
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	84 60       	ori	r24, 0x04	; 4
 4dc:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 4de:	80 81       	ld	r24, Z
 4e0:	82 60       	ori	r24, 0x02	; 2
 4e2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 4e4:	80 81       	ld	r24, Z
 4e6:	81 60       	ori	r24, 0x01	; 1
 4e8:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 4ea:	80 81       	ld	r24, Z
 4ec:	80 68       	ori	r24, 0x80	; 128
 4ee:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 4f0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4f4:	08 95       	ret

000004f6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 4f6:	83 30       	cpi	r24, 0x03	; 3
 4f8:	81 f0       	breq	.+32     	; 0x51a <turnOffPWM+0x24>
 4fa:	28 f4       	brcc	.+10     	; 0x506 <turnOffPWM+0x10>
 4fc:	81 30       	cpi	r24, 0x01	; 1
 4fe:	99 f0       	breq	.+38     	; 0x526 <turnOffPWM+0x30>
 500:	82 30       	cpi	r24, 0x02	; 2
 502:	a1 f0       	breq	.+40     	; 0x52c <turnOffPWM+0x36>
 504:	08 95       	ret
 506:	87 30       	cpi	r24, 0x07	; 7
 508:	a9 f0       	breq	.+42     	; 0x534 <turnOffPWM+0x3e>
 50a:	88 30       	cpi	r24, 0x08	; 8
 50c:	b9 f0       	breq	.+46     	; 0x53c <turnOffPWM+0x46>
 50e:	84 30       	cpi	r24, 0x04	; 4
 510:	d1 f4       	brne	.+52     	; 0x546 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 512:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 516:	8f 7d       	andi	r24, 0xDF	; 223
 518:	03 c0       	rjmp	.+6      	; 0x520 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 51a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 51e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 520:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 524:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 526:	84 b5       	in	r24, 0x24	; 36
 528:	8f 77       	andi	r24, 0x7F	; 127
 52a:	02 c0       	rjmp	.+4      	; 0x530 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 52c:	84 b5       	in	r24, 0x24	; 36
 52e:	8f 7d       	andi	r24, 0xDF	; 223
 530:	84 bd       	out	0x24, r24	; 36
 532:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 534:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 538:	8f 77       	andi	r24, 0x7F	; 127
 53a:	03 c0       	rjmp	.+6      	; 0x542 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 53c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 540:	8f 7d       	andi	r24, 0xDF	; 223
 542:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 546:	08 95       	ret

00000548 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	fc 01       	movw	r30, r24
 550:	e4 58       	subi	r30, 0x84	; 132
 552:	ff 4f       	sbci	r31, 0xFF	; 255
 554:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 556:	fc 01       	movw	r30, r24
 558:	e0 57       	subi	r30, 0x70	; 112
 55a:	ff 4f       	sbci	r31, 0xFF	; 255
 55c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 55e:	88 23       	and	r24, r24
 560:	61 f1       	breq	.+88     	; 0x5ba <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	fc 01       	movw	r30, r24
 56a:	e2 55       	subi	r30, 0x52	; 82
 56c:	ff 4f       	sbci	r31, 0xFF	; 255
 56e:	c5 91       	lpm	r28, Z+
 570:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 572:	fc 01       	movw	r30, r24
 574:	ec 55       	subi	r30, 0x5C	; 92
 576:	ff 4f       	sbci	r31, 0xFF	; 255
 578:	a5 91       	lpm	r26, Z+
 57a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 57c:	61 11       	cpse	r22, r1
 57e:	09 c0       	rjmp	.+18     	; 0x592 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 580:	9f b7       	in	r25, 0x3f	; 63
                cli();
 582:	f8 94       	cli
		*reg &= ~bit;
 584:	88 81       	ld	r24, Y
 586:	20 95       	com	r18
 588:	82 23       	and	r24, r18
 58a:	88 83       	st	Y, r24
		*out &= ~bit;
 58c:	ec 91       	ld	r30, X
 58e:	2e 23       	and	r18, r30
 590:	0b c0       	rjmp	.+22     	; 0x5a8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 592:	62 30       	cpi	r22, 0x02	; 2
 594:	61 f4       	brne	.+24     	; 0x5ae <pinMode+0x66>
		uint8_t oldSREG = SREG;
 596:	9f b7       	in	r25, 0x3f	; 63
                cli();
 598:	f8 94       	cli
		*reg &= ~bit;
 59a:	38 81       	ld	r19, Y
 59c:	82 2f       	mov	r24, r18
 59e:	80 95       	com	r24
 5a0:	83 23       	and	r24, r19
 5a2:	88 83       	st	Y, r24
		*out |= bit;
 5a4:	ec 91       	ld	r30, X
 5a6:	2e 2b       	or	r18, r30
 5a8:	2c 93       	st	X, r18
		SREG = oldSREG;
 5aa:	9f bf       	out	0x3f, r25	; 63
 5ac:	06 c0       	rjmp	.+12     	; 0x5ba <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 5ae:	8f b7       	in	r24, 0x3f	; 63
                cli();
 5b0:	f8 94       	cli
		*reg |= bit;
 5b2:	e8 81       	ld	r30, Y
 5b4:	2e 2b       	or	r18, r30
 5b6:	28 83       	st	Y, r18
		SREG = oldSREG;
 5b8:	8f bf       	out	0x3f, r24	; 63
	}
}
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	08 95       	ret

000005c0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 5c0:	1f 93       	push	r17
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 5c6:	28 2f       	mov	r18, r24
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	f9 01       	movw	r30, r18
 5cc:	e8 59       	subi	r30, 0x98	; 152
 5ce:	ff 4f       	sbci	r31, 0xFF	; 255
 5d0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 5d2:	f9 01       	movw	r30, r18
 5d4:	e4 58       	subi	r30, 0x84	; 132
 5d6:	ff 4f       	sbci	r31, 0xFF	; 255
 5d8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 5da:	f9 01       	movw	r30, r18
 5dc:	e0 57       	subi	r30, 0x70	; 112
 5de:	ff 4f       	sbci	r31, 0xFF	; 255
 5e0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 5e2:	cc 23       	and	r28, r28
 5e4:	c9 f0       	breq	.+50     	; 0x618 <digitalWrite+0x58>
 5e6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 5e8:	81 11       	cpse	r24, r1
 5ea:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <turnOffPWM>

	out = portOutputRegister(port);
 5ee:	ec 2f       	mov	r30, r28
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	ee 0f       	add	r30, r30
 5f4:	ff 1f       	adc	r31, r31
 5f6:	ec 55       	subi	r30, 0x5C	; 92
 5f8:	ff 4f       	sbci	r31, 0xFF	; 255
 5fa:	a5 91       	lpm	r26, Z+
 5fc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 5fe:	8f b7       	in	r24, 0x3f	; 63
	cli();
 600:	f8 94       	cli

	if (val == LOW) {
 602:	11 11       	cpse	r17, r1
 604:	05 c0       	rjmp	.+10     	; 0x610 <digitalWrite+0x50>
		*out &= ~bit;
 606:	9c 91       	ld	r25, X
 608:	ed 2f       	mov	r30, r29
 60a:	e0 95       	com	r30
 60c:	e9 23       	and	r30, r25
 60e:	02 c0       	rjmp	.+4      	; 0x614 <digitalWrite+0x54>
	} else {
		*out |= bit;
 610:	ec 91       	ld	r30, X
 612:	ed 2b       	or	r30, r29
 614:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 616:	8f bf       	out	0x3f, r24	; 63
}
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	1f 91       	pop	r17
 61e:	08 95       	ret

00000620 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 620:	08 95       	ret

00000622 <__tablejump2__>:
 622:	ee 0f       	add	r30, r30
 624:	ff 1f       	adc	r31, r31
 626:	05 90       	lpm	r0, Z+
 628:	f4 91       	lpm	r31, Z
 62a:	e0 2d       	mov	r30, r0
 62c:	09 94       	ijmp

0000062e <__do_global_dtors>:
 62e:	10 e0       	ldi	r17, 0x00	; 0
 630:	cd e5       	ldi	r28, 0x5D	; 93
 632:	d0 e0       	ldi	r29, 0x00	; 0
 634:	04 c0       	rjmp	.+8      	; 0x63e <__do_global_dtors+0x10>
 636:	fe 01       	movw	r30, r28
 638:	0e 94 11 03 	call	0x622	; 0x622 <__tablejump2__>
 63c:	21 96       	adiw	r28, 0x01	; 1
 63e:	ce 35       	cpi	r28, 0x5E	; 94
 640:	d1 07       	cpc	r29, r17
 642:	c9 f7       	brne	.-14     	; 0x636 <__do_global_dtors+0x8>
 644:	f8 94       	cli

00000646 <__stop_program>:
 646:	ff cf       	rjmp	.-2      	; 0x646 <__stop_program>
