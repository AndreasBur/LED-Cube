/******************************************************************************************************************************************************
 *  COPYRIGHT
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) Andreas Burnickl                                                                                                 All rights reserved.
 *
 *  \endverbatim
 *  ---------------------------------------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------------------------------------*/
/**     \file       LedCube.c
 *      \brief      Main file of LedCube library
 *
 *      \details    Arduino library to drive an 8x8x8 LED Cube
 *                  
 *
 *****************************************************************************************************************************************************/
#define _LECUBE_SOURCE_

/******************************************************************************************************************************************************
 * INCLUDES
 *****************************************************************************************************************************************************/
#include "LedCube.h"

/******************************************************************************************************************************************************
 * P U B L I C   F U N C T I O N S
 *****************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  CONSTRUCTOR OF LedCube
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *
 *  \param[in]      
 *  \param[in]      
 *  \param[in]      
 *  \return         -
 *****************************************************************************************************************************************************/
LedCube::LedCube(byte sDataInPin, byte sClockPin, byte sStoragePin)
{
	DataInPin = sDataInPin;
	ClockPin = sClockPin;
	StoragePin = sStoragePin;
	CurrentLayer = 0;
} /* LedCube */




/******************************************************************************************************************************************************
  DESTRUCTOR OF LedCube
******************************************************************************************************************************************************/
LedCube::~LedCube()
{

} /* ~LedCube */


/******************************************************************************************************************************************************
  task()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *
 *  \param[in]      
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
void LedCube::task()
{
	if(CurrentLayer >= LEDCUBE_NUMBER_OF_LAYERS) {
		CurrentLayer = 0;
	} else {
		showLayer(CurrentLayer);
		CurrentLayer++;
	}
} /* task */


/******************************************************************************************************************************************************
 * P R I V A T E   F U N C T I O N S
 *****************************************************************************************************************************************************/

/******************************************************************************************************************************************************
  sendData()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *
 *  \param[in]      
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
void LedCube::sendData(byte Data)
{
	for (byte i = 0; i < 8; i++) {
		// LSB First
		digitalWriteFast(DataInPin, !!(Data & (1 << i)));
		// MSB First
		//digitalWrite(DataInPin, !!(Data & (1 << (7 - i))));
		
		digitalWriteFast(ClockPin, HIGH);
		digitalWriteFast(ClockPin, LOW);
	}
} /* sendData */


/******************************************************************************************************************************************************
  showLayer()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *
 *  \param[in]      
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
stdReturnType LedCube::showLayer(byte Layer)
{
	stdReturnType ReturnValue = E_NOT_OK;
	
	if(Layer < LEDCUBE_NUMBER_OF_LAYERS) {
		/* put on given layer */
		sendData(1 << (Layer - 1));
		//sendData(1 << Layer);
		
		for(byte Y = 0; Y < LEDCUBE_NUMBER_OF_LEDS_PER_SIDE; Y++) {
			sendData(CurrentFrame[Y][Layer]);
		}

		//for(byte j = (LEDCUBE_NUMBER_OF_LAYERS * Layer) - 1; j >= LEDCUBE_NUMBER_OF_LAYERS * (Layer - 1); j--) {
			//sendData(CubeBuffer[j]);
		//}

		digitalWriteFast(StoragePin, HIGH);
		digitalWriteFast(StoragePin, LOW);

		ReturnValue = E_OK;
	}
	return ReturnValue;
} /* showLayer */


/******************************************************************************************************************************************************
  switchBufferPointer()
******************************************************************************************************************************************************/
/*! \brief          
 *  \details        
 *                  
 *
 *  \param[in]      
 *  \return         E_OK
 *                  E_NOT_OK
 *****************************************************************************************************************************************************/
void LedCube::switchBufferPointer()
{
	if(FrameReady) {
		byte **pTmp = CurrentFrame;
		CurrentFrame = NextFrame;
		NextFrame = pTmp;
		FrameReady = false;
	}
} /* switchBufferPointer */

/******************************************************************************************************************************************************
 *  E N D   O F   F I L E
 *****************************************************************************************************************************************************/
 